-- Deploy kcls-evergreen:additional_schemas to pg
-- requires: vanilla_evergreen_db

BEGIN;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: cmd; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA cmd;


ALTER SCHEMA cmd OWNER TO postgres;

--
-- Name: collectionhq; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA collectionhq;


ALTER SCHEMA collectionhq OWNER TO evergreen;

--
-- Name: envisionware; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA envisionware;


ALTER SCHEMA envisionware OWNER TO evergreen;

--
-- Name: esi; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA esi;


ALTER SCHEMA esi OWNER TO evergreen;

--
-- Name: esi16538; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA esi16538;


ALTER SCHEMA esi16538 OWNER TO evergreen;

--
-- Name: esi_14812; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA esi_14812;


ALTER SCHEMA esi_14812 OWNER TO evergreen;

--
-- Name: m_enum; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_enum;


ALTER SCHEMA m_enum OWNER TO evergreen;

--
-- Name: m_kcls; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls;


ALTER SCHEMA m_kcls OWNER TO evergreen;

--
-- Name: m_kcls2; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls2;


ALTER SCHEMA m_kcls2 OWNER TO evergreen;

--
-- Name: m_kcls3; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls3;


ALTER SCHEMA m_kcls3 OWNER TO evergreen;

--
-- Name: m_kcls_call_fix; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_call_fix;


ALTER SCHEMA m_kcls_call_fix OWNER TO evergreen;

--
-- Name: m_kcls_circhist; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_circhist;


ALTER SCHEMA m_kcls_circhist OWNER TO evergreen;

--
-- Name: m_kcls_gap; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_gap;


ALTER SCHEMA m_kcls_gap OWNER TO evergreen;

--
-- Name: m_kcls_holds; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_holds;


ALTER SCHEMA m_kcls_holds OWNER TO evergreen;

--
-- Name: m_kcls_holdsall; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_holdsall;


ALTER SCHEMA m_kcls_holdsall OWNER TO evergreen;

--
-- Name: m_kcls_holdsall2; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_holdsall2;


ALTER SCHEMA m_kcls_holdsall2 OWNER TO evergreen;

--
-- Name: m_kcls_holdsall3; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_holdsall3;


ALTER SCHEMA m_kcls_holdsall3 OWNER TO evergreen;

--
-- Name: m_kcls_holdsfix; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_holdsfix;


ALTER SCHEMA m_kcls_holdsfix OWNER TO evergreen;

--
-- Name: m_kcls_items2; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_items2;


ALTER SCHEMA m_kcls_items2 OWNER TO evergreen;

--
-- Name: m_kcls_items3; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_items3;


ALTER SCHEMA m_kcls_items3 OWNER TO evergreen;

--
-- Name: m_kcls_ord; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_ord;


ALTER SCHEMA m_kcls_ord OWNER TO evergreen;

--
-- Name: m_kcls_ord2; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_ord2;


ALTER SCHEMA m_kcls_ord2 OWNER TO evergreen;

--
-- Name: m_kcls_ord3; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_ord3;


ALTER SCHEMA m_kcls_ord3 OWNER TO evergreen;

--
-- Name: m_kcls_xfr; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_kcls_xfr;


ALTER SCHEMA m_kcls_xfr OWNER TO evergreen;

--
-- Name: m_test; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA m_test;


ALTER SCHEMA m_test OWNER TO evergreen;

--
-- Name: migration_tools; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA migration_tools;


ALTER SCHEMA migration_tools OWNER TO evergreen;

--
-- Name: prod_staff_users; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA prod_staff_users;


ALTER SCHEMA prod_staff_users OWNER TO evergreen;

--
-- Name: sip_temp; Type: SCHEMA; Schema: -; Owner: evergreen
--

CREATE SCHEMA sip_temp;


ALTER SCHEMA sip_temp OWNER TO evergreen;

SET search_path = cmd, pg_catalog;

--
-- Name: ranked_volumes_ex(bigint, integer, integer, public.hstore, public.hstore, integer); Type: FUNCTION; Schema: cmd; Owner: postgres
--

CREATE FUNCTION ranked_volumes_ex(bibid bigint, ouid integer, depth integer DEFAULT NULL::integer, slimit public.hstore DEFAULT NULL::public.hstore, soffset public.hstore DEFAULT NULL::public.hstore, pref_lib integer DEFAULT NULL::integer) RETURNS TABLE(id bigint, name text, label_sortkey text, rank bigint)
    LANGUAGE sql STABLE
    AS $_$
    SELECT ua.id, ua.name, ua.label_sortkey, MIN(ua.rank) AS rank FROM (
        SELECT acn.id, aou.name, acn.label_sortkey,
            RANK() OVER w
        FROM asset.call_number acn
            JOIN asset.copy acp ON (acn.id = acp.call_number)
            JOIN actor.org_unit_descendants( $2, COALESCE(
                $3, (
                    SELECT depth
                    FROM actor.org_unit_type aout
                        INNER JOIN actor.org_unit ou ON ou_type = aout.id
                    WHERE ou.id = $2
                ), $6)
            ) AS aou ON (acp.circ_lib = aou.id)
        WHERE acn.record = $1
            AND acn.deleted IS FALSE
            AND acp.deleted IS FALSE
        GROUP BY acn.id, acp.status, aou.name, acn.label_sortkey, aou.id
        WINDOW w AS (
            ORDER BY evergreen.rank_ou(aou.id, $2, $6), evergreen.rank_cp_status(acp.status)
        )
    ) AS ua
    GROUP BY ua.id, ua.name, ua.label_sortkey
    ORDER BY rank, ua.name, ua.label_sortkey
    LIMIT ($4 -> 'acn')::INT
    OFFSET ($5 -> 'acn')::INT;
$_$;


ALTER FUNCTION cmd.ranked_volumes_ex(bibid bigint, ouid integer, depth integer, slimit public.hstore, soffset public.hstore, pref_lib integer) OWNER TO postgres;

SET search_path = collectionhq, pg_catalog;

--
-- Name: attempt_price(text); Type: FUNCTION; Schema: collectionhq; Owner: evergreen
--

CREATE FUNCTION attempt_price(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
  DECLARE
    attempt_value ALIAS FOR $1;
    output TEXT;
  BEGIN
    FOR output IN
      EXECUTE 'SELECT (REGEXP_REPLACE(' || quote_literal(attempt_value) || E', E\'[^0-9\.]\', \'\', \'g\')::NUMERIC(8,2) * 100)::INTEGER AS a;'
    LOOP
      RETURN output;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      FOR output IN
        EXECUTE E'SELECT \'\' AS a;'
      LOOP
        RETURN output;
      END LOOP;
  END;
$_$;


ALTER FUNCTION collectionhq.attempt_price(text) OWNER TO evergreen;

--
-- Name: attempt_year(text); Type: FUNCTION; Schema: collectionhq; Owner: evergreen
--

CREATE FUNCTION attempt_year(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
  DECLARE
    attempt_value ALIAS FOR $1;
    output TEXT;
  BEGIN
    FOR output IN
      EXECUTE 'SELECT SUBSTRING(REGEXP_REPLACE(' || quote_literal(attempt_value) || E', E\'[^0-9]\', \'\', \'g\') FROM 1 FOR 4) AS a;'
    LOOP
      RETURN output;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      FOR output IN
        EXECUTE E'SELECT \'\' AS a;'
      LOOP
        RETURN output;
      END LOOP;
  END;
$_$;


ALTER FUNCTION collectionhq.attempt_year(text) OWNER TO evergreen;

--
-- Name: quote(text); Type: FUNCTION; Schema: collectionhq; Owner: evergreen
--

CREATE FUNCTION quote(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
  DECLARE
    value ALIAS FOR $1;
    output TEXT;
  BEGIN
    IF value IS NOT NULL AND value <> '' THEN
      RETURN '##' || value || '##';
    ELSE
      RETURN '';
    END IF;
  END;
$_$;


ALTER FUNCTION collectionhq.quote(text) OWNER TO evergreen;

--
-- Name: write_bib_rows_to_stdout(text, integer); Type: FUNCTION; Schema: collectionhq; Owner: evergreen
--

CREATE FUNCTION write_bib_rows_to_stdout(text, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
-- Usage: SELECT collectionHQ.write_bib_rows_to_stdout('LIBRARYCODE', org_unit_id);

  DECLARE
    library_service_code ALIAS FOR $1;
    org_unit_id ALIAS FOR $2;
    isbn TEXT := '';
    title TEXT := '';
    author TEXT := '';
    edition_num TEXT := '';
    publication_date TEXT := '';
    publisher TEXT := '';
    price TEXT := '';
    lms_item_type TEXT := '';
    class_num TEXT := '';
    extract_date TEXT := '';
    output TEXT := '';
    lms_bib_id BIGINT;
    num_rows INTEGER := 0;

  BEGIN
    
    SELECT REPLACE(NOW()::DATE::TEXT, '-', '') INTO extract_date;
    FOR lms_bib_id IN
      SELECT DISTINCT bre.id FROM biblio.record_entry bre JOIN asset.call_number acn ON (acn.record = bre.id) WHERE acn.owning_lib IN (SELECT id FROM actor.org_unit_descendants(org_unit_id)) AND NOT acn.deleted AND NOT bre.deleted
    LOOP

      SELECT r.isbn[1],
             SUBSTRING(r.title FROM 1 FOR 100),
             SUBSTRING(r.author FROM 1 FOR 50)
      INTO isbn, title, author
      FROM reporter.materialized_simple_record r
      WHERE id = lms_bib_id;
      SELECT 
        SUBSTRING(naco_normalize((XPATH('//marc:datafield[@tag="250"][1]/marc:subfield[@code="a"]/text()', marc::XML, ARRAY[ARRAY['marc', 'http://www.loc.gov/MARC21/slim']]))[1]::TEXT, 'a') FROM 1 FOR 20),
        collectionHQ.attempt_year((XPATH('//marc:datafield[@tag="260"][1]/marc:subfield[@code="c"]/text()', marc::XML, ARRAY[ARRAY['marc', 'http://www.loc.gov/MARC21/slim']]))[1]::TEXT),
        SUBSTRING(naco_normalize((XPATH('//marc:datafield[@tag="260"][1]/marc:subfield[@code="b"]/text()', marc::XML, ARRAY[ARRAY['marc', 'http://www.loc.gov/MARC21/slim']]))[1]::TEXT, 'b') FROM 1 FOR 100),
        collectionHQ.attempt_price((XPATH('//marc:datafield[@tag="020"][1]/marc:subfield[@code="c"]/text()', marc::XML, ARRAY[ARRAY['marc', 'http://www.loc.gov/MARC21/slim']]))[1]::TEXT),
        SUBSTRING(naco_normalize((XPATH('//marc:datafield[@tag="082"][1]/marc:subfield[@code="a"][1]/text()', marc::XML, ARRAY[ARRAY['marc', 'http://www.loc.gov/MARC21/slim']]))[1]::TEXT, 'a') FROM 1 FOR 20)
      INTO edition_num, publication_date, publisher, price, class_num
      FROM biblio.record_entry
      WHERE id = lms_bib_id;

      SELECT circ_modifier INTO lms_item_type FROM asset.copy c, asset.call_number cn WHERE cn.record = lms_bib_id AND cn.id = c.call_number AND NOT cn.deleted AND NOT c.deleted LIMIT 1;
  
      output := 
        '##BIB##,'
        || lms_bib_id || ','
        || COALESCE(collectionHQ.quote(library_service_code), '') || ','
        || COALESCE(collectionHQ.quote(isbn), '') || ','
        || COALESCE(collectionHQ.quote(title), '') || ','
        || COALESCE(collectionHQ.quote(author), '') || ','
        || COALESCE(collectionHQ.quote(edition_num), '') || ','
        || COALESCE(collectionHQ.quote(publication_date), '') || ','
        || COALESCE(collectionHQ.quote(publisher), '') || ','
        || COALESCE(price, '') || ','
        || COALESCE(collectionHQ.quote(lms_item_type), '') || ','
        || COALESCE(collectionHQ.quote(class_num), '') || ','
        || COALESCE(collectionHQ.quote(extract_date), '');
  
       RAISE INFO '%', output;

       num_rows := num_rows + 1;
       IF (num_rows::numeric % 1000.0 = 0.0) THEN RAISE INFO '% rows written', num_rows; END IF;

    END LOOP;

    RAISE INFO '% rows written in total.', num_rows;
    RETURN '';

  END;

$_$;


ALTER FUNCTION collectionhq.write_bib_rows_to_stdout(text, integer) OWNER TO evergreen;

--
-- Name: write_item_rows_to_stdout(text, integer); Type: FUNCTION; Schema: collectionhq; Owner: postgres
--

CREATE FUNCTION write_item_rows_to_stdout(text, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
-- Usage: SELECT collectionHQ.write_item_rows_to_stdout ('LIBRARYCODE',org_unit_id);

  DECLARE
    item BIGINT;
    authority_code ALIAS FOR $1;
    org_unit_id ALIAS for $2;
    lms_bib_id BIGINT;
    library_code TEXT;
    bar_code TEXT;
    last_use_date TEXT;
    cumulative_use_total TEXT;
    cumulative_use_current TEXT;
    status TEXT;
    date_added TEXT;
    price TEXT;
    purchase_code TEXT;
    rotating_stock TEXT;
    lib_supsel_tag TEXT;
    gen_supsel_tag TEXT;
    notes TEXT;
    extract_date TEXT;
    collection_code TEXT;
    collection_code_level_2 TEXT;
    filter_level_1 TEXT;
    filter_level_2 TEXT;
    filter_level_3 TEXT;
    filter_level_4 TEXT;
    isbn TEXT := '';
    output TEXT := '';
    arrived TIMESTAMPTZ;
    num_rows INTEGER := 0;

  BEGIN

    SELECT REPLACE(NOW()::DATE::TEXT, '-', '') INTO extract_date;
    FOR item, arrived, cumulative_use_total IN
      SELECT cp.id, dest_recv_time, COALESCE(sum(DISTINCT c.circ_count), 0::bigint) + COALESCE(count(DISTINCT circ.id), 0::bigint) + COALESCE(count(DISTINCT acirc.id), 0::bigint) AS circ_count
      FROM asset.copy cp
      LEFT JOIN extend_reporter.legacy_circ_count c USING (id)
      LEFT JOIN (SELECT max(dest_recv_time) as dest_recv_time, target_copy, dest from action.transit_copy group by target_copy, dest) atc ON (cp.id = atc.target_copy AND cp.circ_lib = atc.dest)
      LEFT JOIN action.circulation circ ON circ.target_copy = cp.id
      LEFT JOIN action.aged_circulation acirc ON acirc.target_copy = cp.id
      WHERE NOT cp.deleted AND cp.circ_lib IN (SELECT id FROM actor.org_unit_descendants(org_unit_id)) GROUP BY cp.id, dest_recv_time ORDER BY cp.id
    LOOP

      SELECT cn.record, cn.label
      INTO lms_bib_id, filter_level_1
      FROM asset.call_number cn, asset.copy c 
      WHERE c.call_number = cn.id AND c.id =  item;
      SELECT r.isbn[1] INTO isbn
      FROM reporter.materialized_simple_record r
      WHERE id = lms_bib_id;
      SELECT collectionHQ.attempt_price(ac.price::TEXT), barcode, ac.status,
             REPLACE(create_date::DATE::TEXT, '-', ''),
             CASE floating WHEN TRUE THEN 'Y' ELSE NULL END
      INTO price, bar_code, status, date_added, rotating_stock
      FROM asset.copy ac 
      WHERE id = item;
      IF price IS NULL OR price = '' THEN
        SELECT collectionHQ.attempt_price((XPATH('//marc:datafield[@tag="020"][1]/marc:subfield[@code="c"]/text()', marc::XML, ARRAY[ARRAY['marc', 'http://www.loc.gov/MARC21/slim']]))[1]::TEXT)
        INTO price
        FROM biblio.record_entry
        WHERE id = lms_bib_id;
      END IF;
      SELECT ou.shortname INTO library_code FROM actor.org_unit ou, asset.copy c WHERE ou.id = c.circ_lib AND c.id = item;
      /* SELECT REPLACE(xact_start::DATE::TEXT, '-', '') INTO last_use_date FROM action.circulation WHERE target_copy = item ORDER BY xact_start DESC LIMIT 1; */
      SELECT REPLACE(xact_start::DATE::TEXT, '-', '') INTO last_use_date FROM ( SELECT action.aged_circulation.xact_start FROM action.aged_circulation where target_copy = item UNION SELECT action.circulation.xact_start FROM action.circulation where target_copy = item) as lu  order by xact_start DESC limit 1;
      
      IF arrived IS NOT NULL THEN
        SELECT COUNT(*) INTO cumulative_use_current FROM action.circulation WHERE target_copy = item AND xact_start > arrived;
      ELSE
      cumulative_use_current := '0'; 
      END IF;
      SELECT SUBSTRING(value FROM 1 FOR 100) INTO notes FROM asset.copy_note WHERE owning_copy = item AND title ILIKE '%collectionHQ%' ORDER BY id LIMIT 1;
      SELECT l.name INTO collection_code FROM asset.copy c, asset.copy_location l WHERE c.location = l.id AND c.id = item;
  
      purchase_code := ''; -- FIXME do we want something else here?
      lib_supsel_tag := ''; -- FIXME do we want something else here?
      gen_supsel_tag := ''; -- FIXME do we want something else here?
      collection_code_level_2 := ''; -- FIXME do we want something else here?
      filter_level_2 := ''; -- FIXME do we want something else here?
      filter_level_3 := ''; -- FIXME do we want something else here?
      filter_level_4 := ''; -- FIXME do we want something else here?
  
      output := '##HOLD##,'
        || lms_bib_id || ','
        || COALESCE(collectionHQ.quote(authority_code), '') || ','
        || COALESCE(collectionHQ.quote(library_code), '') || ','
        || COALESCE(collectionHQ.quote(bar_code), '') || ','
        || COALESCE(collectionHQ.quote(last_use_date), '') || ','
        || COALESCE(cumulative_use_total, '') || ','
        || COALESCE(cumulative_use_current, '') || ','
        || COALESCE(collectionHQ.quote(status), '') || ','
        || COALESCE(collectionHQ.quote(date_added), '') || ','
        || COALESCE(price, '') || ','
        || COALESCE(collectionHQ.quote(purchase_code), '') || ','
        || COALESCE(collectionHQ.quote(rotating_stock), '') || ','
        || COALESCE(collectionHQ.quote(lib_supsel_tag), '') || ','
        || COALESCE(collectionHQ.quote(gen_supsel_tag), '') || ','
        || COALESCE(collectionHQ.quote(notes), '') || ','
        || COALESCE(collectionHQ.quote(extract_date), '') || ','
        || COALESCE(collectionHQ.quote(collection_code), '') || ','
        || COALESCE(collectionHQ.quote(collection_code_level_2), '') || ','
        || COALESCE(collectionHQ.quote(filter_level_1), '') || ','
        || COALESCE(collectionHQ.quote(filter_level_2), '') || ','
        || COALESCE(collectionHQ.quote(filter_level_3), '') || ','
        || COALESCE(collectionHQ.quote(filter_level_4), '') || ','
        || COALESCE(collectionHQ.quote(isbn), '');
  
       RAISE INFO '%', output;

       num_rows := num_rows + 1;
       IF (num_rows::numeric % 1000.0 = 0.0) THEN RAISE INFO '% rows written', num_rows; END IF;

    END LOOP;

    RAISE INFO '% rows written in total.', num_rows;
    RETURN '';
  END;

$_$;


ALTER FUNCTION collectionhq.write_item_rows_to_stdout(text, integer) OWNER TO postgres;

--
-- Name: write_item_rows_to_stdout_new(text, integer); Type: FUNCTION; Schema: collectionhq; Owner: postgres
--

CREATE FUNCTION write_item_rows_to_stdout_new(text, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
-- Usage: SELECT collectionHQ.write_item_rows_to_stdout ('LIBRARYCODE',org_unit_id);

  DECLARE
    item BIGINT;
    authority_code ALIAS FOR $1;
    org_unit_id ALIAS for $2;
    lms_bib_id BIGINT;
    library_code TEXT;
    bar_code TEXT;
    last_use_date TEXT;
    cumulative_use_total TEXT;
    cumulative_use_current TEXT;
    status TEXT;
    date_added TEXT;
    price TEXT;
    purchase_code TEXT;
    rotating_stock TEXT;
    lib_supsel_tag TEXT;
    gen_supsel_tag TEXT;
    notes TEXT;
    extract_date TEXT;
    collection_code TEXT;
    collection_code_level_2 TEXT;
    filter_level_1 TEXT;
    filter_level_2 TEXT;
    filter_level_3 TEXT;
    filter_level_4 TEXT;
    isbn TEXT := '';
    output TEXT := '';
    arrived TIMESTAMPTZ;
    num_rows INTEGER := 0;

  BEGIN

    SELECT REPLACE(NOW()::DATE::TEXT, '-', '') INTO extract_date;
    FOR item, arrived, cumulative_use_total IN
      SELECT cp.id, dest_recv_time, COALESCE(sum(c.circ_count), 0::bigint) + COALESCE(count(circ.id), 0::bigint) + COALESCE(count(acirc.id), 0::bigint) AS circ_count
      FROM asset.copy cp
      LEFT JOIN extend_reporter.legacy_circ_count c USING (id)
      LEFT JOIN (SELECT max(dest_recv_time) as dest_recv_time, target_copy, dest from action.transit_copy group by target_copy, dest) atc ON (cp.id = atc.target_copy AND cp.circ_lib = atc.dest)
      LEFT JOIN action.circulation circ ON circ.target_copy = cp.id
      LEFT JOIN action.aged_circulation acirc ON acirc.target_copy = cp.id
      WHERE NOT cp.deleted AND cp.circ_lib IN (SELECT id FROM actor.org_unit_descendants(org_unit_id)) GROUP BY cp.id, dest_recv_time ORDER BY cp.id
    LOOP

      SELECT cn.record, cn.label
      INTO lms_bib_id, filter_level_1
      FROM asset.call_number cn, asset.copy c 
      WHERE c.call_number = cn.id AND c.id =  item;
      SELECT r.isbn[1] INTO isbn
      FROM reporter.materialized_simple_record r
      WHERE id = lms_bib_id;
      SELECT collectionHQ.attempt_price(ac.price::TEXT), barcode, ac.status,
             REPLACE(create_date::DATE::TEXT, '-', ''),
             CASE floating WHEN TRUE THEN 'Y' ELSE NULL END
      INTO price, bar_code, status, date_added, rotating_stock
      FROM asset.copy ac 
      WHERE id = item;
      IF price IS NULL OR price = '' THEN
        SELECT collectionHQ.attempt_price((XPATH('//marc:datafield[@tag="020"][1]/marc:subfield[@code="c"]/text()', marc::XML, ARRAY[ARRAY['marc', 'http://www.loc.gov/MARC21/slim']]))[1]::TEXT)
        INTO price
        FROM biblio.record_entry
        WHERE id = lms_bib_id;
      END IF;
      SELECT ou.shortname INTO library_code FROM actor.org_unit ou, asset.copy c WHERE ou.id = c.circ_lib AND c.id = item;
      SELECT REPLACE(xact_start::DATE::TEXT, '-', '') INTO last_use_date FROM action.circulation WHERE target_copy = item ORDER BY xact_start DESC LIMIT 1;
      
      IF arrived IS NOT NULL THEN
        SELECT COUNT(*) INTO cumulative_use_current FROM action.circulation WHERE target_copy = item AND xact_start > arrived;
      ELSE
      cumulative_use_current := '0'; 
      END IF;
      SELECT SUBSTRING(value FROM 1 FOR 100) INTO notes FROM asset.copy_note WHERE owning_copy = item AND title ILIKE '%collectionHQ%' ORDER BY id LIMIT 1;
      SELECT l.name INTO collection_code FROM asset.copy c, asset.copy_location l WHERE c.location = l.id AND c.id = item;
  
      purchase_code := ''; -- FIXME do we want something else here?
      lib_supsel_tag := ''; -- FIXME do we want something else here?
      gen_supsel_tag := ''; -- FIXME do we want something else here?
      collection_code_level_2 := ''; -- FIXME do we want something else here?
      filter_level_2 := ''; -- FIXME do we want something else here?
      filter_level_3 := ''; -- FIXME do we want something else here?
      filter_level_4 := ''; -- FIXME do we want something else here?
  
      output := '##HOLD##,'
        || lms_bib_id || ','
        || COALESCE(collectionHQ.quote(authority_code), '') || ','
        || COALESCE(collectionHQ.quote(library_code), '') || ','
        || COALESCE(collectionHQ.quote(bar_code), '') || ','
        || COALESCE(collectionHQ.quote(last_use_date), '') || ','
        || COALESCE(cumulative_use_total, '') || ','
        || COALESCE(cumulative_use_current, '') || ','
        || COALESCE(collectionHQ.quote(status), '') || ','
        || COALESCE(collectionHQ.quote(date_added), '') || ','
        || COALESCE(price, '') || ','
        || COALESCE(collectionHQ.quote(purchase_code), '') || ','
        || COALESCE(collectionHQ.quote(rotating_stock), '') || ','
        || COALESCE(collectionHQ.quote(lib_supsel_tag), '') || ','
        || COALESCE(collectionHQ.quote(gen_supsel_tag), '') || ','
        || COALESCE(collectionHQ.quote(notes), '') || ','
        || COALESCE(collectionHQ.quote(extract_date), '') || ','
        || COALESCE(collectionHQ.quote(collection_code), '') || ','
        || COALESCE(collectionHQ.quote(collection_code_level_2), '') || ','
        || COALESCE(collectionHQ.quote(filter_level_1), '') || ','
        || COALESCE(collectionHQ.quote(filter_level_2), '') || ','
        || COALESCE(collectionHQ.quote(filter_level_3), '') || ','
        || COALESCE(collectionHQ.quote(filter_level_4), '') || ','
        || COALESCE(collectionHQ.quote(isbn), '');
  
       RAISE INFO '%', output;

       num_rows := num_rows + 1;
       IF (num_rows::numeric % 1000.0 = 0.0) THEN RAISE INFO '% rows written', num_rows; END IF;

    END LOOP;

    RAISE INFO '% rows written in total.', num_rows;

  END;

$_$;


ALTER FUNCTION collectionhq.write_item_rows_to_stdout_new(text, integer) OWNER TO postgres;

--
-- Name: write_item_rows_to_stdout_old(text, integer); Type: FUNCTION; Schema: collectionhq; Owner: postgres
--

CREATE FUNCTION write_item_rows_to_stdout_old(text, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
-- Usage: SELECT collectionHQ.write_item_rows_to_stdout ('LIBRARYCODE',org_unit_id);

  DECLARE
    item BIGINT;
    authority_code ALIAS FOR $1;
    org_unit_id ALIAS for $2;
    lms_bib_id BIGINT;
    library_code TEXT;
    bar_code TEXT;
    last_use_date TEXT;
    cumulative_use_total TEXT;
    cumulative_use_current TEXT;
    status TEXT;
    date_added TEXT;
    price TEXT;
    purchase_code TEXT;
    rotating_stock TEXT;
    lib_supsel_tag TEXT;
    gen_supsel_tag TEXT;
    notes TEXT;
    extract_date TEXT;
    collection_code TEXT;
    collection_code_level_2 TEXT;
    filter_level_1 TEXT;
    filter_level_2 TEXT;
    filter_level_3 TEXT;
    filter_level_4 TEXT;
    isbn TEXT := '';
    output TEXT := '';
    arrived TIMESTAMPTZ;
    num_rows INTEGER := 0;

    start1 timestamp;
    start2 timestamp;
    start3 timestamp;
    start4 timestamp;
    start5 timestamp;
    start6 timestamp;
    start7 timestamp;
    start8 timestamp;
    start9 timestamp;
    start10 timestamp;
    start11 timestamp;

    total1 interval := 0;
    total2 interval := 0;
    total3 interval := 0;
    total4 interval := 0;
    total5 interval := 0;
    total6 interval := 0;
    total7 interval := 0;
    total8 interval := 0;
    total9 interval := 0;
    total10 interval := 0;
    total11 interval := 0;

  BEGIN

    SELECT REPLACE(NOW()::DATE::TEXT, '-', '') INTO extract_date;

    FOR item IN
      SELECT id FROM asset.copy WHERE NOT deleted AND circ_lib IN (SELECT id FROM actor.org_unit_descendants(org_unit_id)) ORDER BY id
    LOOP
      
      start1 = clock_timestamp();

      SELECT cn.record, cn.label
      INTO lms_bib_id, filter_level_1
      FROM asset.call_number cn, asset.copy c 
      WHERE c.call_number = cn.id AND c.id =  item;
      SELECT r.isbn[1] INTO isbn
      FROM reporter.materialized_simple_record r
      WHERE id = lms_bib_id;

      start2 = clock_timestamp();

      SELECT collectionHQ.attempt_price(ac.price::TEXT), barcode, ac.status,
             REPLACE(create_date::DATE::TEXT, '-', ''),
             CASE floating WHEN TRUE THEN 'Y' ELSE NULL END
      INTO price, bar_code, status, date_added, rotating_stock
      FROM asset.copy ac 
      WHERE id = item;

      start3 = clock_timestamp();

      IF price IS NULL OR price = '' THEN
        SELECT collectionHQ.attempt_price((XPATH('//marc:datafield[@tag="020"][1]/marc:subfield[@code="c"]/text()', marc::XML, ARRAY[ARRAY['marc', 'http://www.loc.gov/MARC21/slim']]))[1]::TEXT)
        INTO price
        FROM biblio.record_entry
        WHERE id = lms_bib_id;
      END IF;

      start4 = clock_timestamp();

      SELECT ou.shortname INTO library_code FROM actor.org_unit ou, asset.copy c WHERE ou.id = c.circ_lib AND c.id = item;

      start5 = clock_timestamp();
      
      SELECT REPLACE(xact_start::DATE::TEXT, '-', '') INTO last_use_date FROM action.circulation WHERE target_copy = item ORDER BY xact_start DESC LIMIT 1;

      start6 = clock_timestamp();

      SELECT circ_count INTO cumulative_use_total FROM extend_reporter.full_circ_count WHERE id = item;
      IF cumulative_use_total IS NULL THEN
        cumulative_use_total := '0';
      END IF;


      SELECT MAX(dest_recv_time) INTO arrived
      FROM action.transit_copy atc
      JOIN asset.copy ac ON (ac.id = atc.target_copy AND ac.circ_lib = atc.dest)
      WHERE ac.id = item;

      start7 = clock_timestamp();

      IF arrived IS NOT NULL THEN
        SELECT COUNT(*) INTO cumulative_use_current FROM action.circulation WHERE target_copy = item AND xact_start > arrived;
      ELSE
      cumulative_use_current := '0'; 
      END IF;

      start8 = clock_timestamp();

      SELECT SUBSTRING(value FROM 1 FOR 100) INTO notes FROM asset.copy_note WHERE owning_copy = item AND title ILIKE '%collectionHQ%' ORDER BY id LIMIT 1;

      start9 = clock_timestamp();

      SELECT l.name INTO collection_code FROM asset.copy c, asset.copy_location l WHERE c.location = l.id AND c.id = item;

      start10 = clock_timestamp();
  
      purchase_code := ''; -- FIXME do we want something else here?
      lib_supsel_tag := ''; -- FIXME do we want something else here?
      gen_supsel_tag := ''; -- FIXME do we want something else here?
      collection_code_level_2 := ''; -- FIXME do we want something else here?
      filter_level_2 := ''; -- FIXME do we want something else here?
      filter_level_3 := ''; -- FIXME do we want something else here?
      filter_level_4 := ''; -- FIXME do we want something else here?
  
      output := '##HOLD##,'
        || lms_bib_id || ','
        || COALESCE(collectionHQ.quote(authority_code), '') || ','
        || COALESCE(collectionHQ.quote(library_code), '') || ','
        || COALESCE(collectionHQ.quote(bar_code), '') || ','
        || COALESCE(collectionHQ.quote(last_use_date), '') || ','
        || COALESCE(cumulative_use_total, '') || ','
        || COALESCE(cumulative_use_current, '') || ','
        || COALESCE(collectionHQ.quote(status), '') || ','
        || COALESCE(collectionHQ.quote(date_added), '') || ','
        || COALESCE(price, '') || ','
        || COALESCE(collectionHQ.quote(purchase_code), '') || ','
        || COALESCE(collectionHQ.quote(rotating_stock), '') || ','
        || COALESCE(collectionHQ.quote(lib_supsel_tag), '') || ','
        || COALESCE(collectionHQ.quote(gen_supsel_tag), '') || ','
        || COALESCE(collectionHQ.quote(notes), '') || ','
        || COALESCE(collectionHQ.quote(extract_date), '') || ','
        || COALESCE(collectionHQ.quote(collection_code), '') || ','
        || COALESCE(collectionHQ.quote(collection_code_level_2), '') || ','
        || COALESCE(collectionHQ.quote(filter_level_1), '') || ','
        || COALESCE(collectionHQ.quote(filter_level_2), '') || ','
        || COALESCE(collectionHQ.quote(filter_level_3), '') || ','
        || COALESCE(collectionHQ.quote(filter_level_4), '') || ','
        || COALESCE(collectionHQ.quote(isbn), '');

        start11 = clock_timestamp();
  
       RAISE INFO '%', output;

       total1 = total1 + start2 - start1;
       total2 = total2 + start3 - start2;
       total3 = total3 + start4 - start3;
       total4 = total4 + start5 - start4;
       total5 = total5 + start6 - start5;
       total6 = total6 + start7 - start6;
       total7 = total7 + start8 - start7;
       total8 = total8 + start9 - start8;
       total9 = total9 + start10 - start9;
       total10 = total10 + start11 - start10;
       total11 = total11 + start11 - start1;

       num_rows := num_rows + 1;
       IF (num_rows::numeric % 1000.0 = 0.0) THEN 
          RAISE INFO '% rows written', num_rows;
          RAISE INFO 'total time % num rows %', total11, num_rows;
       END IF;
       EXIT WHEN (num_rows = 300000);

    END LOOP;

    RAISE INFO '% rows written in total.', num_rows;

    RAISE INFO 'time: 1: % 2: % 3: % 4: % 5: % 6: % 7: % 8: % 9: % 10: %', total1, total2, total3, total4, total5, total6, total7, total8, total9, total10;
    RAISE INFO 'total time % num rows %', total11, num_rows;
    RETURN 'x';

  END;

$_$;


ALTER FUNCTION collectionhq.write_item_rows_to_stdout_old(text, integer) OWNER TO postgres;

SET search_path = esi, pg_catalog;

--
-- Name: show_encode_version(); Type: FUNCTION; Schema: esi; Owner: evergreen
--

CREATE FUNCTION show_encode_version() RETURNS text
    LANGUAGE plperlu
    AS $_$
  use Encode;
  return $Encode::VERSION;
$_$;


ALTER FUNCTION esi.show_encode_version() OWNER TO evergreen;

--
-- Name: throttle_hold_queue_position_queries(integer, interval); Type: FUNCTION; Schema: esi; Owner: evergreen
--

CREATE FUNCTION throttle_hold_queue_position_queries(max_queries integer DEFAULT 20, max_duration interval DEFAULT '00:00:02'::interval) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
    num_running INTEGER;
BEGIN
    -- terminate any that are running longer than the allowed
    -- duration
    PERFORM pg_cancel_backend(pid)
    FROM pg_stat_activity
    WHERE query ~* $$^SELECT  count\("ahr".id \) AS "count" FROM action.hold_request AS "ahr"  WHERE \( \( \( \( "ahr".target IN \(SELECT  "acp".id AS "id" FROM asset.copy AS "acp"  INNER JOIN asset.call_number AS "acn" ON \( "acn".id = "acp".call_number \)   INNER JOIN biblio.record_entry AS "bre" ON \( "bre".id = "acn".record AND  "bre".id =$$
    AND state <> 'idle'
    AND NOW() - query_start > max_duration;

    -- and terminate them all if there are too many
    SELECT COUNT(*)
    INTO num_running
    FROM pg_stat_activity
    WHERE query ~* $$^SELECT  count\("ahr".id \) AS "count" FROM action.hold_request AS "ahr"  WHERE \( \( \( \( "ahr".target IN \(SELECT  "acp".id AS "id" FROM asset.copy AS "acp"  INNER JOIN asset.call_number AS "acn" ON \( "acn".id = "acp".call_number \)   INNER JOIN biblio.record_entry AS "bre" ON \( "bre".id = "acn".record AND  "bre".id =$$;
    IF num_running > max_queries THEN
        RAISE WARNING 'Terminating hold queue position calculations: % were running',  num_running;
        PERFORM pg_cancel_backend(pid)
        FROM pg_stat_activity
        WHERE query ~* $$^SELECT  count\("ahr".id \) AS "count" FROM action.hold_request AS "ahr"  WHERE \( \( \( \( "ahr".target IN \(SELECT  "acp".id AS "id" FROM asset.copy AS "acp"  INNER JOIN asset.call_number AS "acn" ON \( "acn".id = "acp".call_number \)   INNER JOIN biblio.record_entry AS "bre" ON \( "bre".id = "acn".record AND  "bre".id =$$
    	AND state <> 'idle';
    END IF;   
END;
$_$;


ALTER FUNCTION esi.throttle_hold_queue_position_queries(max_queries integer, max_duration interval) OWNER TO evergreen;

SET search_path = m_kcls, pg_catalog;

--
-- Name: add_default_008(text); Type: FUNCTION; Schema: m_kcls; Owner: evergreen
--

CREATE FUNCTION add_default_008(text) RETURNS text
    LANGUAGE plperlu STABLE
    AS $_$
  my ($marcxml) = @_;

  use MARC::Record;
  use MARC::File::XML;

  my $xml = $marcxml;
  eval { 
    my $marc = MARC::Record->new_from_xml($marcxml, 'UTF-8');
    my $f008 = $marc->field('008');
    if (!defined($f008) or $f008->data =~ /^\s*$/) {
       $marc->delete_field($f008) if defined $f008;
       my $str008 = '101015s20uu    xx |||||||||||||||| eng d';
       my $sf260c = $marc->subfield('260', 'c');
       if (defined $sf260c and $sf260c =~ /(\d{4})/) {
         substr($str008, 7, 4) = $1;
       }
       $marc->insert_fields_ordered(MARC::Field->new('008', $str008));
    }
    $xml = $marc->as_xml_record;
    $xml =~ s/^<\?.+?\?>$//mo;
    $xml =~ s/\n//sgo;
    $xml =~ s/>\s+</></sgo;
  };
  return $xml;
$_$;


ALTER FUNCTION m_kcls.add_default_008(text) OWNER TO evergreen;

--
-- Name: add_default_008_2(text); Type: FUNCTION; Schema: m_kcls; Owner: evergreen
--

CREATE FUNCTION add_default_008_2(text) RETURNS text
    LANGUAGE plperlu STABLE
    AS $_$
  my ($marcxml) = @_;

  use MARC::Record;
  use MARC::File::XML;

  my $xml = $marcxml;
  eval { 
    my $marc = MARC::Record->new_from_xml($marcxml, 'UTF-8');
    my $f008 = $marc->field('008');
    if (defined($f008) and length($f008->data()) > 20) {
       $str008 = $f008->data();
       if (substr($str008, 7, 4) eq '    ') {
       my $sf260c = $marc->subfield('260', 'c');
       if (defined $sf260c and $sf260c =~ /(\d{4})/) {
         substr($str008, 7, 4) = $1;
         substr($str008, 6, 1) = 's' if substr($str008, 6, 1) eq ' ';
         $f008->update($str008);
         $xml = $marc->as_xml_record;
         $xml =~ s/^<\?.+?\?>$//mo;
         $xml =~ s/\n//sgo;
         $xml =~ s/>\s+</></sgo;
       }
      }
    }
  };
  return $xml;
$_$;


ALTER FUNCTION m_kcls.add_default_008_2(text) OWNER TO evergreen;

--
-- Name: name_parse(text); Type: FUNCTION; Schema: m_kcls; Owner: evergreen
--

CREATE FUNCTION name_parse(text) RETURNS text[]
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
    DECLARE
        full_name TEXT := $1;
        temp TEXT;
        family_name TEXT := '';
        first_given_name TEXT := '';
        second_given_name TEXT := '';
        suffix TEXT := '';
        prefix TEXT := '';
    BEGIN
        temp := full_name;
        family_name := BTRIM( REGEXP_REPLACE(temp,E'^([^,]*)\\s*,.*$',E'\\1') );
        first_given_name := BTRIM( CASE WHEN temp ~ ',' THEN REGEXP_REPLACE(temp,E'^[^,]*\\s*,\\s*([^,\\s]*)\\s*.*$',E'\\1') ELSE 'N
/A' END );
        second_given_name := BTRIM( CASE WHEN temp ~ ',' THEN REGEXP_REPLACE(temp,E'^[^,]*\\s*,\\s*[^,\\s]*\\s*(.*)$',E'\\1') ELSE '
'  END );

        RETURN ARRAY[ family_name, first_given_name, second_given_name ];
    END;
$_$;


ALTER FUNCTION m_kcls.name_parse(text) OWNER TO evergreen;

--
-- Name: parse_address(text[]); Type: FUNCTION; Schema: m_kcls; Owner: evergreen
--

CREATE FUNCTION parse_address(lines text[]) RETURNS text[]
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
        line1 TEXT := '';
        line2 TEXT := '';
        city TEXT := '';
        state TEXT := '';
        zip TEXT := '';
        city_state_zip TEXT := '';
        country TEXT := 'USA';
        line_count INTEGER := array_upper(lines, 1);
BEGIN
  IF line_count = 1 THEN
     -- no choice
     line1 := lines[1];
  ELSIF line_count = 2 THEN
     line1 := lines[1];
     city_state_zip := lines[2];
  ELSIF line_count = 3 THEN
     IF UPPER(lines[3]) = 'CANADA' THEN
        line1 := lines[1];
        city_state_zip := lines[2];
        country := 'CANADA';
     ELSE
        line1 := lines[1];
        line2 := lines[2];
        city_state_zip := lines[3];
     END IF;
  ELSIF line_count > 3 THEN
     IF UPPER(lines[4]) = 'CANADA' THEN
        line1 := lines[1];
        line2 := lines[2];
        city_state_zip := lines[3];
        country := 'CANADA';
     ELSE
        line1 := lines[1];
        line2 := lines[2] || ' ' || lines[3];
        city_state_zip := lines[4];
     END IF;
  END IF;
  city_state_zip := REGEXP_REPLACE(city_state_zip, E'\\s+', E' ', 'g');
        zip := CASE WHEN city_state_zip ~ E'\\d\\d\\d\\d\\d' THEN REGEXP_REPLACE( city_state_zip, E'^.*(\\d\\d\\d\\d\\d-?\\d*).*$',
E'\\1' ) ELSE '' END;
        city_state_zip := REGEXP_REPLACE( city_state_zip, E'^(.*)\\d\\d\\d\\d\\d-?\\d*(.*)$', E'\\1\\2');
        city_state_zip := BTRIM(city_state_zip);
        IF city_state_zip ~ ',' THEN
            state := REGEXP_REPLACE( city_state_zip, E'^(.*),(.*)$', E'\\2');
            city := REGEXP_REPLACE( city_state_zip, E'^(.*),(.*)$', E'\\1');
        ELSE
            IF city_state_zip ~ E'\\s+[A-Z][A-Z]$' THEN
                state := REGEXP_REPLACE( city_state_zip, E'^.*,?\\s+([A-Z][A-Z])$', E'\\1' );
                city := REGEXP_REPLACE( city_state_zip, E'^(.*?),?\\s+[A-Z][A-Z]$', E'\\1\\2' );
            ELSE
                IF city_state_zip ~ E'^\\S+$'  THEN
                    city := city_state_zip;
                    state := 'N/A';
                ELSE
                    state := REGEXP_REPLACE( city_state_zip, E'^(.*?),?\\s*(\\S+)\\s*$', E'\\2');
                    city := REGEXP_REPLACE( city_state_zip, E'^(.*?),?\\s*(\\S+)\\s*$', E'\\1');
                END IF;
            END IF;
        END IF;
  line1 := BTRIM(line1);
  line2 := BTRIM(line2);
  city := BTRIM(city);
  state := BTRIM(state);
  zip := BTRIM(zip);
  COUNTRY := BTRIM(country);
  RETURN ARRAY[line1, line2, city, state, zip, country];
END;
$_$;


ALTER FUNCTION m_kcls.parse_address(lines text[]) OWNER TO evergreen;

--
-- Name: quick_hold_target(); Type: FUNCTION; Schema: m_kcls; Owner: evergreen
--

CREATE FUNCTION quick_hold_target() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    x_hold_id INTEGER;


    x_copy_id INTEGER;
BEGIN
    FOR x_hold_id IN SELECT hold_id FROM m_kcls.best_avail_copies ORDER BY bib_id, request_time  LOOP
      DELETE FROM action.hold_copy_map WHERE hold = x_hold_id;
      INSERT INTO action.hold_copy_map (hold, target_copy)


        SELECT hold_id, copy_id FROM m_kcls.best_avail_copies
        WHERE hold_id = x_hold_id;
      SELECT min(copy_id) INTO x_copy_id FROM m_kcls.best_avail_copies
                            WHERE hold_id = x_hold_id;
      UPDATE action.hold_request
        SET prev_check_time = now(),
            current_copy = x_copy_id
        WHERE id = x_hold_id;
      DELETE FROM m_kcls.best_avail_copies WHERE copy_id = x_copy_id;
      DELETE FROM m_kcls.best_avail_copies WHERE hold_id = x_hold_id;
      
    END LOOP;
END;
$$;


ALTER FUNCTION m_kcls.quick_hold_target() OWNER TO evergreen;

--
-- Name: reingest_specific_metabib_field_entries(bigint, integer[]); Type: FUNCTION; Schema: m_kcls; Owner: evergreen
--

CREATE FUNCTION reingest_specific_metabib_field_entries(bib_id bigint, fields integer[]) RETURNS void
    LANGUAGE plpgsql
    AS $_X$
DECLARE
    fclass          RECORD;
    ind_data        metabib.field_entry_template%ROWTYPE;
    field_clause    TEXT := '';
    i               INT;
BEGIN
    FOR i IN 1 .. array_upper(fields, 1) LOOP
        field_clause := field_clause || fields[i] || ',';
    END LOOP;
    field_clause := substring(field_clause from 1 for character_length(field_clause) - 1);
    PERFORM * FROM config.internal_flag WHERE name = 'ingest.assume_inserts_only' AND enabled;
    IF NOT FOUND THEN
        FOR fclass IN SELECT * FROM config.metabib_field WHERE id = ANY(fields) LOOP
            -- RAISE NOTICE 'Emptying out %', fclass.name;
            EXECUTE $$DELETE FROM metabib.$$ || fclass.field_class || $$_field_entry WHERE source = $$ || bib_id ||
            $$ AND field IN ($$ || field_clause || ')';
        END LOOP;
        DELETE FROM metabib.facet_entry WHERE source = bib_id AND field = ANY(fields);
    END IF;

    FOR ind_data IN SELECT * FROM m_kcls.extract_specific_metabib_field_entries( bib_id, fields, ' ' ) LOOP
        IF NOT(abs(ind_data.field) = ANY(fields)) THEN
            CONTINUE;
        END IF;
        IF  ind_data.field < 0 THEN
            ind_data.field = -1 * ind_data.field;
            INSERT INTO metabib.facet_entry (field, source, value)
                VALUES (ind_data.field, ind_data.source, ind_data.value);
        ELSE
            EXECUTE $$
                INSERT INTO metabib.$$ || ind_data.field_class || $$_field_entry (field, source, value)
                    VALUES ($$ ||
                        quote_literal(ind_data.field) || $$, $$ ||
                        quote_literal(ind_data.source) || $$, $$ ||
                        quote_literal(ind_data.value) ||
                    $$);$$;
        END IF;

    END LOOP;

    RETURN;
END;
$_X$;


ALTER FUNCTION m_kcls.reingest_specific_metabib_field_entries(bib_id bigint, fields integer[]) OWNER TO evergreen;

--
-- Name: renorm_field_entry(text, integer, bigint, bigint); Type: FUNCTION; Schema: m_kcls; Owner: evergreen
--

CREATE FUNCTION renorm_field_entry(field_class text, fld integer, offst bigint, lim bigint) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
  upd TEXT;
BEGIN
  upd := 'UPDATE metabib.' || field_class || '_field_entry ';
  upd := upd || $$
    SET id = id
    WHERE id IN (
    SELECT id$$;
  upd := upd || ' FROM metabib.' || field_class || '_field_entry' ||
  ' WHERE field = ' || fld ||
  ' ORDER BY id' ||
  ' OFFSET ' || offst || ' LIMIT ' || lim || ')';
  EXECUTE upd;

END;
$_$;


ALTER FUNCTION m_kcls.renorm_field_entry(field_class text, fld integer, offst bigint, lim bigint) OWNER TO evergreen;

SET search_path = m_kcls2, pg_catalog;

--
-- Name: parse_address(text[]); Type: FUNCTION; Schema: m_kcls2; Owner: evergreen
--

CREATE FUNCTION parse_address(lines text[]) RETURNS text[]
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
        line1 TEXT := '';
        line2 TEXT := '';
        city TEXT := '';
        state TEXT := '';
        zip TEXT := '';
        city_state_zip TEXT := '';
        country TEXT := 'USA';
        line_count INTEGER := array_upper(lines, 1);
BEGIN
  IF line_count = 1 THEN
     -- no choice
     line1 := lines[1];
  ELSIF line_count = 2 THEN
     line1 := lines[1];
     city_state_zip := lines[2];
  ELSIF line_count = 3 THEN
     IF UPPER(lines[3]) = 'CANADA' THEN
        line1 := lines[1];
        city_state_zip := lines[2];
        country := 'CANADA';
     ELSE
        line1 := lines[1];
        line2 := lines[2];
        city_state_zip := lines[3];
     END IF;
  ELSIF line_count > 3 THEN
     IF UPPER(lines[4]) = 'CANADA' THEN
        line1 := lines[1];
        line2 := lines[2];
        city_state_zip := lines[3];
        country := 'CANADA';
     ELSE
        line1 := lines[1];
        line2 := lines[2] || ' ' || lines[3];
        city_state_zip := lines[4];
     END IF;
  END IF;
  city_state_zip := REGEXP_REPLACE(city_state_zip, E'\\s+', E' ', 'g');
        zip := CASE WHEN city_state_zip ~ E'\\d\\d\\d\\d\\d' THEN REGEXP_REPLACE( city_state_zip, E'^.*(\\d\\d\\d\\d\\d-?\\d*).*$',
E'\\1' ) ELSE '' END;
        city_state_zip := REGEXP_REPLACE( city_state_zip, E'^(.*)\\d\\d\\d\\d\\d-?\\d*(.*)$', E'\\1\\2');
        city_state_zip := BTRIM(city_state_zip);
        IF city_state_zip ~ ',' THEN
            state := REGEXP_REPLACE( city_state_zip, E'^(.*),(.*)$', E'\\2');
            city := REGEXP_REPLACE( city_state_zip, E'^(.*),(.*)$', E'\\1');
        ELSE
            IF city_state_zip ~ E'\\s+[A-Z][A-Z]$' THEN
                state := REGEXP_REPLACE( city_state_zip, E'^.*,?\\s+([A-Z][A-Z])$', E'\\1' );
                city := REGEXP_REPLACE( city_state_zip, E'^(.*?),?\\s+[A-Z][A-Z]$', E'\\1\\2' );
            ELSE
                IF city_state_zip ~ E'^\\S+$'  THEN
                    city := city_state_zip;
                    state := 'N/A';
                ELSE
                    state := REGEXP_REPLACE( city_state_zip, E'^(.*?),?\\s*(\\S+)\\s*$', E'\\2');
                    city := REGEXP_REPLACE( city_state_zip, E'^(.*?),?\\s*(\\S+)\\s*$', E'\\1');
                END IF;
            END IF;
        END IF;
  line1 := BTRIM(line1);
  line2 := BTRIM(line2);
  city := BTRIM(city);
  state := BTRIM(state);
  zip := BTRIM(zip);
  COUNTRY := BTRIM(country);
  RETURN ARRAY[line1, line2, city, state, zip, country];
END;
$_$;


ALTER FUNCTION m_kcls2.parse_address(lines text[]) OWNER TO evergreen;

--
-- Name: parse_contact(text[]); Type: FUNCTION; Schema: m_kcls2; Owner: evergreen
--

CREATE FUNCTION parse_contact(lines text[]) RETURNS text[]
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
        role TEXT := '';
        email TEXT := '';
        phone TEXT := '';
        line_count INTEGER := array_upper(lines, 1);
        i INTEGER;
BEGIN
   IF line_count > 1 THEN
      FOR i IN 2 .. line_count LOOP
        IF lines[i] ~ E'[0-9]{3}.[0-9]{4}' THEN
           phone := lines[i];
        ELSIF lines[i] ~ E'@' THEN
           email := lines[i];
        ELSE 
           role := lines[i];
         END IF;
      END LOOP;
   END IF;
   role = NULLIF(BTRIM(role), '');
   email = NULLIF(BTRIM(email), '');
   phone = NULLIF(BTRIM(phone), '');
   RETURN ARRAY[role, email, phone];
END;
$$;


ALTER FUNCTION m_kcls2.parse_contact(lines text[]) OWNER TO evergreen;

SET search_path = migration_tools, pg_catalog;

--
-- Name: add_codabar_checkdigit(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION add_codabar_checkdigit(text) RETURNS text
    LANGUAGE plperl STABLE STRICT
    AS $_X$
    my $barcode = shift;

    return $barcode if $barcode !~ /^\d{13,14}$/;
    $barcode = substr($barcode, 0, 13); # ignore 14th digit
    my @digits = split //, $barcode;
    my $total = 0;
    $total += $digits[$_] foreach (1, 3, 5, 7, 9, 11);
    $total += (2 * $digits[$_] >= 10) ? (2 * $digits[$_] - 9) : (2 * $digits[$_]) foreach (0, 2, 4, 6, 8, 10, 12);
    my $remainder = $total % 10;
    my $checkdigit = ($remainder == 0) ? $remainder : 10 - $remainder;
    return $barcode . $checkdigit; 
$_X$;


ALTER FUNCTION migration_tools.add_codabar_checkdigit(text) OWNER TO evergreen;

--
-- Name: address_parse_out_citystatezip(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION address_parse_out_citystatezip(text) RETURNS text[]
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        city_state_zip TEXT := $1;
        city TEXT := '';
        state TEXT := '';
        zip TEXT := '';
    BEGIN
        zip := CASE WHEN city_state_zip ~ E'\\d\\d\\d\\d\\d' THEN REGEXP_REPLACE( city_state_zip, E'^.*(\\d\\d\\d\\d\\d-?\\d*).*$', E'\\1' ) ELSE '' END;
        city_state_zip := REGEXP_REPLACE( city_state_zip, E'^(.*)\\d\\d\\d\\d\\d-?\\d*(.*)$', E'\\1\\2');
        IF city_state_zip ~ ',' THEN
            state := REGEXP_REPLACE( city_state_zip, E'^(.*),(.*)$', E'\\2');
            city := REGEXP_REPLACE( city_state_zip, E'^(.*),(.*)$', E'\\1');
        ELSE
            IF city_state_zip ~ E'\\s+[A-Z][A-Z]\\s*' THEN
                state := REGEXP_REPLACE( city_state_zip, E'^.*,?\\s+([A-Z][A-Z])\\s*.*$', E'\\1' );
                city := REGEXP_REPLACE( city_state_zip, E'^(.*?),?\\s+[A-Z][A-Z](\\s*.*)$', E'\\1\\2' );
            ELSE
                IF city_state_zip ~ E'^\\S+$'  THEN
                    city := city_state_zip;
                    state := 'N/A';
                ELSE
                    state := REGEXP_REPLACE( city_state_zip, E'^(.*?),?\\s*(\\S+)\\s*$', E'\\2');
                    city := REGEXP_REPLACE( city_state_zip, E'^(.*?),?\\s*(\\S+)\\s*$', E'\\1');
                END IF;
            END IF;
        END IF;
        RETURN ARRAY[ TRIM(BOTH ' ' FROM city), TRIM(BOTH ' ' FROM state), TRIM(BOTH ' ' FROM zip) ];
    END;
$_$;


ALTER FUNCTION migration_tools.address_parse_out_citystatezip(text) OWNER TO evergreen;

--
-- Name: apply_circ_matrix(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION apply_circ_matrix(tablename text) RETURNS void
    LANGUAGE plpgsql
    AS $$

-- Usage:
--
--   First make sure the circ matrix is loaded and the circulations
--   have been staged to the extent possible (but at the very least
--   circ_lib, target_copy, usr, and *_renewal).  User profiles and
--   circ modifiers must also be in place.
--
--   SELECT migration_tools.apply_circ_matrix('m_pioneer.action_circulation');
--

DECLARE
  circ_lib             INT;
  target_copy          INT;
  usr                  INT;
  is_renewal           BOOLEAN;
  this_duration_rule   INT;
  this_fine_rule       INT;
  this_max_fine_rule   INT;
  rcd                  config.rule_circ_duration%ROWTYPE;
  rrf                  config.rule_recurring_fine%ROWTYPE;
  rmf                  config.rule_max_fine%ROWTYPE;
  circ                 INT;
  n                    INT := 0;
  n_circs              INT;
  
BEGIN

  EXECUTE 'SELECT COUNT(*) FROM ' || tablename || ';' INTO n_circs;

  FOR circ IN EXECUTE ('SELECT id FROM ' || tablename) LOOP

    -- Fetch the correct rules for this circulation
    EXECUTE ('
      SELECT
        circ_lib,
        target_copy,
        usr,
        CASE
          WHEN phone_renewal OR desk_renewal OR opac_renewal THEN TRUE
          ELSE FALSE
        END
      FROM ' || tablename || ' WHERE id = ' || circ || ';')
      INTO circ_lib, target_copy, usr, is_renewal ;
    SELECT
      INTO this_duration_rule,
           this_fine_rule,
           this_max_fine_rule
      duration_rule,
      recurring_fine_rule,
      max_fine_rule
      FROM action.find_circ_matrix_matchpoint(
        circ_lib,
        target_copy,
        usr,
        is_renewal
        );
    SELECT INTO rcd * FROM config.rule_circ_duration
      WHERE id = this_duration_rule;
    SELECT INTO rrf * FROM config.rule_recurring_fine
      WHERE id = this_fine_rule;
    SELECT INTO rmf * FROM config.rule_max_fine
      WHERE id = this_max_fine_rule;

    -- Apply the rules to this circulation
    EXECUTE ('UPDATE ' || tablename || ' c
    SET
      duration_rule = rcd.name,
      recurring_fine_rule = rrf.name,
      max_fine_rule = rmf.name,
      duration = rcd.normal,
      recurring_fine = rrf.normal,
      max_fine =
        CASE rmf.is_percent
          WHEN TRUE THEN (rmf.amount / 100.0) * ac.price
          ELSE rmf.amount
        END,
      renewal_remaining = rcd.max_renewals
    FROM
      config.rule_circ_duration rcd,
      config.rule_recurring_fine rrf,
      config.rule_max_fine rmf,
                        asset.copy ac
    WHERE
      rcd.id = ' || this_duration_rule || ' AND
      rrf.id = ' || this_fine_rule || ' AND
      rmf.id = ' || this_max_fine_rule || ' AND
                        ac.id = c.target_copy AND
      c.id = ' || circ || ';');

    -- Keep track of where we are in the process
    n := n + 1;
    IF (n % 100 = 0) THEN
      RAISE INFO '%', n || ' of ' || n_circs
        || ' (' || (100*n/n_circs) || '%) circs updated.';
    END IF;

  END LOOP;

  RETURN;
END;

$$;


ALTER FUNCTION migration_tools.apply_circ_matrix(tablename text) OWNER TO evergreen;

--
-- Name: apply_circ_matrix_after_20(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION apply_circ_matrix_after_20(tablename text) RETURNS void
    LANGUAGE plpgsql
    AS $$

-- Usage:
--
--   First make sure the circ matrix is loaded and the circulations
--   have been staged to the extent possible (but at the very least
--   circ_lib, target_copy, usr, and *_renewal).  User profiles and
--   circ modifiers must also be in place.
--
--   SELECT migration_tools.apply_circ_matrix('m_pioneer.action_circulation');
--

DECLARE
  circ_lib             INT;
  target_copy          INT;
  usr                  INT;
  is_renewal           BOOLEAN;
  this_duration_rule   INT;
  this_fine_rule       INT;
  this_max_fine_rule   INT;
  rcd                  config.rule_circ_duration%ROWTYPE;
  rrf                  config.rule_recurring_fine%ROWTYPE;
  rmf                  config.rule_max_fine%ROWTYPE;
  circ                 INT;
  n                    INT := 0;
  n_circs              INT;
  
BEGIN

  EXECUTE 'SELECT COUNT(*) FROM ' || tablename || ';' INTO n_circs;

  FOR circ IN EXECUTE ('SELECT id FROM ' || tablename) LOOP

    -- Fetch the correct rules for this circulation
    EXECUTE ('
      SELECT
        circ_lib,
        target_copy,
        usr,
        CASE
          WHEN phone_renewal OR desk_renewal OR opac_renewal THEN TRUE
          ELSE FALSE
        END
      FROM ' || tablename || ' WHERE id = ' || circ || ';')
      INTO circ_lib, target_copy, usr, is_renewal ;
    SELECT
      INTO this_duration_rule,
           this_fine_rule,
           this_max_fine_rule
      (matchpoint).duration_rule,
      (matchpoint).recurring_fine_rule,
      (matchpoint).max_fine_rule
      FROM action.find_circ_matrix_matchpoint(
        circ_lib,
        target_copy,
        usr,
        is_renewal
        );
    SELECT INTO rcd * FROM config.rule_circ_duration
      WHERE id = this_duration_rule;
    SELECT INTO rrf * FROM config.rule_recurring_fine
      WHERE id = this_fine_rule;
    SELECT INTO rmf * FROM config.rule_max_fine
      WHERE id = this_max_fine_rule;

    -- Apply the rules to this circulation
    EXECUTE ('UPDATE ' || tablename || ' c
    SET
      duration_rule = rcd.name,
      recurring_fine_rule = rrf.name,
      max_fine_rule = rmf.name,
      duration = rcd.normal,
      recurring_fine = rrf.normal,
      max_fine =
        CASE rmf.is_percent
          WHEN TRUE THEN (rmf.amount / 100.0) * ac.price
          ELSE rmf.amount
        END,
      renewal_remaining = rcd.max_renewals
    FROM
      config.rule_circ_duration rcd,
      config.rule_recurring_fine rrf,
      config.rule_max_fine rmf,
                        asset.copy ac
    WHERE
      rcd.id = ' || this_duration_rule || ' AND
      rrf.id = ' || this_fine_rule || ' AND
      rmf.id = ' || this_max_fine_rule || ' AND
                        ac.id = c.target_copy AND
      c.id = ' || circ || ';');

    -- Keep track of where we are in the process
    n := n + 1;
    IF (n % 100 = 0) THEN
      RAISE INFO '%', n || ' of ' || n_circs
        || ' (' || (100*n/n_circs) || '%) circs updated.';
    END IF;

  END LOOP;

  RETURN;
END;

$$;


ALTER FUNCTION migration_tools.apply_circ_matrix_after_20(tablename text) OWNER TO evergreen;

--
-- Name: apply_circ_matrix_before_20(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION apply_circ_matrix_before_20(tablename text) RETURNS void
    LANGUAGE plpgsql
    AS $$

-- Usage:
--
--   First make sure the circ matrix is loaded and the circulations
--   have been staged to the extent possible (but at the very least
--   circ_lib, target_copy, usr, and *_renewal).  User profiles and
--   circ modifiers must also be in place.
--
--   SELECT migration_tools.apply_circ_matrix('m_pioneer.action_circulation');
--

DECLARE
  circ_lib             INT;
  target_copy          INT;
  usr                  INT;
  is_renewal           BOOLEAN;
  this_duration_rule   INT;
  this_fine_rule       INT;
  this_max_fine_rule   INT;
  rcd                  config.rule_circ_duration%ROWTYPE;
  rrf                  config.rule_recurring_fine%ROWTYPE;
  rmf                  config.rule_max_fine%ROWTYPE;
  circ                 INT;
  n                    INT := 0;
  n_circs              INT;
  
BEGIN

  EXECUTE 'SELECT COUNT(*) FROM ' || tablename || ';' INTO n_circs;

  FOR circ IN EXECUTE ('SELECT id FROM ' || tablename) LOOP

    -- Fetch the correct rules for this circulation
    EXECUTE ('
      SELECT
        circ_lib,
        target_copy,
        usr,
        CASE
          WHEN phone_renewal OR desk_renewal OR opac_renewal THEN TRUE
          ELSE FALSE
        END
      FROM ' || tablename || ' WHERE id = ' || circ || ';')
      INTO circ_lib, target_copy, usr, is_renewal ;
    SELECT
      INTO this_duration_rule,
           this_fine_rule,
           this_max_fine_rule
      duration_rule,
      recuring_fine_rule,
      max_fine_rule
      FROM action.find_circ_matrix_matchpoint(
        circ_lib,
        target_copy,
        usr,
        is_renewal
        );
    SELECT INTO rcd * FROM config.rule_circ_duration
      WHERE id = this_duration_rule;
    SELECT INTO rrf * FROM config.rule_recurring_fine
      WHERE id = this_fine_rule;
    SELECT INTO rmf * FROM config.rule_max_fine
      WHERE id = this_max_fine_rule;

    -- Apply the rules to this circulation
    EXECUTE ('UPDATE ' || tablename || ' c
    SET
      duration_rule = rcd.name,
      recuring_fine_rule = rrf.name,
      max_fine_rule = rmf.name,
      duration = rcd.normal,
      recuring_fine = rrf.normal,
      max_fine =
        CASE rmf.is_percent
          WHEN TRUE THEN (rmf.amount / 100.0) * ac.price
          ELSE rmf.amount
        END,
      renewal_remaining = rcd.max_renewals
    FROM
      config.rule_circ_duration rcd,
      config.rule_recuring_fine rrf,
      config.rule_max_fine rmf,
                        asset.copy ac
    WHERE
      rcd.id = ' || this_duration_rule || ' AND
      rrf.id = ' || this_fine_rule || ' AND
      rmf.id = ' || this_max_fine_rule || ' AND
                        ac.id = c.target_copy AND
      c.id = ' || circ || ';');

    -- Keep track of where we are in the process
    n := n + 1;
    IF (n % 100 = 0) THEN
      RAISE INFO '%', n || ' of ' || n_circs
        || ' (' || (100*n/n_circs) || '%) circs updated.';
    END IF;

  END LOOP;

  RETURN;
END;

$$;


ALTER FUNCTION migration_tools.apply_circ_matrix_before_20(tablename text) OWNER TO evergreen;

--
-- Name: assign_standing_penalties(); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION assign_standing_penalties() RETURNS void
    LANGUAGE plpgsql
    AS $$

-- USAGE: Once circulation data has been loaded, and group penalty thresholds have been set up, run this.
--        This will assign standing penalties as needed.

DECLARE
  org_unit  INT;
  usr       INT;

BEGIN

  FOR org_unit IN EXECUTE ('SELECT DISTINCT org_unit FROM permission.grp_penalty_threshold;') LOOP

    FOR usr IN EXECUTE ('SELECT id FROM actor.usr WHERE NOT deleted;') LOOP
  
      EXECUTE('SELECT actor.calculate_system_penalties(' || usr || ', ' || org_unit || ');');

    END LOOP;

  END LOOP;

  RETURN;

END;

$$;


ALTER FUNCTION migration_tools.assign_standing_penalties() OWNER TO evergreen;

--
-- Name: attempt_cast(text, text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION attempt_cast(text, text, text) RETURNS record
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        attempt_value ALIAS FOR $1;
        datatype ALIAS FOR $2;
        fail_value ALIAS FOR $3;
        output RECORD;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ' || quote_literal(attempt_value) || '::' || datatype || ' AS a;'
        LOOP
            RETURN output;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            FOR output IN
                EXECUTE 'SELECT ' || quote_literal(fail_value) || '::' || datatype || ' AS a;'
            LOOP
                RETURN output;
            END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.attempt_cast(text, text, text) OWNER TO evergreen;

--
-- Name: attempt_date(text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION attempt_date(text, text) RETURNS date
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        attempt_value ALIAS FOR $1;
        fail_value ALIAS FOR $2;
        output DATE;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ' || quote_literal(attempt_value) || '::date AS a;'
        LOOP
            RETURN output;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            FOR output IN
                EXECUTE 'SELECT ' || quote_literal(fail_value) || '::date AS a;'
            LOOP
                RETURN output;
            END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.attempt_date(text, text) OWNER TO evergreen;

--
-- Name: attempt_money(text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION attempt_money(text, text) RETURNS numeric
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        attempt_value ALIAS FOR $1;
        fail_value ALIAS FOR $2;
        output NUMERIC(8,2);
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ' || quote_literal(attempt_value) || '::NUMERIC(8,2) AS a;'
        LOOP
            RETURN output;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            FOR output IN
                EXECUTE 'SELECT ' || quote_literal(fail_value) || '::NUMERIC(8,2) AS a;'
            LOOP
                RETURN output;
            END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.attempt_money(text, text) OWNER TO evergreen;

--
-- Name: attempt_phone(text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION attempt_phone(text, text) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
  DECLARE
    phone TEXT := $1;
    areacode TEXT := $2;
    temp TEXT := '';
    output TEXT := '';
    n_digits INTEGER := 0;
  BEGIN
    temp := phone;
    temp := REGEXP_REPLACE(temp, '^1*[^0-9]*(?=[0-9])', '');
    temp := REGEXP_REPLACE(temp, '[^0-9]*([0-9]{3})[^0-9]*([0-9]{3})[^0-9]*([0-9]{4})', E'\\1-\\2-\\3');
    n_digits := LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(temp, '(.*)?[a-zA-Z].*', E'\\1') , '[^0-9]', '', 'g'));
    IF n_digits = 7 AND areacode <> '' THEN
      temp := REGEXP_REPLACE(temp, '[^0-9]*([0-9]{3})[^0-9]*([0-9]{4})', E'\\1-\\2');
      output := (areacode || '-' || temp);
    ELSE
      output := temp;
    END IF;
    RETURN output;
  END;

$_$;


ALTER FUNCTION migration_tools.attempt_phone(text, text) OWNER TO evergreen;

--
-- Name: attempt_timestamptz(text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION attempt_timestamptz(text, text) RETURNS timestamp with time zone
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        attempt_value ALIAS FOR $1;
        fail_value ALIAS FOR $2;
        output TIMESTAMPTZ;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ' || quote_literal(attempt_value) || '::TIMESTAMPTZ AS a;'
        LOOP
            RETURN output;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            FOR output IN
                EXECUTE 'SELECT ' || quote_literal(fail_value) || '::TIMESTAMPTZ AS a;'
            LOOP
                RETURN output;
            END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.attempt_timestamptz(text, text) OWNER TO evergreen;

--
-- Name: base_circ_field_map(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION base_circ_field_map(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''base_circ_field_map'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.base_circ_field_map(text) OWNER TO evergreen;

--
-- Name: base_copy_location_map(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION base_copy_location_map(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''base_copy_location_map'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.base_copy_location_map(text) OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION base_item_dynamic_field_map(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''base_item_dynamic_field_map'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.base_item_dynamic_field_map(text) OWNER TO evergreen;

--
-- Name: base_profile_map(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION base_profile_map(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''base_profile_map'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.base_profile_map(text) OWNER TO evergreen;

--
-- Name: build(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION build(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        production_tables TEXT[];
    BEGIN
        --RAISE INFO 'In migration_tools.build(%)', migration_schema;
        SELECT migration_tools.production_tables(migration_schema) INTO STRICT production_tables;
        PERFORM migration_tools.build_base_staging_tables(migration_schema,production_tables);
        PERFORM migration_tools.exec( $1, 'CREATE UNIQUE INDEX ' || migration_schema || '_patron_barcode_key ON ' || migration_schema || '.actor_card ( barcode );' );
        PERFORM migration_tools.exec( $1, 'CREATE UNIQUE INDEX ' || migration_schema || '_patron_usrname_key ON ' || migration_schema || '.actor_usr ( usrname );' );
        PERFORM migration_tools.exec( $1, 'CREATE UNIQUE INDEX ' || migration_schema || '_copy_barcode_key ON ' || migration_schema || '.asset_copy ( barcode );' );
        PERFORM migration_tools.exec( $1, 'CREATE UNIQUE INDEX ' || migration_schema || '_copy_id_key ON ' || migration_schema || '.asset_copy ( id );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_callnum_record_idx ON ' || migration_schema || '.asset_call_number ( record );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_callnum_upper_label_id_lib_idx ON ' || migration_schema || '.asset_call_number ( UPPER(label),id,owning_lib );' );
        PERFORM migration_tools.exec( $1, 'CREATE UNIQUE INDEX ' || migration_schema || '_callnum_label_once_per_lib ON ' || migration_schema || '.asset_call_number ( record,owning_lib,label );' );
    END;
$_$;


ALTER FUNCTION migration_tools.build(text) OWNER TO evergreen;

--
-- Name: build_base_staging_tables(text, text[]); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION build_base_staging_tables(text, text[]) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        production_tables ALIAS FOR $2;
    BEGIN
        --RAISE INFO 'In migration_tools.build_base_staging_tables(%,%)', migration_schema, production_tables;
        FOR i IN array_lower(production_tables,1) .. array_upper(production_tables,1) LOOP
            PERFORM migration_tools.build_specific_base_staging_table(migration_schema,production_tables[i]);
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.build_base_staging_tables(text, text[]) OWNER TO evergreen;

--
-- Name: build_specific_base_staging_table(text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION build_specific_base_staging_table(text, text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        production_table ALIAS FOR $2;
        base_staging_table TEXT;
        columns RECORD;
    BEGIN
        base_staging_table = REPLACE( production_table, '.', '_' );
        --RAISE INFO 'In migration_tools.build_specific_base_staging_table(%,%) -> %', migration_schema, production_table, base_staging_table;
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.' || base_staging_table || ' ( LIKE ' || production_table || ' INCLUDING DEFAULTS EXCLUDING CONSTRAINTS );' );
        PERFORM migration_tools.exec( $1, '
            INSERT INTO ' || migration_schema || '.fields_requiring_mapping
                SELECT table_schema, table_name, column_name, data_type
                FROM information_schema.columns 
                WHERE table_schema = ''' || migration_schema || ''' AND table_name = ''' || base_staging_table || ''' AND is_nullable = ''NO'' AND column_default IS NULL;
        ' );
        FOR columns IN 
            SELECT table_schema, table_name, column_name, data_type
            FROM information_schema.columns 
            WHERE table_schema = migration_schema AND table_name = base_staging_table AND is_nullable = 'NO' AND column_default IS NULL
        LOOP
            PERFORM migration_tools.exec( $1, 'ALTER TABLE ' || columns.table_schema || '.' || columns.table_name || ' ALTER COLUMN ' || columns.column_name || ' DROP NOT NULL;' );
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.build_specific_base_staging_table(text, text) OWNER TO evergreen;

--
-- Name: change_call_number(bigint, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION change_call_number(copy_id bigint, new_label text) RETURNS void
    LANGUAGE plpgsql
    AS $$

DECLARE
  old_volume   BIGINT;
  new_volume   BIGINT;
  bib          BIGINT;
  owner        INTEGER;
  old_label    TEXT;
  remainder    BIGINT;

BEGIN

  -- Bail out if asked to change the label to ##URI##
  IF new_label = '##URI##' THEN
    RETURN;
  END IF;

  -- Gather information
  SELECT call_number INTO old_volume FROM asset.copy WHERE id = copy_id;
  SELECT record INTO bib FROM asset.call_number WHERE id = old_volume;
  SELECT owning_lib, label INTO owner, old_label FROM asset.call_number WHERE id = old_volume;

  -- Bail out if the label already is ##URI##
  IF old_label = '##URI##' THEN
    RETURN;
  END IF;

  -- Bail out if the call number label is already correct
  IF new_volume = old_volume THEN
    RETURN;
  END IF;

  -- Check whether we already have a destination volume available
  SELECT id INTO new_volume FROM asset.call_number 
    WHERE 
      record = bib AND
      owning_lib = owner AND
      label = new_label AND
      NOT deleted;

  -- Create destination volume if needed
  IF NOT FOUND THEN
    INSERT INTO asset.call_number (creator, editor, record, owning_lib, label) 
      VALUES (1, 1, bib, owner, new_label);
    SELECT id INTO new_volume FROM asset.call_number
      WHERE 
        record = bib AND
        owning_lib = owner AND
        label = new_label AND
        NOT deleted;
  END IF;

  -- Move copy to destination
  UPDATE asset.copy SET call_number = new_volume WHERE id = copy_id;

  -- Delete source volume if it is now empty
  SELECT id INTO remainder FROM asset.copy WHERE call_number = old_volume AND NOT deleted;
  IF NOT FOUND THEN
    DELETE FROM asset.call_number WHERE id = old_volume;
  END IF;

END;

$$;


ALTER FUNCTION migration_tools.change_call_number(copy_id bigint, new_label text) OWNER TO evergreen;

--
-- Name: change_owning_lib(bigint, integer); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION change_owning_lib(copy_id bigint, new_owning_lib integer) RETURNS void
    LANGUAGE plpgsql
    AS $$

DECLARE
  old_volume     BIGINT;
  new_volume     BIGINT;
  bib            BIGINT;
  old_owning_lib INTEGER;
	old_label      TEXT;
  remainder      BIGINT;

BEGIN

  -- Gather information
  SELECT call_number INTO old_volume FROM asset.copy WHERE id = copy_id;
  SELECT record INTO bib FROM asset.call_number WHERE id = old_volume;
  SELECT owning_lib, label INTO old_owning_lib, old_label FROM asset.call_number WHERE id = old_volume;

	-- Bail out if the new_owning_lib is not the ID of an org_unit
	IF new_owning_lib NOT IN (SELECT id FROM actor.org_unit) THEN
		RAISE WARNING 
			'% is not a valid actor.org_unit ID; no change made.', 
				new_owning_lib;
		RETURN;
	END IF;

  -- Bail out discreetly if the owning_lib is already correct
  IF new_owning_lib = old_owning_lib THEN
    RETURN;
  END IF;

  -- Check whether we already have a destination volume available
  SELECT id INTO new_volume FROM asset.call_number 
    WHERE 
      record = bib AND
      owning_lib = new_owning_lib AND
      label = old_label AND
      NOT deleted;

  -- Create destination volume if needed
  IF NOT FOUND THEN
    INSERT INTO asset.call_number (creator, editor, record, owning_lib, label) 
      VALUES (1, 1, bib, new_owning_lib, old_label);
    SELECT id INTO new_volume FROM asset.call_number
      WHERE 
        record = bib AND
        owning_lib = new_owning_lib AND
        label = old_label AND
        NOT deleted;
  END IF;

  -- Move copy to destination
  UPDATE asset.copy SET call_number = new_volume WHERE id = copy_id;

  -- Delete source volume if it is now empty
  SELECT id INTO remainder FROM asset.copy WHERE call_number = old_volume AND NOT deleted;
  IF NOT FOUND THEN
    DELETE FROM asset.call_number WHERE id = old_volume;
  END IF;

END;

$$;


ALTER FUNCTION migration_tools.change_owning_lib(copy_id bigint, new_owning_lib integer) OWNER TO evergreen;

--
-- Name: change_owning_lib(bigint, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION change_owning_lib(copy_id bigint, new_owner text) RETURNS void
    LANGUAGE plpgsql
    AS $_$

-- You can use shortnames with this function, which looks up the org unit ID and passes it to change_owning_lib(BIGINT,INTEGER).

DECLARE
	new_owning_lib	INTEGER;

BEGIN

	-- Parse the new_owner as an org unit ID or shortname
	IF new_owner IN (SELECT shortname FROM actor.org_unit) THEN
		SELECT id INTO new_owning_lib FROM actor.org_unit WHERE shortname = new_owner;
		PERFORM migration_tools.change_owning_lib(copy_id, new_owning_lib);
	ELSIF new_owner ~ E'^[0-9]+$' THEN
		IF new_owner::INTEGER IN (SELECT id FROM actor.org_unit) THEN
			RAISE INFO 
				'%',
				E'You don\'t need to put the actor.org_unit ID in quotes; '
					|| E'if you put it in quotes, I\'m going to try to parse it as a shortname first.';
			new_owning_lib := new_owner::INTEGER;
		PERFORM migration_tools.change_owning_lib(copy_id, new_owning_lib);
		END IF;
	ELSE
		RAISE WARNING 
			'% is not a valid actor.org_unit shortname or ID; no change made.', 
			new_owning_lib;
		RETURN;
	END IF;

END;

$_$;


ALTER FUNCTION migration_tools.change_owning_lib(copy_id bigint, new_owner text) OWNER TO evergreen;

--
-- Name: check_ou_depth(); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION check_ou_depth() RETURNS void
    LANGUAGE plpgsql
    AS $$

DECLARE
  ou  INT;
	org_unit_depth INT;
	ou_parent INT;
	parent_depth INT;
  errors_found BOOLEAN;
	ou_shortname TEXT;
	parent_shortname TEXT;
	ou_type_name TEXT;
	parent_type TEXT;
	type_id INT;
	type_depth INT;
	type_parent INT;
	type_parent_depth INT;
	proper_parent TEXT;

BEGIN

	errors_found := FALSE;

-- Checking actor.org_unit_type

	FOR type_id IN EXECUTE ('SELECT id FROM actor.org_unit_type ORDER BY id;') LOOP

		SELECT depth FROM actor.org_unit_type WHERE id = type_id INTO type_depth;
		SELECT parent FROM actor.org_unit_type WHERE id = type_id INTO type_parent;

		IF type_parent IS NOT NULL THEN

			SELECT depth FROM actor.org_unit_type WHERE id = type_parent INTO type_parent_depth;

			IF type_depth - type_parent_depth <> 1 THEN
				SELECT name FROM actor.org_unit_type WHERE id = type_id INTO ou_type_name;
				SELECT name FROM actor.org_unit_type WHERE id = type_parent INTO parent_type;
				RAISE INFO 'The % org unit type has a depth of %, but its parent org unit type, %, has a depth of %.',
					ou_type_name, type_depth, parent_type, type_parent_depth;
				errors_found := TRUE;

			END IF;

		END IF;

	END LOOP;

-- Checking actor.org_unit

  FOR ou IN EXECUTE ('SELECT id FROM actor.org_unit ORDER BY shortname;') LOOP

		SELECT parent_ou FROM actor.org_unit WHERE id = ou INTO ou_parent;
		SELECT t.depth FROM actor.org_unit_type t, actor.org_unit o WHERE o.ou_type = t.id and o.id = ou INTO org_unit_depth;
		SELECT t.depth FROM actor.org_unit_type t, actor.org_unit o WHERE o.ou_type = t.id and o.id = ou_parent INTO parent_depth;
		SELECT shortname FROM actor.org_unit WHERE id = ou INTO ou_shortname;
		SELECT shortname FROM actor.org_unit WHERE id = ou_parent INTO parent_shortname;
		SELECT t.name FROM actor.org_unit_type t, actor.org_unit o WHERE o.ou_type = t.id and o.id = ou INTO ou_type_name;
		SELECT t.name FROM actor.org_unit_type t, actor.org_unit o WHERE o.ou_type = t.id and o.id = ou_parent INTO parent_type;

		IF ou_parent IS NOT NULL THEN

			IF	(org_unit_depth - parent_depth <> 1) OR (
				(SELECT parent FROM actor.org_unit_type WHERE name = ou_type_name) <> (SELECT id FROM actor.org_unit_type WHERE name = parent_type)
			) THEN
				RAISE INFO '% (org unit %) is a % (depth %) but its parent, % (org unit %), is a % (depth %).', 
					ou_shortname, ou, ou_type_name, org_unit_depth, parent_shortname, ou_parent, parent_type, parent_depth;
				errors_found := TRUE;
			END IF;

		END IF;

  END LOOP;

	IF NOT errors_found THEN
		RAISE INFO 'No errors found.';
	END IF;

  RETURN;

END;

$$;


ALTER FUNCTION migration_tools.check_ou_depth() OWNER TO evergreen;

--
-- Name: country_code(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION country_code(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT value FROM ' || migration_schema || '.config WHERE key = ''country_code'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.country_code(text) OWNER TO evergreen;

--
-- Name: create_cards(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION create_cards(schemaname text) RETURNS void
    LANGUAGE plpgsql
    AS $$

-- USAGE: Make sure the patrons are staged in schemaname.actor_usr_legacy and have 'usrname' assigned.
--        Then SELECT migration_tools.create_cards('m_foo');

DECLARE
	u                    TEXT := schemaname || '.actor_usr_legacy';
	c                    TEXT := schemaname || '.actor_card';
  
BEGIN

	EXECUTE ('DELETE FROM ' || c || ';');
	EXECUTE ('INSERT INTO ' || c || ' (usr, barcode) SELECT id, usrname FROM ' || u || ';');
	EXECUTE ('UPDATE ' || u || ' u SET card = c.id FROM ' || c || ' c WHERE c.usr = u.id;');

  RETURN;

END;

$$;


ALTER FUNCTION migration_tools.create_cards(schemaname text) OWNER TO evergreen;

--
-- Name: debug_exec(text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION debug_exec(text, text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        sql ALIAS FOR $2;
        nrows INTEGER;
    BEGIN
        EXECUTE 'UPDATE ' || migration_schema || '.sql_current SET sql = ' || quote_literal(sql) || ';';
        RAISE INFO 'debug_exec sql = %', sql;
        EXECUTE sql;
        GET DIAGNOSTICS nrows = ROW_COUNT;
        PERFORM migration_tools.log(migration_schema,sql,nrows);
    EXCEPTION
        WHEN OTHERS THEN 
            RAISE EXCEPTION '!!!!!!!!!!! state = %, msg = %, sql = %', SQLSTATE, SQLERRM, sql;
    END;
$_$;


ALTER FUNCTION migration_tools.debug_exec(text, text) OWNER TO evergreen;

--
-- Name: exec(text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION exec(text, text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        sql ALIAS FOR $2;
        nrows INTEGER;
    BEGIN
        EXECUTE 'UPDATE ' || migration_schema || '.sql_current SET sql = ' || quote_literal(sql) || ';';
        --RAISE INFO '%', sql;
        EXECUTE sql;
        GET DIAGNOSTICS nrows = ROW_COUNT;
        PERFORM migration_tools.log(migration_schema,sql,nrows);
    EXCEPTION
        WHEN OTHERS THEN 
            RAISE EXCEPTION '!!!!!!!!!!! state = %, msg = %, sql = %', SQLSTATE, SQLERRM, sql;
    END;
$_$;


ALTER FUNCTION migration_tools.exec(text, text) OWNER TO evergreen;

--
-- Name: expand_barcode(text, text, integer, text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION expand_barcode(text, text, integer, text, text) RETURNS text
    LANGUAGE plperl STABLE
    AS $_$
    my ($barcode, $prefix, $maxlen, $pad, $suffix) = @_;

    # default case
    return unless defined $barcode;

    $prefix     = '' unless defined $prefix;
    $maxlen ||= 14;
    $pad        = '0' unless defined $pad;
    $suffix     = '' unless defined $suffix;

    # bail out if adding prefix and suffix would bring new barcode over max length
    return $barcode if (length($prefix) + length($barcode) + length($suffix)) > $maxlen;

    my $new_barcode = $barcode;
    if ($pad ne '') {
        my $pad_length = $maxlen - length($prefix) - length($suffix);
        if (length($barcode) < $pad_length) {
            # assuming we always want padding on the left
            # also assuming that it is possible to have the pad string be longer than 1 character
            $new_barcode = substr($pad x ($pad_length - length($barcode)), 0, $pad_length - length($barcode)) . $new_barcode;
        }
    }

    # bail out if adding prefix and suffix would bring new barcode over max length
    return $barcode if (length($prefix) + length($new_barcode) + length($suffix)) > $maxlen;

    return "$prefix$new_barcode$suffix";
$_$;


ALTER FUNCTION migration_tools.expand_barcode(text, text, integer, text, text) OWNER TO evergreen;

--
-- Name: init(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION init(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        sql TEXT;
    BEGIN
        EXECUTE 'DROP TABLE IF EXISTS ' || migration_schema || '.sql_current;';
        EXECUTE 'CREATE TABLE ' || migration_schema || '.sql_current ( sql TEXT);';
        EXECUTE 'INSERT INTO ' || migration_schema || '.sql_current ( sql ) VALUES ( '''' );';
        BEGIN
            SELECT 'CREATE TABLE ' || migration_schema || '.sql_log ( time TIMESTAMP NOT NULL DEFAULT NOW(), row_count INTEGER, sql TEXT );' INTO STRICT sql;
            EXECUTE sql;
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE INFO '!!!!!!!!!!! state = %, msg = %, sql = %', SQLSTATE, SQLERRM, sql;
        END;
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.config;' );
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.config ( key TEXT UNIQUE, value TEXT);' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''production_tables'', ''asset.call_number,asset.copy_location,asset.copy,asset.stat_cat,asset.stat_cat_entry,asset.stat_cat_entry_copy_map,asset.copy_note,actor.usr,actor.card,actor.usr_address,actor.stat_cat,actor.stat_cat_entry,actor.stat_cat_entry_usr_map,actor.usr_note,action.circulation,action.hold_request,action.hold_notification,money.grocery,money.billing,money.cash_payment,money.forgive_payment'' );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''country_code'', ''USA'' );' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.fields_requiring_mapping;' );
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.fields_requiring_mapping( table_schema TEXT, table_name TEXT, column_name TEXT, data_type TEXT);' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.base_profile_map;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || E'.base_profile_map ( 
            id SERIAL,
            perm_grp_id INTEGER,
            transcribed_perm_group TEXT,
            legacy_field1 TEXT,
            legacy_value1 TEXT,
            legacy_field2 TEXT,
            legacy_value2 TEXT,
            legacy_field3 TEXT,
            legacy_value3 TEXT
        );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''base_profile_map'', ''base_profile_map'' );' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.base_item_dynamic_field_map;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || E'.base_item_dynamic_field_map ( 
            id SERIAL,
            evergreen_field TEXT,
            evergreen_value TEXT,
            evergreen_datatype TEXT,
            legacy_field1 TEXT,
            legacy_value1 TEXT,
            legacy_field2 TEXT,
            legacy_value2 TEXT,
            legacy_field3 TEXT,
            legacy_value3 TEXT
        );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_item_dynamic_lf1_idx ON ' || migration_schema || '.base_item_dynamic_field_map (legacy_field1,legacy_value1);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_item_dynamic_lf2_idx ON ' || migration_schema || '.base_item_dynamic_field_map (legacy_field2,legacy_value2);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_item_dynamic_lf3_idx ON ' || migration_schema || '.base_item_dynamic_field_map (legacy_field3,legacy_value3);' ); 
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''base_item_dynamic_field_map'', ''base_item_dynamic_field_map'' );' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.base_copy_location_map;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || E'.base_copy_location_map ( 
            id SERIAL,
            location INTEGER,
            holdable BOOLEAN NOT NULL DEFAULT TRUE,
            hold_verify BOOLEAN NOT NULL DEFAULT FALSE,
            opac_visible BOOLEAN NOT NULL DEFAULT TRUE,
            circulate BOOLEAN NOT NULL DEFAULT TRUE,
            transcribed_location TEXT,
            legacy_field1 TEXT,
            legacy_value1 TEXT,
            legacy_field2 TEXT,
            legacy_value2 TEXT,
            legacy_field3 TEXT,
            legacy_value3 TEXT
        );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_base_copy_location_lf1_idx ON ' || migration_schema || '.base_copy_location_map (legacy_field1,legacy_value1);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_base_copy_location_lf2_idx ON ' || migration_schema || '.base_copy_location_map (legacy_field2,legacy_value2);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_base_copy_location_lf3_idx ON ' || migration_schema || '.base_copy_location_map (legacy_field3,legacy_value3);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_base_copy_location_loc_idx ON ' || migration_schema || '.base_copy_location_map (transcribed_location);' ); 
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''base_copy_location_map'', ''base_copy_location_map'' );' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.base_circ_field_map;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || E'.base_circ_field_map ( 
            id SERIAL,
            circulate BOOLEAN,
            loan_period TEXT,
            max_renewals TEXT,
            max_out TEXT,
            fine_amount TEXT,
            fine_interval TEXT,
            max_fine TEXT,
            item_field1 TEXT,
            item_value1 TEXT,
            item_field2 TEXT,
            item_value2 TEXT,
            patron_field1 TEXT,
            patron_value1 TEXT,
            patron_field2 TEXT,
            patron_value2 TEXT
        );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_circ_dynamic_lf1_idx ON ' || migration_schema || '.base_circ_field_map (item_field1,item_value1);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_circ_dynamic_lf2_idx ON ' || migration_schema || '.base_circ_field_map (item_field2,item_value2);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_circ_dynamic_lf3_idx ON ' || migration_schema || '.base_circ_field_map (patron_field1,patron_value1);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_circ_dynamic_lf4_idx ON ' || migration_schema || '.base_circ_field_map (patron_field2,patron_value2);' ); 
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''base_circ_field_map'', ''base_circ_field_map'' );' );

        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_init'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_init'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.init(text) OWNER TO evergreen;

--
-- Name: insert_856_9(text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION insert_856_9(text, text) RETURNS text
    LANGUAGE plperlu STABLE
    AS $_$

  ## USAGE: UPDATE biblio.record_entry SET marc = migration_tools.insert_856_9(marc, 'ABC') WHERE [...];

  my ($marcxml, $shortname) = @_;

  use MARC::Record;
  use MARC::File::XML;

  my $xml = $marcxml;

  eval {
    my $marc = MARC::Record->new_from_xml($marcxml, 'UTF-8');

    foreach my $field ( $marc->field('856') ) {
      if ( scalar(grep( /(contentreserve|netlibrary|overdrive)\.com/i, $field->subfield('u'))) > 0 &&
           ! ( $field->as_string('9') =~ m/$shortname/ ) ) {
        $field->add_subfields( '9' => $shortname );
				$field->update( ind2 => '0');
      }
    }

    $xml = $marc->as_xml_record;
    $xml =~ s/^<\?.+?\?>$//mo;
    $xml =~ s/\n//sgo;
    $xml =~ s/>\s+</></sgo;
  };

  return $xml;

$_$;


ALTER FUNCTION migration_tools.insert_856_9(text, text) OWNER TO evergreen;

--
-- Name: insert_base_into_production(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION insert_base_into_production(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        production_tables TEXT[];
    BEGIN
        --RAISE INFO 'In migration_tools.insert_into_production(%)', migration_schema;
        SELECT migration_tools.production_tables(migration_schema) INTO STRICT production_tables;
        FOR i IN array_lower(production_tables,1) .. array_upper(production_tables,1) LOOP
            PERFORM migration_tools.insert_into_production(migration_schema,production_tables[i]);
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.insert_base_into_production(text) OWNER TO evergreen;

--
-- Name: insert_into_production(text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION insert_into_production(text, text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        production_table ALIAS FOR $2;
        base_staging_table TEXT;
        columns RECORD;
    BEGIN
        base_staging_table = REPLACE( production_table, '.', '_' );
        --RAISE INFO 'In migration_tools.insert_into_production(%,%) -> %', migration_schema, production_table, base_staging_table;
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || production_table || ' SELECT * FROM ' || migration_schema || '.' || base_staging_table || ';' );
    END;
$_$;


ALTER FUNCTION migration_tools.insert_into_production(text, text) OWNER TO evergreen;

--
-- Name: insert_metarecords_for_incumbent_database(); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION insert_metarecords_for_incumbent_database() RETURNS void
    LANGUAGE plpgsql
    AS $$

BEGIN
  INSERT INTO metabib.metarecord (fingerprint, master_record)
    SELECT  DISTINCT ON (b.fingerprint) b.fingerprint, b.id
      FROM  biblio.record_entry b
      WHERE NOT b.deleted
        AND b.id IN (SELECT r.id FROM biblio.record_entry r LEFT JOIN metabib.metarecord_source_map k ON (k.source = r.id) WHERE k.id IS NULL AND r.fingerprint IS NOT NULL)
        AND NOT EXISTS ( SELECT 1 FROM metabib.metarecord WHERE fingerprint = b.fingerprint )
      ORDER BY b.fingerprint, b.quality DESC;
  INSERT INTO metabib.metarecord_source_map (metarecord, source)
    SELECT  m.id, r.id
      FROM  biblio.record_entry r
        JOIN metabib.metarecord m USING (fingerprint)
      WHERE NOT r.deleted
        AND r.id IN (SELECT b.id FROM biblio.record_entry b LEFT JOIN metabib.metarecord_source_map k ON (k.source = b.id) WHERE k.id IS NULL);
END;
    
$$;


ALTER FUNCTION migration_tools.insert_metarecords_for_incumbent_database() OWNER TO evergreen;

--
-- Name: insert_metarecords_for_pristine_database(); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION insert_metarecords_for_pristine_database() RETURNS void
    LANGUAGE plpgsql
    AS $$

BEGIN
  INSERT INTO metabib.metarecord (fingerprint, master_record)
    SELECT  DISTINCT ON (b.fingerprint) b.fingerprint, b.id
      FROM  biblio.record_entry b
      WHERE NOT b.deleted
        AND b.id IN (SELECT r.id FROM biblio.record_entry r LEFT JOIN metabib.metarecord_source_map k ON (k.source = r.id) WHERE k.id IS NULL AND r.fingerprint IS NOT NULL)
        AND NOT EXISTS ( SELECT 1 FROM metabib.metarecord WHERE fingerprint = b.fingerprint )
      ORDER BY b.fingerprint, b.quality DESC;
  INSERT INTO metabib.metarecord_source_map (metarecord, source)
    SELECT  m.id, r.id
      FROM  biblio.record_entry r
      JOIN  metabib.metarecord m USING (fingerprint)
     WHERE  NOT r.deleted;
END;
  
$$;


ALTER FUNCTION migration_tools.insert_metarecords_for_pristine_database() OWNER TO evergreen;

--
-- Name: insert_tags(text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION insert_tags(text, text) RETURNS text
    LANGUAGE plperlu STABLE
    AS $_X$

  my ($marcxml, $tags) = @_;

  use MARC::Record;
  use MARC::File::XML;

  my $xml = $marcxml;

  eval {
    my $marc = MARC::Record->new_from_xml($marcxml, 'UTF-8');
    my $to_insert = MARC::Record->new_from_xml("<record>$tags</record>", 'UTF-8');

    my @incumbents = ();

    foreach my $field ( $marc->fields() ) {
      push @incumbents, $field->as_formatted();
    }

    foreach $field ( $to_insert->fields() ) {
      if (!grep {$_ eq $field->as_formatted()} @incumbents) {
        $marc->insert_fields_ordered( ($field) );
      }
    }

    $xml = $marc->as_xml_record;
    $xml =~ s/^<\?.+?\?>$//mo;
    $xml =~ s/\n//sgo;
    $xml =~ s/>\s+</></sgo;
  };

  return $xml;

$_X$;


ALTER FUNCTION migration_tools.insert_tags(text, text) OWNER TO evergreen;

--
-- Name: is_blank(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION is_blank(text) RETURNS boolean
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
  BEGIN
    RETURN CASE WHEN $1 = '' THEN TRUE ELSE FALSE END;
  END;
$_$;


ALTER FUNCTION migration_tools.is_blank(text) OWNER TO evergreen;

--
-- Name: is_staff_profile(integer); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION is_staff_profile(integer) RETURNS boolean
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
  DECLARE
    profile ALIAS FOR $1;
  BEGIN
    RETURN CASE WHEN 'Staff' IN (select (permission.grp_ancestors(profile)).name) THEN TRUE ELSE FALSE END;
  END;
$_$;


ALTER FUNCTION migration_tools.is_staff_profile(integer) OWNER TO evergreen;

--
-- Name: keyword(integer); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION keyword(breid integer) RETURNS void
    LANGUAGE plpgsql
    AS $_X$
DECLARE
    ind_data        metabib.field_entry_template%ROWTYPE;
    old_mr          INT;
    tmp_mr          metabib.metarecord%ROWTYPE;
    source_count    INT;
    deleted_mrs     INT[];
    uris            TEXT[];
    uri_xml         TEXT;
    uri_label       TEXT;
    uri_href        TEXT;
    uri_use         TEXT;
    uri_owner       TEXT;
    uri_owner_id    INT;
    uri_id          INT;
    uri_cn_id       INT;
    uri_map_id      INT;

    ind_vector      TSVECTOR;

    fclass          RECORD;
BEGIN

    -- And now the indexing data
    FOR ind_data IN SELECT * FROM biblio.extract_metabib_field_entry( breid ) LOOP
        IF ind_data.field < 0 THEN
            ind_vector = '';
            ind_data.field = -1 * ind_data.field;
        ELSE
            ind_vector = NULL;
        END IF;

        EXECUTE $$
            INSERT INTO metabib.$$ || ind_data.field_class || $$_field_entry (field, source, value, index_vector)
                VALUES ($$ ||
                    quote_literal(ind_data.field) || $$, $$ ||
                    quote_literal(ind_data.source) || $$, $$ ||
                    quote_literal(ind_data.value) || $$, $$ ||
                    COALESCE(quote_literal(ind_vector),'NULL'::TEXT) ||
                $$);$$;
    END LOOP;

END;
$_X$;


ALTER FUNCTION migration_tools.keyword(breid integer) OWNER TO evergreen;

--
-- Name: log(text, text, integer); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION log(text, text, integer) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        sql ALIAS FOR $2;
        nrows ALIAS FOR $3;
    BEGIN
        EXECUTE 'INSERT INTO ' || migration_schema || '.sql_log ( sql, row_count ) VALUES ( ' || quote_literal(sql) || ', ' || nrows || ' );';
    END;
$_$;


ALTER FUNCTION migration_tools.log(text, text, integer) OWNER TO evergreen;

--
-- Name: map_base_circ_table_dynamic(text, text, text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_base_circ_table_dynamic(text, text, text, text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        field_map TEXT;
        circ_table ALIAS FOR $2;
        item_table ALIAS FOR $3;
        patron_table ALIAS FOR $4;
        sql TEXT;
        sql_update TEXT;
        sql_where1 TEXT := '';
        sql_where2 TEXT := '';
        sql_where3 TEXT := '';
        sql_where4 TEXT := '';
        output RECORD;
    BEGIN
        SELECT migration_tools.base_circ_field_map(migration_schema) INTO STRICT field_map;
        FOR output IN 
            EXECUTE 'SELECT * FROM ' || field_map || E' ORDER BY id;'
        LOOP
            sql_update := 'UPDATE ' || circ_table || ' AS c SET duration = ' || quote_literal(output.loan_period) || '::INTERVAL, renewal_remaining = ' || quote_literal(output.max_renewals) || '::INTEGER, recuring_fine = ' || quote_literal(output.fine_amount) || '::NUMERIC(6,2), fine_interval = ' || quote_literal(output.fine_interval) || '::INTERVAL, max_fine = ' || quote_literal(output.max_fine) || '::NUMERIC(6,2) FROM ' || field_map || ' AS m, ' || item_table || ' AS i, ' || patron_table || ' AS u WHERE c.usr = u.id AND c.target_copy = i.id AND ';
            sql_where1 := NULLIF(output.item_field1,'') || ' = ' || quote_literal( output.item_value1 ) || ' AND item_field1 = ' || quote_literal(output.item_field1) || ' AND item_value1 = ' || quote_literal(output.item_value1);
            sql_where2 := NULLIF(output.item_field2,'') || ' = ' || quote_literal( output.item_value2 ) || ' AND item_field2 = ' || quote_literal(output.item_field2) || ' AND item_value2 = ' || quote_literal(output.item_value2);
            sql_where3 := NULLIF(output.patron_field1,'') || ' = ' || quote_literal( output.patron_value1 ) || ' AND patron_field1 = ' || quote_literal(output.patron_field1) || ' AND patron_value1 = ' || quote_literal(output.patron_value1);
            sql_where4 := NULLIF(output.patron_field2,'') || ' = ' || quote_literal( output.patron_value2 ) || ' AND patron_field2 = ' || quote_literal(output.patron_field2) || ' AND patron_value2 = ' || quote_literal(output.patron_value2);
            sql := sql_update || COALESCE(sql_where1,'') || CASE WHEN sql_where1 <> '' AND sql_where2<> ''  THEN ' AND ' ELSE '' END || COALESCE(sql_where2,'') || CASE WHEN sql_where2 <> '' AND sql_where3 <> '' THEN ' AND ' ELSE '' END || COALESCE(sql_where3,'') || CASE WHEN sql_where3 <> '' AND sql_where4 <> '' THEN ' AND ' ELSE '' END || COALESCE(sql_where4,'') || ';';
            --RAISE INFO 'sql = %', sql;
            PERFORM migration_tools.exec( $1, sql );
        END LOOP;
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_base_circ_field_mapping'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_base_circ_field_mapping'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_base_circ_table_dynamic(text, text, text, text) OWNER TO evergreen;

--
-- Name: map_base_item_table_dynamic(text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_base_item_table_dynamic(text, text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        field_map TEXT;
        item_table ALIAS FOR $2;
        sql TEXT;
        sql_update TEXT;
        sql_where1 TEXT := '';
        sql_where2 TEXT := '';
        sql_where3 TEXT := '';
        output RECORD;
    BEGIN
        SELECT migration_tools.base_item_dynamic_field_map(migration_schema) INTO STRICT field_map;
        FOR output IN 
            EXECUTE 'SELECT * FROM ' || field_map || E' ORDER BY id;'
        LOOP
            sql_update := 'UPDATE ' || item_table || ' AS i SET ' || output.evergreen_field || E' = ' || quote_literal(output.evergreen_value) || '::' || output.evergreen_datatype || E' FROM ' || field_map || ' AS m WHERE ';
            sql_where1 := NULLIF(output.legacy_field1,'') || ' = ' || quote_literal( output.legacy_value1 ) || ' AND legacy_field1 = ' || quote_literal(output.legacy_field1) || ' AND legacy_value1 = ' || quote_literal(output.legacy_value1);
            sql_where2 := NULLIF(output.legacy_field2,'') || ' = ' || quote_literal( output.legacy_value2 ) || ' AND legacy_field2 = ' || quote_literal(output.legacy_field2) || ' AND legacy_value2 = ' || quote_literal(output.legacy_value2);
            sql_where3 := NULLIF(output.legacy_field3,'') || ' = ' || quote_literal( output.legacy_value3 ) || ' AND legacy_field3 = ' || quote_literal(output.legacy_field3) || ' AND legacy_value3 = ' || quote_literal(output.legacy_value3);
            sql := sql_update || COALESCE(sql_where1,'') || CASE WHEN sql_where1 <> '' AND sql_where2<> ''  THEN ' AND ' ELSE '' END || COALESCE(sql_where2,'') || CASE WHEN sql_where2 <> '' AND sql_where3 <> '' THEN ' AND ' ELSE '' END || COALESCE(sql_where3,'') || ';';
            --RAISE INFO 'sql = %', sql;
            PERFORM migration_tools.exec( $1, sql );
        END LOOP;
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_base_item_mapping_dynamic'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_base_item_mapping_dynamic'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_base_item_table_dynamic(text, text) OWNER TO evergreen;

--
-- Name: map_base_item_table_locations(text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_base_item_table_locations(text, text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        base_copy_location_map TEXT;
        item_table ALIAS FOR $2;
        sql TEXT;
        sql_update TEXT;
        sql_where1 TEXT := '';
        sql_where2 TEXT := '';
        sql_where3 TEXT := '';
        output RECORD;
    BEGIN
        SELECT migration_tools.base_copy_location_map(migration_schema) INTO STRICT base_copy_location_map;
        FOR output IN 
            EXECUTE 'SELECT * FROM ' || base_copy_location_map || E' ORDER BY id;'
        LOOP
            sql_update := 'UPDATE ' || item_table || ' AS i SET location = m.location FROM ' || base_copy_location_map || ' AS m WHERE ';
            sql_where1 := NULLIF(output.legacy_field1,'') || ' = ' || quote_literal( output.legacy_value1 ) || ' AND legacy_field1 = ' || quote_literal(output.legacy_field1) || ' AND legacy_value1 = ' || quote_literal(output.legacy_value1);
            sql_where2 := NULLIF(output.legacy_field2,'') || ' = ' || quote_literal( output.legacy_value2 ) || ' AND legacy_field2 = ' || quote_literal(output.legacy_field2) || ' AND legacy_value2 = ' || quote_literal(output.legacy_value2);
            sql_where3 := NULLIF(output.legacy_field3,'') || ' = ' || quote_literal( output.legacy_value3 ) || ' AND legacy_field3 = ' || quote_literal(output.legacy_field3) || ' AND legacy_value3 = ' || quote_literal(output.legacy_value3);
            sql := sql_update || COALESCE(sql_where1,'') || CASE WHEN sql_where1 <> '' AND sql_where2<> ''  THEN ' AND ' ELSE '' END || COALESCE(sql_where2,'') || CASE WHEN sql_where2 <> '' AND sql_where3 <> '' THEN ' AND ' ELSE '' END || COALESCE(sql_where3,'') || ';';
            --RAISE INFO 'sql = %', sql;
            PERFORM migration_tools.exec( $1, sql );
        END LOOP;
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_base_item_mapping_locations'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_base_item_mapping_locations'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_base_item_table_locations(text, text) OWNER TO evergreen;

--
-- Name: map_base_patron_profile(text, text, integer); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_base_patron_profile(text, text, integer) RETURNS void
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        profile_map TEXT;
        patron_table ALIAS FOR $2;
        default_patron_profile ALIAS FOR $3;
        sql TEXT;
        sql_update TEXT;
        sql_where1 TEXT := '';
        sql_where2 TEXT := '';
        sql_where3 TEXT := '';
        output RECORD;
    BEGIN
        SELECT migration_tools.base_profile_map(migration_schema) INTO STRICT profile_map;
        FOR output IN 
            EXECUTE 'SELECT * FROM ' || profile_map || E' ORDER BY id;'
        LOOP
            sql_update := 'UPDATE ' || patron_table || ' AS u SET profile = perm_grp_id FROM ' || profile_map || ' AS m WHERE ';
            sql_where1 := NULLIF(output.legacy_field1,'') || ' = ' || quote_literal( output.legacy_value1 ) || ' AND legacy_field1 = ' || quote_literal(output.legacy_field1) || ' AND legacy_value1 = ' || quote_literal(output.legacy_value1);
            sql_where2 := NULLIF(output.legacy_field2,'') || ' = ' || quote_literal( output.legacy_value2 ) || ' AND legacy_field2 = ' || quote_literal(output.legacy_field2) || ' AND legacy_value2 = ' || quote_literal(output.legacy_value2);
            sql_where3 := NULLIF(output.legacy_field3,'') || ' = ' || quote_literal( output.legacy_value3 ) || ' AND legacy_field3 = ' || quote_literal(output.legacy_field3) || ' AND legacy_value3 = ' || quote_literal(output.legacy_value3);
            sql := sql_update || COALESCE(sql_where1,'') || CASE WHEN sql_where1 <> '' AND sql_where2<> ''  THEN ' AND ' ELSE '' END || COALESCE(sql_where2,'') || CASE WHEN sql_where2 <> '' AND sql_where3 <> '' THEN ' AND ' ELSE '' END || COALESCE(sql_where3,'') || ';';
            --RAISE INFO 'sql = %', sql;
            PERFORM migration_tools.exec( $1, sql );
        END LOOP;
        PERFORM migration_tools.exec( $1, 'UPDATE ' || patron_table || ' AS u SET profile = ' || quote_literal(default_patron_profile) || ' WHERE profile IS NULL;'  );
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_base_patron_mapping_profile'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_base_patron_mapping_profile'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_base_patron_profile(text, text, integer) OWNER TO evergreen;

--
-- Name: map_subfield(bigint, text, text, text, text, text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_subfield(bibid bigint, old_marc text, source_tag text, source_sf text, dest_tag text, dest_sf text, map text DEFAULT ''::text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
        sf_value        TEXT;
        new_marc        TEXT;
BEGIN
        -- NOTE!!! This will strip the ENTIRE destination tag ... you are warned.
        sf_value := extract_marc_field('biblio.record_entry', bibid, '//*[@tag="' || source_tag || '"][1]/*[@code="' || source_sf || '"][1]');
        -- RAISE NOTICE '%', sf_value;
        sf_value := generic_map_normalizer(sf_value, map);
        -- RAISE NOTICE '%', sf_value;
        -- make sure it's gone
        new_marc := vandelay.strip_field( old_marc, dest_tag);
        -- RAISE NOTICE '%', new_marc;
        new_marc := migration_tools.insert_tags( new_marc, '<datafield tag="'||dest_tag||'"><subfield code="'||dest_sf||'">'||sf_value||'</subfield></datafield>');
        -- RAISE NOTICE '%', new_marc;
        -- UPDATE biblio.record_entry SET marc = new_marc WHERE id = bibid;
        RETURN new_marc;
END;
$$;


ALTER FUNCTION migration_tools.map_subfield(bibid bigint, old_marc text, source_tag text, source_sf text, dest_tag text, dest_sf text, map text) OWNER TO evergreen;

--
-- Name: map_unicorn_circulation(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_unicorn_circulation(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        org_map TEXT;
        sql TEXT;
    BEGIN
        SELECT migration_tools.unicorn_org_map(migration_schema) INTO STRICT org_map;

        SELECT '
            UPDATE ' || migration_schema || E'.action_circulation_unicorn c SET
                usr = p.usr FROM ' || migration_schema || E'.actor_card p WHERE p.barcode = l_user_id
        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );

        SELECT '
            UPDATE ' || migration_schema || E'.action_circulation_unicorn c SET
                circ_lib = m.org_id FROM ' || org_map || E' m WHERE l_library = l_charging_lib
        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );

        SELECT '
            UPDATE ' || migration_schema || E'.action_circulation_unicorn c SET
                circ_staff = m.default_circ_staff FROM ' || org_map || E' m WHERE l_library = l_charging_lib
        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );

        SELECT '
            UPDATE ' || migration_schema || E'.action_circulation_unicorn c SET
                target_copy = i.id FROM ' || migration_schema || E'.asset_copy i WHERE i.barcode = l_item_id
        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );

        SELECT '
            UPDATE ' || migration_schema || E'.action_circulation_unicorn AS c SET
                renewal_remaining = 5,
                xact_start = l_date_charged::TIMESTAMP,
                due_date = COALESCE( NULLIF(l_date_due,''NEVER''), ''2030-01-01'' )::TIMESTAMP,
                duration = COALESCE( NULLIF(l_date_due,''NEVER''), ''2030-01-01'' )::TIMESTAMP - l_date_charged::TIMESTAMP,
                recurring_fine = 0.00,
                max_fine = 10.00,
                stop_fines = CASE WHEN l_date_claim_returned <> '''' THEN ''CLAIMSRETURNED'' ELSE NULL END,
                stop_fines_time = CASE WHEN l_date_claim_returned <> '''' THEN l_date_claim_returned::TIMESTAMP ELSE NULL END,
                duration_rule = ' || quote_literal(migration_schema) || E',
                recurring_fine_rule = ' || quote_literal(migration_schema) || E',
                max_fine_rule = ' || quote_literal(migration_schema) || E' 

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_circulation_mapping'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_circulation_mapping'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_unicorn_circulation(text) OWNER TO evergreen;

--
-- Name: map_unicorn_holds(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_unicorn_holds(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        org_map TEXT;
        item_table TEXT;
        patron_table TEXT;
        user_key_barcode_map TEXT;
        item_key_barcode_map TEXT;
        default_selection_depth INTEGER;
        sql TEXT;
    BEGIN
        SELECT migration_tools.unicorn_org_map(migration_schema) INTO STRICT org_map;
        SELECT migration_tools.unicorn_item_table(migration_schema) INTO STRICT item_table;
        SELECT migration_tools.unicorn_patron_table(migration_schema) INTO STRICT patron_table;
        SELECT migration_tools.unicorn_user_key_barcode_map(migration_schema) INTO STRICT user_key_barcode_map;
        SELECT migration_tools.unicorn_item_key_barcode_map(migration_schema) INTO STRICT item_key_barcode_map;
        SELECT migration_tools.unicorn_default_selection_depth(migration_schema) INTO STRICT default_selection_depth;
        SELECT '

            UPDATE
                ' || migration_schema || '.action_hold_request_unicorn h
            SET
                _item_barcode = BTRIM(im.barcode)
            FROM
                ' || migration_schema || '.item_key_barcode_map im
            WHERE
                h.l_cat_key::TEXT = im.key1 AND
                h.l_call_key::TEXT = im.key2 AND
                h.l_item_key::TEXT = im.key3;

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        SELECT '

            UPDATE
                ' || migration_schema || '.action_hold_request_unicorn h
            SET
                _user_barcode = BTRIM(um.barcode)
            FROM
                ' || migration_schema || '.user_key_barcode_map um
            WHERE
                h.l_user_key::TEXT = um.key;

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        SELECT '

            UPDATE ' || migration_schema || E'.action_hold_request_unicorn AS h SET

                _bib_id = ( SELECT DISTINCT i._final_eg_bibid FROM ' || item_table || E' AS i WHERE barcode = _item_barcode ),
                current_copy = ( SELECT DISTINCT i.id FROM ' || item_table || E' AS i WHERE barcode = _item_barcode ),
                usr = ( SELECT DISTINCT p.id FROM ' || patron_table || E' AS p WHERE l_user_id = _user_barcode ),
                request_time = l_hold_date::TIMESTAMP,
                capture_time = CASE
                    WHEN l_item_available = ''Y'' THEN l_hold_date::TIMESTAMP
                    ELSE NULL
                END,
                selection_depth = ' || quote_literal(default_selection_depth) || E',
                selection_ou = ( SELECT DISTINCT p.home_ou FROM ' || patron_table || E' AS p WHERE l_user_id = _user_barcode ),
                hold_type = CASE -- Let us not trust the Unicorn values
                    WHEN l_hold_type = ''C'' THEN ''C''
                    ELSE ''T''
                END,
                phone_notify = ( SELECT DISTINCT COALESCE(NULLIF(day_phone,''''),NULLIF(evening_phone,''''),NULLIF(other_phone,'''')) FROM ' || patron_table || E' AS p WHERE l_user_id = _user_barcode );

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        SELECT '

            UPDATE ' || migration_schema || E'.action_hold_request_unicorn AS h SET

                target = CASE
                    WHEN l_hold_type = ''C'' THEN current_copy
                    ELSE _bib_id
                END,
                requestor = usr,
                request_lib = selection_ou,
                pickup_lib = selection_ou;

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_hold_mapping'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_hold_mapping'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_unicorn_holds(text) OWNER TO evergreen;

--
-- Name: map_unicorn_holds_with_pickup_location(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_unicorn_holds_with_pickup_location(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        org_map TEXT;
        item_table TEXT;
        patron_table TEXT;
        user_key_barcode_map TEXT;
        item_key_barcode_map TEXT;
        default_selection_depth INTEGER;
        sql TEXT;
    BEGIN
        SELECT migration_tools.unicorn_org_map(migration_schema) INTO STRICT org_map;
        SELECT migration_tools.unicorn_item_table(migration_schema) INTO STRICT item_table;
        SELECT migration_tools.unicorn_patron_table(migration_schema) INTO STRICT patron_table;
        SELECT migration_tools.unicorn_user_key_barcode_map(migration_schema) INTO STRICT user_key_barcode_map;
        SELECT migration_tools.unicorn_item_key_barcode_map(migration_schema) INTO STRICT item_key_barcode_map;
        SELECT migration_tools.unicorn_default_selection_depth(migration_schema) INTO STRICT default_selection_depth;
        SELECT '

            UPDATE
                ' || migration_schema || '.action_hold_request_unicorn h
            SET
                _item_barcode = BTRIM(im.barcode)
            FROM
                ' || migration_schema || '.item_key_barcode_map im
            WHERE
                h.l_cat_key::TEXT = im.key1 AND
                h.l_call_key::TEXT = im.key2 AND
                h.l_item_key::TEXT = im.key3;

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        SELECT '

            UPDATE
                ' || migration_schema || '.action_hold_request_unicorn h
            SET
                _user_barcode = BTRIM(um.barcode)
            FROM
                ' || migration_schema || '.user_key_barcode_map um
            WHERE
                h.l_user_key::TEXT = um.key;

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        SELECT '

            UPDATE 
                ' || migration_schema || E'.action_hold_request_unicorn h
            SET
                _bib_id = i._final_eg_bibid
            FROM
                ' || item_table || ' i
            WHERE
                i.barcode = h._item_barcode;

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        SELECT '

            UPDATE 
                ' || migration_schema || E'.action_hold_request_unicorn h
            SET
                current_copy = i.id
            FROM
                ' || item_table || ' i
            WHERE
                i.barcode = h._item_barcode;

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        SELECT '

            UPDATE ' || migration_schema || E'.action_hold_request_unicorn AS h SET

                usr = ( SELECT DISTINCT p.id FROM ' || patron_table || E' AS p WHERE l_user_id = _user_barcode ),
                request_time = l_hold_date::TIMESTAMP,
                capture_time = CASE
                    WHEN l_item_available = ''Y'' THEN l_hold_date::TIMESTAMP
                    ELSE NULL
                END,
                selection_depth = ' || quote_literal(default_selection_depth) || E',
                selection_ou = ( SELECT DISTINCT p.home_ou FROM ' || patron_table || E' AS p WHERE l_user_id = _user_barcode ),
                pickup_lib = ( SELECT DISTINCT id FROM actor.org_unit ou WHERE ou.shortname = l_pickup_lib ),
                hold_type = CASE -- Let us not trust the Unicorn values
                    WHEN l_hold_type = ''C'' THEN ''C''
                    ELSE ''T''
                END,
                phone_notify = ( SELECT DISTINCT COALESCE(NULLIF(day_phone,''''),NULLIF(evening_phone,''''),NULLIF(other_phone,'''')) FROM ' || patron_table || E' AS p WHERE l_user_id = _user_barcode );

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        SELECT '

            UPDATE ' || migration_schema || E'.action_hold_request_unicorn AS h SET

                target = CASE
                    WHEN l_hold_type = ''C'' THEN current_copy
                    ELSE _bib_id
                END,
                requestor = usr,
                request_lib = selection_ou;

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_hold_mapping'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_hold_mapping'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_unicorn_holds_with_pickup_location(text) OWNER TO evergreen;

--
-- Name: map_unicorn_item_table_base(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_unicorn_item_table_base(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        org_map TEXT;
        item_table TEXT;
        default_item_status INTEGER;
        default_item_holdable_flag BOOLEAN;
        default_item_circulate_flag BOOLEAN;
        default_item_creator INTEGER;
        default_item_editor INTEGER;
        default_item_loan_duration INTEGER;
        default_item_fine_level INTEGER;
        default_item_age_protect INTEGER;
        sql TEXT;
    BEGIN
        SELECT migration_tools.unicorn_org_map(migration_schema) INTO STRICT org_map;
        SELECT migration_tools.unicorn_item_table(migration_schema) INTO STRICT item_table;
        SELECT migration_tools.unicorn_default_item_status(migration_schema) INTO STRICT default_item_status;
        SELECT migration_tools.unicorn_default_item_holdable_flag(migration_schema) INTO STRICT default_item_holdable_flag;
        SELECT migration_tools.unicorn_default_item_circulate_flag(migration_schema) INTO STRICT default_item_circulate_flag;
        SELECT migration_tools.unicorn_default_item_creator(migration_schema) INTO STRICT default_item_creator;
        SELECT migration_tools.unicorn_default_item_editor(migration_schema) INTO STRICT default_item_editor;
        SELECT migration_tools.unicorn_default_item_loan_duration(migration_schema) INTO STRICT default_item_loan_duration;
        SELECT migration_tools.unicorn_default_item_fine_level(migration_schema) INTO STRICT default_item_fine_level;
        SELECT migration_tools.unicorn_default_item_age_protect(migration_schema) INTO STRICT default_item_age_protect;
        SELECT '

            UPDATE ' || item_table || E' AS i SET 

                barcode = migration_tools.rebarcode( l_barcode, (SELECT item_rebarcode_offset FROM ' || org_map || E' AS m WHERE m.l_library = i.l_library) ),
                price = CASE
                    WHEN length(l_price) >= 11 THEN 999999.99
                    WHEN l_price !~ E''^\\\\$?\\\\d*\\\\.\\\\d\\\\d$'' THEN 0.00
                    ELSE COALESCE( NULLIF( REPLACE(REPLACE(l_price,'' '',''''),''$'',''''), '''' ), ''0.00'' )::NUMERIC(8,2)
                END,
                create_date = NULLIF(l_acq_date,'''')::TIMESTAMP,
                edit_date = NULLIF(l_acq_date,'''')::TIMESTAMP,
                status = ' || quote_literal(default_item_status) || E',
                creator = ' || quote_literal(default_item_creator) || E',
                editor = ' || quote_literal(default_item_editor) || E',
                loan_duration = ' || quote_literal(default_item_loan_duration) || E',
                fine_level = ' || quote_literal(default_item_fine_level) || E',
                age_protect = ' || CASE WHEN default_item_age_protect IS NULL THEN 'NULL' ELSE quote_literal(default_item_age_protect) END || E',
                holdable = ' || CASE WHEN default_item_holdable_flag THEN 'TRUE' ELSE 'FALSE' END || E',
                circulate = CASE
                    WHEN l_circ_flag = ''Y'' THEN TRUE
                    WHEN l_circ_flag = ''N'' THEN FALSE
                    ELSE ' || CASE WHEN default_item_circulate_flag THEN 'TRUE' ELSE 'FALSE' END || E'
                END,
                circ_lib = (SELECT org_id FROM ' || org_map || E' AS m WHERE m.l_library = i.l_library)

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_item_mapping_base'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_item_mapping_base'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_unicorn_item_table_base(text) OWNER TO evergreen;

--
-- Name: map_unicorn_item_table_dynamic(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_unicorn_item_table_dynamic(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        field_map TEXT;
        item_table TEXT;
        sql TEXT;
        sql_update TEXT;
        sql_where1 TEXT := '';
        sql_where2 TEXT := '';
        sql_where3 TEXT := '';
        output RECORD;
    BEGIN
        SELECT migration_tools.unicorn_item_dynamic_field_map(migration_schema) INTO STRICT field_map;
        SELECT migration_tools.unicorn_item_table(migration_schema) INTO STRICT item_table;
        FOR output IN 
            EXECUTE 'SELECT * FROM ' || field_map || E' ORDER BY id;'
        LOOP
            sql_update := 'UPDATE ' || item_table || ' AS i SET ' || output.evergreen_field || E' = ' || quote_literal(output.evergreen_value) || '::' || output.evergreen_datatype || E' FROM ' || field_map || ' AS m WHERE ';
            sql_where1 := NULLIF(output.legacy_field1,'') || ' = ' || quote_literal( output.legacy_value1 ) || ' AND legacy_field1 = ' || quote_literal(output.legacy_field1) || ' AND legacy_value1 = ' || quote_literal(output.legacy_value1);
            sql_where2 := NULLIF(output.legacy_field2,'') || ' = ' || quote_literal( output.legacy_value2 ) || ' AND legacy_field2 = ' || quote_literal(output.legacy_field2) || ' AND legacy_value2 = ' || quote_literal(output.legacy_value2);
            sql_where3 := NULLIF(output.legacy_field3,'') || ' = ' || quote_literal( output.legacy_value3 ) || ' AND legacy_field3 = ' || quote_literal(output.legacy_field3) || ' AND legacy_value3 = ' || quote_literal(output.legacy_value3);
            sql := sql_update || COALESCE(sql_where1,'') || CASE WHEN sql_where1 <> '' AND sql_where2<> ''  THEN ' AND ' ELSE '' END || COALESCE(sql_where2,'') || CASE WHEN sql_where2 <> '' AND sql_where3 <> '' THEN ' AND ' ELSE '' END || COALESCE(sql_where3,'') || ';';
            --RAISE INFO 'sql = %', sql;
            PERFORM migration_tools.exec( $1, sql );
        END LOOP;
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_item_mapping_dynamic'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_item_mapping_dynamic'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_unicorn_item_table_dynamic(text) OWNER TO evergreen;

--
-- Name: map_unicorn_item_table_locations(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_unicorn_item_table_locations(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        org_map TEXT;
        home_location_map TEXT;
        item_table TEXT;
        sql TEXT;
        sql_update TEXT;
        sql_where1 TEXT := '';
        sql_where2 TEXT := '';
        sql_where3 TEXT := '';
        output RECORD;
    BEGIN
        SELECT migration_tools.unicorn_org_map(migration_schema) INTO STRICT org_map;
        SELECT migration_tools.unicorn_home_location_map(migration_schema) INTO STRICT home_location_map;
        SELECT migration_tools.unicorn_item_table(migration_schema) INTO STRICT item_table;
        FOR output IN 
            EXECUTE 'SELECT * FROM ' || home_location_map || E' ORDER BY id;'
        LOOP
            sql_update := 'UPDATE ' || item_table || ' AS i SET location = m.location FROM ' || home_location_map || ' AS m WHERE ';
            sql_where1 := NULLIF(output.legacy_field1,'') || ' = ' || quote_literal( output.legacy_value1 ) || ' AND legacy_field1 = ' || quote_literal(output.legacy_field1) || ' AND legacy_value1 = ' || quote_literal(output.legacy_value1);
            sql_where2 := NULLIF(output.legacy_field2,'') || ' = ' || quote_literal( output.legacy_value2 ) || ' AND legacy_field2 = ' || quote_literal(output.legacy_field2) || ' AND legacy_value2 = ' || quote_literal(output.legacy_value2);
            sql_where3 := NULLIF(output.legacy_field3,'') || ' = ' || quote_literal( output.legacy_value3 ) || ' AND legacy_field3 = ' || quote_literal(output.legacy_field3) || ' AND legacy_value3 = ' || quote_literal(output.legacy_value3);
            sql := sql_update || COALESCE(sql_where1,'') || CASE WHEN sql_where1 <> '' AND sql_where2<> ''  THEN ' AND ' ELSE '' END || COALESCE(sql_where2,'') || CASE WHEN sql_where2 <> '' AND sql_where3 <> '' THEN ' AND ' ELSE '' END || COALESCE(sql_where3,'') || ';';
            --RAISE INFO 'sql = %', sql;
            PERFORM migration_tools.exec( $1, sql );
        END LOOP;
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_item_mapping_locations'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_item_mapping_locations'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_unicorn_item_table_locations(text) OWNER TO evergreen;

--
-- Name: map_unicorn_item_table_volumes(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_unicorn_item_table_volumes(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        org_map TEXT;
        item_table TEXT;
        default_item_creator INTEGER;
        default_item_editor INTEGER;
        sql TEXT;
    BEGIN
        SELECT migration_tools.unicorn_org_map(migration_schema) INTO STRICT org_map;
        SELECT migration_tools.unicorn_item_table(migration_schema) INTO STRICT item_table;
        SELECT migration_tools.unicorn_default_item_creator(migration_schema) INTO STRICT default_item_creator;
        SELECT migration_tools.unicorn_default_item_editor(migration_schema) INTO STRICT default_item_editor;
        SELECT '

            INSERT INTO ' || migration_schema || E'.asset_call_number ( label, record, owning_lib, creator, editor ) SELECT DISTINCT
                BTRIM(l_call_number),
                _final_eg_bibid,
                (SELECT org_id FROM ' || org_map || E' AS m WHERE m.l_library = i.l_library),
                ' || quote_literal(default_item_creator) || E'::INTEGER,
                ' || quote_literal(default_item_editor) || E'::INTEGER
            FROM ' || item_table || E' AS i WHERE _final_eg_bibid <> -1 ORDER BY 1,2,3;

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        SELECT '

            UPDATE ' || item_table || E' AS i SET call_number = COALESCE(

                (SELECT c.id FROM ' || migration_schema || E'.asset_call_number AS c WHERE label = BTRIM(l_call_number) AND record = _final_eg_bibid AND owning_lib = (SELECT org_id FROM ' || org_map || E' AS m WHERE m.l_library = i.l_library)),

                -1 -- Precat

            );

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_item_mapping_volumes'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_item_mapping_volumes'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_unicorn_item_table_volumes(text) OWNER TO evergreen;

--
-- Name: map_unicorn_money(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_unicorn_money(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        org_map TEXT;
        item_table TEXT;
        patron_table TEXT;
        sql TEXT;
    BEGIN
        SELECT migration_tools.unicorn_org_map(migration_schema) INTO STRICT org_map;
        SELECT migration_tools.unicorn_item_table(migration_schema) INTO STRICT item_table;
        SELECT migration_tools.unicorn_patron_table(migration_schema) INTO STRICT patron_table;
        PERFORM migration_tools.exec( $1, sql );
        SELECT '

            UPDATE ' || migration_schema || E'.money_grocery_unicorn AS g SET

                usr = ( SELECT p.id FROM ' || patron_table || E' AS p WHERE p.l_user_id = g.l_user_id ),
                xact_start = l_bill_date::TIMESTAMP,
                note = ' || quote_literal(migration_schema) || E',
                billing_location = (SELECT org_id FROM ' || org_map || E' AS m WHERE l_library = l_billing_lib);

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );
        SELECT '

            INSERT INTO ' || migration_schema || E'.money_billing ( xact, amount, billing_type, note) SELECT
                id,
                CASE
                    WHEN l_bill_amt !~ E''^\\\\$?\\\\d*\\\\.\\\\d\\\\d$'' THEN 0.00
                    ELSE COALESCE( NULLIF( REPLACE(REPLACE(l_bill_amt,'' '',''''),''$'',''''), '''' ), ''0.00'' )::NUMERIC(6,2)
                END,
                ''Legacy '' || l_bill_reason,
                COALESCE(''Item: '' || NULLIF(l_item_id,''''), '''')
            FROM ' || migration_schema || E'.money_grocery_unicorn;

        ' INTO sql;
        PERFORM migration_tools.exec( $1, sql );

        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_money_mapping'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_money_mapping'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_unicorn_money(text) OWNER TO evergreen;

--
-- Name: map_unicorn_patron_profile(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_unicorn_patron_profile(text) RETURNS void
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        profile_map TEXT;
        patron_table TEXT;
        default_patron_profile INTEGER;
        sql TEXT;
        sql_update TEXT;
        sql_where1 TEXT := '';
        sql_where2 TEXT := '';
        sql_where3 TEXT := '';
        output RECORD;
    BEGIN
        SELECT migration_tools.unicorn_profile_map(migration_schema) INTO STRICT profile_map;
        SELECT migration_tools.unicorn_patron_table(migration_schema) INTO STRICT patron_table;
        SELECT migration_tools.unicorn_default_patron_profile(migration_schema) INTO STRICT default_patron_profile;
        FOR output IN 
            EXECUTE 'SELECT * FROM ' || profile_map || E' ORDER BY id;'
        LOOP
            sql_update := 'UPDATE ' || patron_table || ' AS u SET profile = perm_grp_id FROM ' || profile_map || ' AS m WHERE ';
            sql_where1 := NULLIF(output.legacy_field1,'') || ' = ' || quote_literal( output.legacy_value1 ) || ' AND legacy_field1 = ' || quote_literal(output.legacy_field1) || ' AND legacy_value1 = ' || quote_literal(output.legacy_value1);
            sql_where2 := NULLIF(output.legacy_field2,'') || ' = ' || quote_literal( output.legacy_value2 ) || ' AND legacy_field2 = ' || quote_literal(output.legacy_field2) || ' AND legacy_value2 = ' || quote_literal(output.legacy_value2);
            sql_where3 := NULLIF(output.legacy_field3,'') || ' = ' || quote_literal( output.legacy_value3 ) || ' AND legacy_field3 = ' || quote_literal(output.legacy_field3) || ' AND legacy_value3 = ' || quote_literal(output.legacy_value3);
            sql := sql_update || COALESCE(sql_where1,'') || CASE WHEN sql_where1 <> '' AND sql_where2<> ''  THEN ' AND ' ELSE '' END || COALESCE(sql_where2,'') || CASE WHEN sql_where2 <> '' AND sql_where3 <> '' THEN ' AND ' ELSE '' END || COALESCE(sql_where3,'') || ';';
            --RAISE INFO 'sql = %', sql;
            PERFORM migration_tools.exec( $1, sql );
        END LOOP;
        PERFORM migration_tools.exec( $1, 'UPDATE ' || patron_table || ' AS u SET profile = ' || quote_literal(default_patron_profile) || ' WHERE profile IS NULL;'  );
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_patron_mapping_profile'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_patron_mapping_profile'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_unicorn_patron_profile(text) OWNER TO evergreen;

--
-- Name: map_unicorn_patron_table_addresses(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_unicorn_patron_table_addresses(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        patron_table TEXT;
    BEGIN
        SELECT migration_tools.unicorn_patron_table(migration_schema) INTO STRICT patron_table;
        PERFORM migration_tools.exec( $1, '

            UPDATE ' || patron_table || E' AS u SET _address1 = migration_tools.unicorn_make_address(
                        ' || quote_literal(migration_schema) || E',
                        id, l_addr1_std_line1, l_addr1_std_line2, l_addr1_care_of,  l_addr1_std_city, l_addr1_std_state, l_addr1_std_zip, ''Legacy Address #1'' );

        ' );
        PERFORM migration_tools.exec( $1, '

            UPDATE ' || patron_table || E' AS u SET _address2 = migration_tools.unicorn_make_address(
                        ' || quote_literal(migration_schema) || E',
                        id, l_addr2_std_line1, l_addr2_std_line2, l_addr2_care_of,  l_addr2_std_city, l_addr2_std_state, l_addr2_std_zip, ''Legacy Address #2'' );

        ' );
        PERFORM migration_tools.exec( $1, '

            UPDATE ' || patron_table || E' AS u SET _address3 = migration_tools.unicorn_make_address(
                        ' || quote_literal(migration_schema) || E',
                        id, l_addr3_std_line1, l_addr3_std_line2, l_addr3_care_of,  l_addr3_std_city, l_addr3_std_state, l_addr3_std_zip, ''Legacy Address #3'' );

        ' );
        PERFORM migration_tools.exec( $1, '

            UPDATE ' || patron_table || E' AS u SET 

                mailing_address = CASE
                    WHEN l_user_mailingaddr = ''1'' THEN _address1
                    WHEN l_user_mailingaddr = ''2'' THEN _address2
                    WHEN l_user_mailingaddr = ''3'' THEN _address3
                    ELSE COALESCE( _address1, _address2, _address3 )
                END;

        ' );
        PERFORM migration_tools.exec( $1, '

            UPDATE ' || patron_table || E' AS u SET billing_address = mailing_address;

        ' );
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_patron_mapping_addresses'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_patron_mapping_addresses'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_unicorn_patron_table_addresses(text) OWNER TO evergreen;

--
-- Name: map_unicorn_patron_table_base(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_unicorn_patron_table_base(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        org_map TEXT;
        patron_table TEXT;
        default_net_access_level INTEGER;
    BEGIN
        SELECT migration_tools.unicorn_org_map(migration_schema) INTO STRICT org_map;
        SELECT migration_tools.unicorn_patron_table(migration_schema) INTO STRICT patron_table;
        SELECT migration_tools.unicorn_default_net_access_level(migration_schema) INTO STRICT default_net_access_level;
        PERFORM migration_tools.exec( $1, '

            UPDATE ' || patron_table || E' AS u SET 

                passwd = l_user_pin,
                family_name = BTRIM( l_last_name ),
                first_given_name = BTRIM( l_first_name ),
                second_given_name = BTRIM( l_middle_name ),
                suffix = BTRIM( l_suffix_name ),
                prefix = BTRIM( l_prefix_name ),
                dob = NULLIF( NULLIF(l_birthdate, ''''), ''NEVER'' )::TIMESTAMP,
                create_date = COALESCE( NULLIF( NULLIF(l_user_priv_granted, ''''), ''NEVER'' ), now()::DATE::TEXT )::TIMESTAMP,
                expire_date = COALESCE( NULLIF( NULLIF(l_user_priv_expires, ''''), ''NEVER'' ), ''2030-01-01'' )::TIMESTAMP,
                day_phone = BTRIM(
                    COALESCE( NULLIF(l_addr1_workphone,'''') || '' '', '''' ) ||
                    COALESCE( NULLIF(l_addr1_dayphone,'''') || '' '', '''' ) ||
                    COALESCE( NULLIF(l_addr2_dayphone,'''') || '' '', '''' ) ||
                    COALESCE( NULLIF(l_addr3_dayphone,'''') || '' '', '''' ) 
                ),
                evening_phone = BTRIM(
                    COALESCE( NULLIF(l_addr1_phone,'''') || '' '', '''' ) ||
                    COALESCE( NULLIF(l_addr1_homephone,'''') || '' '', '''' ) ||
                    COALESCE( NULLIF(l_addr2_homephone,'''') || '' '', '''' ) ||
                    COALESCE( NULLIF(l_addr3_homephone,'''') || '' '', '''' ) 
                ),
                other_phone = BTRIM(
                    COALESCE( NULLIF(l_addr2_workphone,'''') || '' '', '''' ) ||
                    COALESCE( NULLIF(l_addr3_workphone,'''') || '' '', '''' ) ||
                    COALESCE( NULLIF(l_addr2_phone,'''') || '' '', '''' ) ||
                    COALESCE( NULLIF(l_addr3_phone,'''') || '' '', '''' ) ||
                    COALESCE( NULLIF(l_addr1_cellphone,'''') || '' '', '''' ) ||
                    COALESCE( NULLIF(l_addr2_cellphone,'''') || '' '', '''' ) ||
                    COALESCE( NULLIF(l_addr3_cellphone,'''') || '' '', '''' )
                ),
                email = BTRIM(
                    COALESCE(
                        NULLIF(l_addr1_email,''''),
                        NULLIF(l_addr2_email,''''),
                        NULLIF(l_addr3_email,''''),
                        ''''
                    )
                ),
                ident_type = 3,
                ident_value = BTRIM(
                    COALESCE(
                        NULLIF(l_license,''''),
                        NULLIF(l_user_id,''''),
                        ''''
                    )
                ),
                ident_type2 = CASE WHEN l_ssn <> '''' THEN 2 ELSE 3 END,
                ident_value2 = BTRIM(
                    COALESCE(
                        NULLIF(l_ssn,''''),
                        NULLIF(l_guardian,''''),
                        NULLIF(l_user_altid,''''),
                        ''''
                    )
                ),
                home_ou = (SELECT org_id FROM ' || org_map || E' AS m WHERE m.l_library = u.l_user_library),
                usrname = migration_tools.rebarcode( l_user_id, (SELECT patron_rebarcode_offset FROM ' || org_map || E' AS m WHERE m.l_library = u.l_user_library) ),
                alert_message = NULLIF(
                    BTRIM(
                        CASE WHEN l_user_profile = ''LOSTCARD'' THEN ''Legacy LOSTCARD user.  Check for duplicate account.  '' ELSE '''' END
                        || COALESCE( ''Legacy Comment: '' || NULLIF(l_comment,'''') || ''  '', '''' )
                        || COALESCE( ''Legacy Note: '' || NULLIF(l_note,'''') || ''  '', '''' )
                        -- || COALESCE( ''Legacy Staff Note: '' || NULLIF(l_staff_note,'''') || ''  '', '''' )
                        || COALESCE( ''Legacy WebCatPref Note: '' || NULLIF(l_webcatpref,'''') || ''  '', '''' )
                    ),
                    ''''
                ),
                net_access_level = ' || quote_literal(default_net_access_level) || E',
                active = COALESCE( NULLIF(l_user_profile,''''), '''' ) != ''LOSTCARD'';

        ' );
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_patron_mapping_base'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_patron_mapping_base'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_unicorn_patron_table_base(text) OWNER TO evergreen;

--
-- Name: map_unicorn_patron_table_cards(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION map_unicorn_patron_table_cards(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        patron_table TEXT;
    BEGIN
        SELECT migration_tools.unicorn_patron_table(migration_schema) INTO STRICT patron_table;
        PERFORM migration_tools.exec( $1, '

            SELECT  
                migration_tools.unicorn_make_card( ' || quote_literal(migration_schema) || ',id,l_user_id,l_userid_active <> ''f'')
            FROM ' || patron_table || ';

        ' );
        PERFORM migration_tools.exec( $1, '

						DROP TABLE IF EXISTS ' || migration_schema || '.barcodes_to_add;

        ' );
        PERFORM migration_tools.exec( $1, '

            CREATE TABLE ' || migration_schema || '.barcodes_to_add ( barcode TEXT );

        ' );
        PERFORM migration_tools.exec( $1, '

						CREATE INDEX ' || migration_schema || '_barcodes_to_add_idx ON ' || migration_schema || '.barcodes_to_add ( barcode );

        ' );
        PERFORM migration_tools.exec( $1, '

            INSERT INTO ' || migration_schema || '.barcodes_to_add 
                SELECT l_inactive_barcode1 FROM ' || patron_table || ' WHERE l_inactive_barcode1 <> '''' ORDER BY 1;

        ' );
        PERFORM migration_tools.exec( $1, '

            DELETE FROM ' || migration_schema || '.barcodes_to_add WHERE barcode IN (
                SELECT barcode FROM ' || migration_schema || '.actor_card);

        ' );
        PERFORM migration_tools.exec( $1, '

            SELECT  
                migration_tools.unicorn_make_card( ' || quote_literal(migration_schema) || ',u.id,u.l_inactive_barcode1,false)
            FROM ' || patron_table || ' u,
                 ' || migration_schema || '.barcodes_to_add ok
            WHERE u.l_inactive_barcode1 = ok.barcode;                  

        ' );
        PERFORM migration_tools.exec( $1, '

						DROP TABLE IF EXISTS ' || migration_schema || '.barcodes_to_add;

        ' );
        PERFORM migration_tools.exec( $1, '

            CREATE TABLE ' || migration_schema || '.barcodes_to_add ( barcode TEXT );

        ' );
        PERFORM migration_tools.exec( $1, '

						CREATE INDEX ' || migration_schema || '_barcodes_to_add_idx ON ' || migration_schema || '.barcodes_to_add ( barcode );

        ' );
        PERFORM migration_tools.exec( $1, '

            INSERT INTO ' || migration_schema || '.barcodes_to_add 
                SELECT l_inactive_barcode2 FROM ' || patron_table || ' WHERE l_inactive_barcode2 <> '''' ORDER BY 1;

        ' );
        PERFORM migration_tools.exec( $1, '

            DELETE FROM ' || migration_schema || '.barcodes_to_add WHERE barcode IN (
                SELECT barcode FROM ' || migration_schema || '.actor_card);

        ' );
        PERFORM migration_tools.exec( $1, '

            SELECT  
                migration_tools.unicorn_make_card( ' || quote_literal(migration_schema) || ',u.id,u.l_inactive_barcode2,false)
            FROM ' || patron_table || ' u,
                 ' || migration_schema || '.barcodes_to_add ok
            WHERE u.l_inactive_barcode2 = ok.barcode;                  

        ' );
        PERFORM migration_tools.exec( $1, '

            UPDATE ' || patron_table || E' AS u SET 

                card = (SELECT MIN(c.id) FROM ' || migration_schema || E'.actor_card AS c WHERE usr = u.id);

        ' );
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_patron_mapping_cards'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_patron_mapping_cards'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.map_unicorn_patron_table_cards(text) OWNER TO evergreen;

--
-- Name: name_parse_out_last_comma_prefix_first_middle_suffix(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION name_parse_out_last_comma_prefix_first_middle_suffix(text) RETURNS text[]
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
    DECLARE
        full_name TEXT := $1;
        temp TEXT;
        family_name TEXT := '';
        first_given_name TEXT := '';
        second_given_name TEXT := '';
        suffix TEXT := '';
        prefix TEXT := '';
    BEGIN
        temp := full_name;
        -- Use values, not structure, for prefix/suffix, unless we come up with a better idea
        IF temp ilike '%MR.%' THEN
            prefix := 'Mr.';
            temp := REGEXP_REPLACE( temp, E'MR\.\\s*', '', 'i' );
        END IF;
        IF temp ilike '%MRS.%' THEN
            prefix := 'Mrs.';
            temp := REGEXP_REPLACE( temp, E'MRS\.\\s*', '', 'i' );
        END IF;
        IF temp ilike '%MS.%' THEN
            prefix := 'Ms.';
            temp := REGEXP_REPLACE( temp, E'MS\.\\s*', '', 'i' );
        END IF;
        IF temp ilike '%DR.%' THEN
            prefix := 'Dr.';
            temp := REGEXP_REPLACE( temp, E'DR\.\\s*', '', 'i' );
        END IF;
        IF temp ilike '%JR%' THEN
            suffix := 'Jr.';
            temp := REGEXP_REPLACE( temp, E'JR\.?\\s*', '', 'i' );
        END IF;
        IF temp ilike '%JR,%' THEN
            suffix := 'Jr.';
            temp := REGEXP_REPLACE( temp, E'JR,\\s*', ',', 'i' );
        END IF;
        IF temp ilike '%SR%' THEN
            suffix := 'Sr.';
            temp := REGEXP_REPLACE( temp, E'SR\.?\\s*', '', 'i' );
        END IF;
        IF temp ilike '%SR,%' THEN
            suffix := 'Sr.';
            temp := REGEXP_REPLACE( temp, E'SR,\\s*', ',', 'i' );
        END IF;
        IF temp ~ E'\\sII$' THEN
            suffix := 'II';
            temp := REGEXP_REPLACE( temp, E'II$', '', 'i' );
        END IF;
        IF temp ~ E'\\sIII$' THEN
            suffix := 'III';
            temp := REGEXP_REPLACE( temp, E'III$', '', 'i' );
        END IF;
        IF temp ~ E'\\sIV$' THEN
            suffix := 'IV';
            temp := REGEXP_REPLACE( temp, E'IV$', '', 'i' );
        END IF;

        family_name := BTRIM( REGEXP_REPLACE(temp,E'^([^,]*)\\s*,.*$',E'\\1') );
        first_given_name := BTRIM( CASE WHEN temp ~ ',' THEN REGEXP_REPLACE(temp,E'^[^,]*\\s*,\\s*([^,\\s]*)\\s*.*$',E'\\1') ELSE 'N/A' END );
        second_given_name := BTRIM( CASE WHEN temp ~ ',' THEN REGEXP_REPLACE(temp,E'^[^,]*\\s*,\\s*[^,\\s]*\\s*(.*)$',E'\\1') ELSE ''  END );

        RETURN ARRAY[ family_name, prefix, first_given_name, second_given_name, suffix ];
    END;
$_$;


ALTER FUNCTION migration_tools.name_parse_out_last_comma_prefix_first_middle_suffix(text) OWNER TO evergreen;

--
-- Name: pop_rfr(); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION pop_rfr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    ind_data        metabib.field_entry_template%ROWTYPE;
    old_mr          INT;
    tmp_mr          metabib.metarecord%ROWTYPE;
    source_count    INT;
    deleted_mrs     INT[];
    uris            TEXT[];
    uri_xml         TEXT;
    uri_label       TEXT;
    uri_href        TEXT;
    uri_use         TEXT;
    uri_owner       TEXT;
    uri_owner_id    INT;
    uri_id          INT;
    uri_cn_id       INT;
    uri_map_id      INT;

    ind_vector      TSVECTOR;

    fclass          RECORD;
BEGIN

    -- Shove the flattened MARC in
    INSERT INTO metabib.full_rec (record, tag, ind1, ind2, subfield, value)
        SELECT record, tag, ind1, ind2, subfield, value FROM biblio.flatten_marc( NEW.id );

    RETURN NEW;

END;
$$;


ALTER FUNCTION migration_tools.pop_rfr() OWNER TO evergreen;

--
-- Name: production_tables(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION production_tables(text) RETURNS text[]
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output  RECORD;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT string_to_array(value,'','') AS tables FROM ' || migration_schema || '.config WHERE key = ''production_tables'';'
        LOOP
            RETURN output.tables;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.production_tables(text) OWNER TO evergreen;

--
-- Name: rebarcode(text, bigint); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION rebarcode(o text, t bigint) RETURNS text
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
    DECLARE
        n TEXT := o;
    BEGIN
        IF o ~ E'^\\d+$' AND o !~ E'^0' AND length(o) < 19 THEN -- for reference, the max value for a bigint is 9223372036854775807.  May also want to consider the case where folks want to add prefixes to non-numeric barcodes
            IF o::BIGINT < t THEN
                n = o::BIGINT + t;
            END IF;
        END IF;

        RETURN n;
    END;
$_$;


ALTER FUNCTION migration_tools.rebarcode(o text, t bigint) OWNER TO evergreen;

--
-- Name: rec_descriptor(integer); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION rec_descriptor(breid integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    ind_data        metabib.field_entry_template%ROWTYPE;
    old_mr          INT;
    tmp_mr          metabib.metarecord%ROWTYPE;
    source_count    INT;
    deleted_mrs     INT[];
    uris            TEXT[];
    uri_xml         TEXT;
    uri_label       TEXT;
    uri_href        TEXT;
    uri_use         TEXT;
    uri_owner       TEXT;
    uri_owner_id    INT;
    uri_id          INT;
    uri_cn_id       INT;
    uri_map_id      INT;

    ind_vector      TSVECTOR;

    fclass          RECORD;
BEGIN

    -- Then, the rec_descriptor
    INSERT INTO metabib.rec_descriptor (record, item_type, item_form, bib_level, control_type, enc_level, audience, lit_form, type_mat, cat_form, pub_status, item_lang, vr_format, date1, date2)
        SELECT  breid,
                biblio.marc21_extract_fixed_field( breid, 'Type' ),
                biblio.marc21_extract_fixed_field( breid, 'Form' ),
                biblio.marc21_extract_fixed_field( breid, 'BLvl' ),
                biblio.marc21_extract_fixed_field( breid, 'Ctrl' ),
                biblio.marc21_extract_fixed_field( breid, 'ELvl' ),
                biblio.marc21_extract_fixed_field( breid, 'Audn' ),
                biblio.marc21_extract_fixed_field( breid, 'LitF' ),
                biblio.marc21_extract_fixed_field( breid, 'TMat' ),
                biblio.marc21_extract_fixed_field( breid, 'Desc' ),
                biblio.marc21_extract_fixed_field( breid, 'DtSt' ),
                biblio.marc21_extract_fixed_field( breid, 'Lang' ),
                (   SELECT  v.value
                      FROM  biblio.marc21_physical_characteristics( breid) p
                            JOIN config.marc21_physical_characteristic_subfield_map s ON (s.id = p.subfield)
                            JOIN config.marc21_physical_characteristic_value_map v ON (v.id = p.value)
                      WHERE p.ptype = 'v' AND s.subfield = 'e'    ),
                biblio.marc21_extract_fixed_field( breid, 'Date1'),
                biblio.marc21_extract_fixed_field( breid, 'Date2');

 

END;
$$;


ALTER FUNCTION migration_tools.rec_descriptor(breid integer) OWNER TO evergreen;

--
-- Name: refresh_opac_visible_copies(); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION refresh_opac_visible_copies() RETURNS void
    LANGUAGE plpgsql
    AS $$

BEGIN	

	DELETE FROM asset.opac_visible_copies;

	INSERT INTO asset.opac_visible_copies (id, circ_lib, record)
		SELECT DISTINCT
			cp.id, cp.circ_lib, cn.record
		FROM
			asset.copy cp
			JOIN asset.call_number cn ON (cn.id = cp.call_number)
			JOIN actor.org_unit a ON (cp.circ_lib = a.id)
			JOIN asset.copy_location cl ON (cp.location = cl.id)
			JOIN config.copy_status cs ON (cp.status = cs.id)
			JOIN biblio.record_entry b ON (cn.record = b.id)
		WHERE 
			NOT cp.deleted AND
			NOT cn.deleted AND
			NOT b.deleted AND
			cs.opac_visible AND
			cl.opac_visible AND
			cp.opac_visible AND
			a.opac_visible AND
			cp.id NOT IN (SELECT id FROM asset.opac_visible_copies);

END;

$$;


ALTER FUNCTION migration_tools.refresh_opac_visible_copies() OWNER TO evergreen;

--
-- Name: restore_index(text, text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION restore_index(_table_schema text, _table_name text, _index_name text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $$
DECLARE
    restore TEXT;
BEGIN
    SELECT restore_command INTO restore
        FROM migration_tools.db_object_stash
        WHERE schema_name = _table_schema
        AND   table_name = _table_name
        AND   object_name = _index_name
        AND   object_type = 'index';
    EXECUTE restore;
    DELETE FROM migration_tools.db_object_stash
        WHERE schema_name = _table_schema
        AND   table_name = _table_name
        AND   object_name = _index_name
        AND   object_type = 'index';
END;
$$;


ALTER FUNCTION migration_tools.restore_index(_table_schema text, _table_name text, _index_name text) OWNER TO evergreen;

--
-- Name: set_008(text, integer, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION set_008(text, integer, text) RETURNS text
    LANGUAGE plperlu STABLE
    AS $_$
  my ($marcxml, $pos, $value) = @_;

  use MARC::Record;
  use MARC::File::XML;

  my $xml = $marcxml;
  eval {
    my $marc = MARC::Record->new_from_xml($marcxml, 'UTF-8');
    my $f008 = $marc->field('008');

    if ($f008) {
       my $field = $f008->data();
       substr($field, $pos, 1) = $value;
       $f008->update($field);
       $xml = $marc->as_xml_record;
       $xml =~ s/^<\?.+?\?>$//mo;
       $xml =~ s/\n//sgo;
       $xml =~ s/>\s+</></sgo;
    }
  };
  return $xml;
$_$;


ALTER FUNCTION migration_tools.set_008(text, integer, text) OWNER TO evergreen;

--
-- Name: set_leader(text, integer, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION set_leader(text, integer, text) RETURNS text
    LANGUAGE plperlu STABLE
    AS $_$
  my ($marcxml, $pos, $value) = @_;

  use MARC::Record;
  use MARC::File::XML;

  my $xml = $marcxml;
  eval {
    my $marc = MARC::Record->new_from_xml($marcxml, 'UTF-8');
    my $leader = $marc->leader();
    substr($leader, $pos, 1) = $value;
    $marc->leader($leader);
    $xml = $marc->as_xml_record;
    $xml =~ s/^<\?.+?\?>$//mo;
    $xml =~ s/\n//sgo;
    $xml =~ s/>\s+</></sgo;
  };
  return $xml;
$_$;


ALTER FUNCTION migration_tools.set_leader(text, integer, text) OWNER TO evergreen;

--
-- Name: stage_not_applicable_asset_stat_cats(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION stage_not_applicable_asset_stat_cats(schemaname text) RETURNS void
    LANGUAGE plpgsql
    AS $$

-- USAGE: Make sure the stat_cat and stat_cat_entry tables are populated, including exactly one 'Not Applicable' entry per stat cat.
--        Then SELECT migration_tools.stage_not_applicable_asset_stat_cats('m_foo');

-- TODO: Make a variant that will go directly to production tables -- which would be useful for retrofixing the absence of N/A cats.
-- TODO: Add a similar tool for actor stat cats, which behave differently.

DECLARE
	c                    TEXT := schemaname || '.asset_copy_legacy';
	sc									 TEXT := schemaname || '.asset_stat_cat';
	sce									 TEXT := schemaname || '.asset_stat_cat_entry';
	scecm								 TEXT := schemaname || '.asset_stat_cat_entry_copy_map';
	stat_cat						 INT;
  stat_cat_entry       INT;
  
BEGIN

  FOR stat_cat IN EXECUTE ('SELECT id FROM ' || sc) LOOP

		EXECUTE ('SELECT id FROM ' || sce || ' WHERE stat_cat = ' || stat_cat || E' AND value = \'Not Applicable\';') INTO stat_cat_entry;

		EXECUTE ('INSERT INTO ' || scecm || ' (owning_copy, stat_cat, stat_cat_entry)
							SELECT c.id, ' || stat_cat || ', ' || stat_cat_entry || ' FROM ' || c || ' c WHERE c.id NOT IN
							(SELECT owning_copy FROM ' || scecm || ' WHERE stat_cat = ' || stat_cat || ');');

  END LOOP;

  RETURN;
END;

$$;


ALTER FUNCTION migration_tools.stage_not_applicable_asset_stat_cats(schemaname text) OWNER TO evergreen;

--
-- Name: stash_index(text, text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION stash_index(_table_schema text, _table_name text, _index_name text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $$
DECLARE
    restore TEXT;
BEGIN
    SELECT indexdef INTO restore
        FROM pg_indexes
        WHERE schemaname = _table_schema
        AND   tablename = _table_name
        AND   indexname = _index_name;
    IF restore IS NULL
    THEN
       RAISE EXCEPTION 'no restore command for %', _index_name;
    END IF;
    INSERT INTO migration_tools.db_object_stash (schema_name, table_name, object_name, object_type, restore_command)
        VALUES(_table_schema, _table_name, _index_name, 'index', restore);
    EXECUTE 'DROP INDEX ' || _table_schema || '.' || _index_name;
END;
$$;


ALTER FUNCTION migration_tools.stash_index(_table_schema text, _table_name text, _index_name text) OWNER TO evergreen;

--
-- Name: unaccent_string(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unaccent_string(text) RETURNS text
    LANGUAGE plperl
    AS $_$
my ($input_string) = @_;
$input_string =~ s/[âãäåāăą]/a/g;
$input_string =~ s/[ÁÂÃÄÅĀĂĄ]/A/g;
$input_string =~ s/[èééêëēĕėęě]/e/g;
$input_string =~ s/[ĒĔĖĘĚ]/E/g;
$input_string =~ s/[ìíîïìĩīĭ]/i/g;
$input_string =~ s/[ÌÍÎÏÌĨĪĬ]/I/g;
$input_string =~ s/[óôõöōŏő]/o/g;
$input_string =~ s/[ÒÓÔÕÖŌŎŐ]/O/g;
$input_string =~ s/[ùúûüũūŭů]/u/g;
$input_string =~ s/[ÙÚÛÜŨŪŬŮ]/U/g;
return $input_string;
$_$;


ALTER FUNCTION migration_tools.unaccent_string(text) OWNER TO evergreen;

--
-- Name: unicorn_actor_stat_cat_entry_map(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_actor_stat_cat_entry_map(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''actor_stat_cat_entry_map'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_actor_stat_cat_entry_map(text) OWNER TO evergreen;

--
-- Name: unicorn_actor_stat_cat_map(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_actor_stat_cat_map(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''actor_stat_cat_map'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_actor_stat_cat_map(text) OWNER TO evergreen;

--
-- Name: unicorn_card_collisions_table(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_card_collisions_table(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''card_collisions'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_card_collisions_table(text) OWNER TO evergreen;

--
-- Name: unicorn_circ_table(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_circ_table(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''circ_table'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_circ_table(text) OWNER TO evergreen;

--
-- Name: unicorn_create_circ_table(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_create_circ_table(text) RETURNS void
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
    BEGIN
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.action_circulation_unicorn (
            l_form TEXT NOT NULL CHECK ( l_form = ''LDCHARGE'' ),
            l_user_id TEXT,
            l_item_id TEXT,
            l_charging_lib TEXT,
            l_date_charged TEXT,
            l_date_due TEXT,
            l_date_claim_returned TEXT
        ) INHERITS ( ' || migration_schema || '.action_circulation);' ); 
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_create_circ_table(text) OWNER TO evergreen;

--
-- Name: unicorn_create_hold_table(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_create_hold_table(text) RETURNS void
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
    BEGIN
				PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.action_hold_request_unicorn;' );
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.action_hold_request_unicorn (
            _bib_id BIGINT,
            _item_barcode TEXT,
            _user_barcode TEXT,
            l_cat_key integer, 
            l_call_key integer, 
            l_item_key integer, 
            l_hold_key integer, 
            l_user_key integer, 
            l_hold_type text, 
            l_item_available text, 
            l_hold_date text,
						l_pickup_lib text 
        ) INHERITS ( ' || migration_schema || '.action_hold_request);' ); 
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_create_hold_table(text) OWNER TO evergreen;

--
-- Name: unicorn_create_item_table(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_create_item_table(text) RETURNS void
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
    BEGIN
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.asset_copy_unicorn (
            _orig_eg_bibid BIGINT,
            _final_eg_bibid BIGINT,
            l_library TEXT,
            l_barcode TEXT,
            l_location_current TEXT,
            l_location_home TEXT,
            l_call_number TEXT,
            l_item_type TEXT,
            l_acq_date TEXT,
            l_price TEXT,
            l_circ_flag TEXT,
            l_total_charges TEXT,
            l_cat1 TEXT,
            l_cat2 TEXT
        ) INHERITS ( ' || migration_schema || '.asset_copy);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_item_unicorn_orig_eg_bibid ON ' || migration_schema || '.asset_copy_unicorn ( _orig_eg_bibid );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_item_unicorn_final_eg_bibid ON ' || migration_schema || '.asset_copy_unicorn ( _final_eg_bibid );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_item_unicorn_barcode ON ' || migration_schema || '.asset_copy_unicorn ( l_barcode );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_item_unicorn_location_home ON ' || migration_schema || '.asset_copy_unicorn ( l_location_home );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_item_unicorn_location_current ON ' || migration_schema || '.asset_copy_unicorn ( l_location_current );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_item_unicorn_library ON ' || migration_schema || '.asset_copy_unicorn ( l_library );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_item_unicorn_item_type ON ' || migration_schema || '.asset_copy_unicorn ( l_item_type );' );
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_create_item_table(text) OWNER TO evergreen;

--
-- Name: unicorn_create_money_table(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_create_money_table(text) RETURNS void
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
    BEGIN
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.money_grocery_unicorn;' );
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.money_grocery_unicorn (
            l_form TEXT NOT NULL CHECK ( l_form = ''LDBILL'' ),
            l_user_id TEXT,
            l_item_id TEXT,
            l_billing_lib TEXT,
            l_bill_date TEXT,
            l_bill_amt TEXT,
            l_bill_reason TEXT
        ) INHERITS ( ' || migration_schema || '.money_grocery);' ); 
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_create_money_table(text) OWNER TO evergreen;

--
-- Name: unicorn_create_patron_table(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_create_patron_table(text) RETURNS void
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
    BEGIN
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.actor_usr_unicorn;' );
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.actor_usr_unicorn (
            l_user_id TEXT,
            l_user_altid TEXT,
            l_user_pin TEXT,
            l_user_profile TEXT,
            l_user_status TEXT,
            l_user_library TEXT,
            l_user_priv_granted TEXT,
            l_user_priv_expires TEXT,
            l_user_mailingaddr TEXT,
            l_birthdate TEXT,
            l_prefix_name TEXT,
            l_last_name TEXT,
            l_first_name TEXT,
            l_middle_name TEXT,
            l_suffix_name TEXT,
            l_note TEXT,
            l_note1 TEXT,
            l_patron TEXT,
            l_comment TEXT,
            l_staff TEXT,
            l_webcatpref TEXT,
            l_user_category1 TEXT,
            l_user_category2 TEXT,
            l_user_category3 TEXT,
            l_user_category4 TEXT,
            l_dept TEXT,
            l_guardian TEXT,
            l_license TEXT,
            l_ssn TEXT,
            l_misc TEXT,
            l_aup TEXT,
            l_photo TEXT,
            l_notify_via TEXT,
            l_user_claims_ret TEXT,
            l_user_environment TEXT,
            l_user_department TEXT,
            l_ums_id TEXT,
            l_user_last_activity TEXT,
            l_placcard TEXT,
            l_user_email TEXT,
            l_addr1_std_line1 TEXT,
            l_addr1_std_line2 TEXT,
            l_addr1_std_city TEXT,
            l_addr1_std_state TEXT,
            l_addr1_std_zip TEXT,
            l_addr1_country TEXT,
            l_addr1_county TEXT,
            l_addr1_township TEXT,
            l_addr1_room TEXT,
            l_addr1_company TEXT,
            l_addr1_office TEXT,
            l_addr1_phone TEXT,
            l_addr1_dayphone TEXT,
            l_addr1_homephone TEXT,
            l_addr1_workphone TEXT,
            l_addr1_cellphone TEXT,
            l_addr1_fax TEXT,
            l_addr1_email TEXT,
            l_addr1_location TEXT,
            l_addr1_usefor TEXT,
            l_addr1_care_of TEXT,
            l_addr1_known_bad TEXT,
            l_addr1_ums_addrid TEXT,
            l_addr2_std_line1 TEXT,
            l_addr2_std_line2 TEXT,
            l_addr2_std_city TEXT,
            l_addr2_std_state TEXT,
            l_addr2_std_zip TEXT,
            l_addr2_country TEXT,
            l_addr2_county TEXT,
            l_addr2_township TEXT,
            l_addr2_room TEXT,
            l_addr2_company TEXT,
            l_addr2_office TEXT,
            l_addr2_phone TEXT,
            l_addr2_dayphone TEXT,
            l_addr2_homephone TEXT,
            l_addr2_workphone TEXT,
            l_addr2_cellphone TEXT,
            l_addr2_fax TEXT,
            l_addr2_email TEXT,
            l_addr2_location TEXT,
            l_addr2_usefor TEXT,
            l_addr2_care_of TEXT,
            l_addr2_known_bad TEXT,
            l_addr2_ums_addrid TEXT,
            l_addr3_std_line1 TEXT,
            l_addr3_std_line2 TEXT,
            l_addr3_std_city TEXT,
            l_addr3_std_state TEXT,
            l_addr3_std_zip TEXT,
            l_addr3_country TEXT,
            l_addr3_county TEXT,
            l_addr3_township TEXT,
            l_addr3_room TEXT,
            l_addr3_company TEXT,
            l_addr3_office TEXT,
            l_addr3_phone TEXT,
            l_addr3_dayphone TEXT,
            l_addr3_homephone TEXT,
            l_addr3_workphone TEXT,
            l_addr3_cellphone TEXT,
            l_addr3_fax TEXT,
            l_addr3_email TEXT,
            l_addr3_location TEXT,
            l_addr3_usefor TEXT,
            l_addr3_care_of TEXT,
            l_addr3_known_bad TEXT,
            l_addr3_ums_addrid TEXT,
            l_identific TEXT,
            l_noempl TEXT,
            l_profession TEXT,
            l_program TEXT,
            l_represent TEXT,
            l_userid_active TEXT,
            l_inactive_barcode1 TEXT,
            l_inactive_barcode2 TEXT,
            _address1 INTEGER,
            _address2 INTEGER,
            _address3 INTEGER
        ) INHERITS ( ' || migration_schema || '.actor_usr);' ); 
        -- watch out for MARC8 with these files
        -- \COPY foo.actor_usr_unicorn ( l_user_id, l_user_altid, l_user_pin, l_user_profile, l_user_status, l_user_library, l_user_priv_granted, l_user_priv_expires, l_user_mailingaddr, l_birthdate, l_last_name, l_first_name, l_middle_name, l_suffix_name, l_note, l_note1, l_patron, l_comment, l_staff, l_webcatpref, l_user_category1, l_user_category2, l_user_category3, l_user_category4, l_dept, l_guardian, l_license, l_ssn, l_misc, l_aup, l_photo, l_notify_via, l_user_claims_ret, l_user_environment, l_user_department, l_ums_id, l_user_last_activity, l_placcard, l_user_email, l_addr1_std_line1, l_addr1_std_line2, l_addr1_std_city, l_addr1_std_state, l_addr1_std_zip, l_addr1_country, l_addr1_township, l_addr1_room, l_addr1_company, l_addr1_office, l_addr1_phone, l_addr1_dayphone, l_addr1_homephone, l_addr1_workphone, l_addr1_cellphone, l_addr1_email, l_addr1_location, l_addr1_usefor, l_addr1_care_of, l_addr1_known_bad, l_addr1_ums_addrid, l_addr2_std_line1, l_addr2_std_line2, l_addr2_std_city, l_addr2_std_state, l_addr2_std_zip, l_addr2_country, l_addr2_township, l_addr2_room, l_addr2_company, l_addr2_office, l_addr2_phone, l_addr2_dayphone, l_addr2_homephone, l_addr2_workphone, l_addr2_cellphone, l_addr2_email, l_addr2_location, l_addr2_usefor, l_addr2_care_of, l_addr2_known_bad, l_addr2_ums_addrid, l_addr3_std_line1, l_addr3_std_line2, l_addr3_std_city, l_addr3_std_state, l_addr3_std_zip, l_addr3_country, l_addr3_township, l_addr3_room, l_addr3_company, l_addr3_office, l_addr3_phone, l_addr3_dayphone, l_addr3_homephone, l_addr3_workphone, l_addr3_cellphone, l_addr3_email, l_addr3_location, l_addr3_usefor, l_addr3_care_of, l_addr3_known_bad, l_addr3_ums_addrid, l_identific, l_noempl, l_profession, l_program, l_represent, l_userid_active, l_inactive_barcode1, l_inactive_barcode2 ) FROM 'users.tabbed.txt'
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_create_patron_table(text) OWNER TO evergreen;

--
-- Name: unicorn_default_item_age_protect(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_default_item_age_protect(text) RETURNS integer
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output INTEGER;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT value::INTEGER FROM ' || migration_schema || '.config WHERE key = ''default_item_age_protect'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_default_item_age_protect(text) OWNER TO evergreen;

--
-- Name: unicorn_default_item_circulate_flag(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_default_item_circulate_flag(text) RETURNS boolean
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output BOOLEAN;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT value = ''t'' FROM ' || migration_schema || '.config WHERE key = ''default_item_circulate_flag'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_default_item_circulate_flag(text) OWNER TO evergreen;

--
-- Name: unicorn_default_item_creator(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_default_item_creator(text) RETURNS integer
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output INTEGER;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT value::INTEGER FROM ' || migration_schema || '.config WHERE key = ''default_item_creator'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_default_item_creator(text) OWNER TO evergreen;

--
-- Name: unicorn_default_item_editor(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_default_item_editor(text) RETURNS integer
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output INTEGER;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT value::INTEGER FROM ' || migration_schema || '.config WHERE key = ''default_item_editor'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_default_item_editor(text) OWNER TO evergreen;

--
-- Name: unicorn_default_item_fine_level(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_default_item_fine_level(text) RETURNS integer
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output INTEGER;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT value::INTEGER FROM ' || migration_schema || '.config WHERE key = ''default_item_fine_level'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_default_item_fine_level(text) OWNER TO evergreen;

--
-- Name: unicorn_default_item_holdable_flag(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_default_item_holdable_flag(text) RETURNS boolean
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output BOOLEAN;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT value = ''t'' FROM ' || migration_schema || '.config WHERE key = ''default_item_holdable_flag'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_default_item_holdable_flag(text) OWNER TO evergreen;

--
-- Name: unicorn_default_item_loan_duration(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_default_item_loan_duration(text) RETURNS integer
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output INTEGER;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT value::INTEGER FROM ' || migration_schema || '.config WHERE key = ''default_item_loan_duration'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_default_item_loan_duration(text) OWNER TO evergreen;

--
-- Name: unicorn_default_item_status(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_default_item_status(text) RETURNS integer
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output INTEGER;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT value::INTEGER FROM ' || migration_schema || '.config WHERE key = ''default_item_status'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_default_item_status(text) OWNER TO evergreen;

--
-- Name: unicorn_default_net_access_level(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_default_net_access_level(text) RETURNS integer
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output INTEGER;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT value::INTEGER FROM ' || migration_schema || '.config WHERE key = ''default_net_access_level'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_default_net_access_level(text) OWNER TO evergreen;

--
-- Name: unicorn_default_patron_profile(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_default_patron_profile(text) RETURNS integer
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output INTEGER;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT value::INTEGER FROM ' || migration_schema || '.config WHERE key = ''default_patron_profile'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_default_patron_profile(text) OWNER TO evergreen;

--
-- Name: unicorn_default_selection_depth(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_default_selection_depth(text) RETURNS integer
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output INTEGER;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT value::INTEGER FROM ' || migration_schema || '.config WHERE key = ''default_selection_depth'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_default_selection_depth(text) OWNER TO evergreen;

--
-- Name: unicorn_hold_table(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_hold_table(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''hold_table'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_hold_table(text) OWNER TO evergreen;

--
-- Name: unicorn_home_location_map(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_home_location_map(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''home_location_map'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_home_location_map(text) OWNER TO evergreen;

--
-- Name: unicorn_init(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_init(text) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
    BEGIN
        PERFORM migration_tools.exec( $1, 'DELETE FROM ' || migration_schema || '.config WHERE key IN ( ''ils_type'', ''item_table'', ''patron_table'', ''circ_table'', ''hold_table'', ''money_table'', ''org_map'', ''profile_map'', ''item_dynamic_field_map'', ''default_patron_profile'', ''default_net_access_level'', ''actor_stat_cat_map'', ''actor_stat_cat_entry_map'', ''default_item_status'', ''default_item_holdable_flag'', ''default_item_circulate_flag'', ''default_item_creator'', ''default_item_editor'', ''default_item_loan_duration'', ''default_item_fine_level'', ''default_item_age_protect'', ''default_selection_depth'' );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''ils_type'', ''Unicorn'' );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''item_table'', ''asset_copy_unicorn'' );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''patron_table'', ''actor_usr_unicorn'' );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''circ_table'', ''action_circulation_unicorn'' );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''hold_table'', ''action_hold_request_unicorn'' );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''money_table'', ''money_grocery_unicorn'' );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''default_patron_profile'', ''1'' );' ); -- Users
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''default_net_access_level'', ''2'' );' ); -- Unrestricted
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''default_item_status'', ''0'' );' ); -- Available
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''default_item_holdable_flag'', ''t'' );' ); -- true
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''default_item_circulate_flag'', ''t'' );' ); -- true
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''default_item_creator'', ''1'' );' ); -- Admin
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''default_item_editor'', ''1'' );' ); -- Admin
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''default_item_fine_level'', ''1'' );' ); -- Normal
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''default_item_loan_duration'', ''1'' );' ); -- Normal
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''default_item_age_protect'', NULL );' ); -- none
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''default_selection_depth'', ''0'' );' ); -- Consortium
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.org_map;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.org_map ( 
            id SERIAL,
            org_id INTEGER, 
            transcribed_shortname TEXT,
            l_library TEXT UNIQUE NOT NULL, 
            patron_rebarcode_offset BIGINT NOT NULL DEFAULT 0, 
            item_rebarcode_offset BIGINT NOT NULL DEFAULT 0,
            default_circ_staff INTEGER NOT NULL DEFAULT 1 
        );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''org_map'', ''org_map'' );' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.profile_map;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || E'.profile_map ( 
            id SERIAL,
            perm_grp_id INTEGER,
            transcribed_perm_group TEXT,
            legacy_field1 TEXT,
            legacy_value1 TEXT,
            legacy_field2 TEXT,
            legacy_value2 TEXT,
            legacy_field3 TEXT,
            legacy_value3 TEXT
        );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''profile_map'', ''profile_map'' );' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.home_location_map;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || E'.home_location_map ( 
            id SERIAL,
            location INTEGER,
            holdable BOOLEAN NOT NULL DEFAULT TRUE,
            hold_verify BOOLEAN NOT NULL DEFAULT FALSE,
            opac_visible BOOLEAN NOT NULL DEFAULT TRUE,
            circulate BOOLEAN NOT NULL DEFAULT TRUE,
            transcribed_location TEXT,
            legacy_field1 TEXT,
            legacy_value1 TEXT,
            legacy_field2 TEXT,
            legacy_value2 TEXT,
            legacy_field3 TEXT,
            legacy_value3 TEXT
        );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_home_location_lf1_idx ON ' || migration_schema || '.home_location_map (legacy_field1,legacy_value1);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_home_location_lf2_idx ON ' || migration_schema || '.home_location_map (legacy_field2,legacy_value2);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_home_location_lf3_idx ON ' || migration_schema || '.home_location_map (legacy_field3,legacy_value3);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_home_location_loc_idx ON ' || migration_schema || '.home_location_map (transcribed_location);' ); 
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''home_location_map'', ''home_location_map'' );' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.item_dynamic_field_map;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || E'.item_dynamic_field_map ( 
            id SERIAL,
            evergreen_field TEXT,
            evergreen_value TEXT,
            evergreen_datatype TEXT,
            legacy_field1 TEXT,
            legacy_value1 TEXT,
            legacy_field2 TEXT,
            legacy_value2 TEXT,
            legacy_field3 TEXT,
            legacy_value3 TEXT
        );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_unicorn_item_dynamic_lf1_idx ON ' || migration_schema || '.item_dynamic_field_map (legacy_field1,legacy_value1);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_unicorn_item_dynamic_lf2_idx ON ' || migration_schema || '.item_dynamic_field_map (legacy_field2,legacy_value2);' ); 
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_unicorn_item_dynamic_lf3_idx ON ' || migration_schema || '.item_dynamic_field_map (legacy_field3,legacy_value3);' ); 
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''item_dynamic_field_map'', ''item_dynamic_field_map'' );' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.card_collisions;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.card_collisions ( 
            id SERIAL,
            reason TEXT,
            usr INTEGER,
            barcode TEXT
        );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''card_collisions'', ''card_collisions'' );' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.actor_stat_cat_map;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.actor_stat_cat_map ( 
            id SERIAL,
            stat_cat INTEGER,
            org_id INTEGER,
            l_library TEXT,
            name TEXT
        );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''actor_stat_cat_map'', ''actor_stat_cat_map'' );' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.actor_stat_cat_entry_map;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.actor_stat_cat_entry_map ( 
            id SERIAL,
            stat_cat INTEGER,
            stat_cat_entry INTEGER,
            org_id INTEGER,
            l_library TEXT,
            name TEXT,
            legacy_field1 TEXT,
            legacy_value1 TEXT,
            entry TEXT
        );' );
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''actor_stat_cat_entry_map'', ''actor_stat_cat_entry_map'' );' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.item_key_barcode_map;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.item_key_barcode_map ( 
            key1 text,
            key2 text,
            key3 text,
            barcode text
        );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_item_key_barcode_map_idx ON ' || migration_schema || '.item_key_barcode_map (key1,key2,key3);' ); 
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''item_key_barcode_map'', ''item_key_barcode_map'' );' );
        PERFORM migration_tools.exec( $1, 'DROP TABLE IF EXISTS ' || migration_schema || '.user_key_barcode_map;' );  
        PERFORM migration_tools.exec( $1, 'CREATE TABLE ' || migration_schema || '.user_key_barcode_map ( 
            key text,
            barcode text
        );' );
        PERFORM migration_tools.exec( $1, 'CREATE INDEX ' || migration_schema || '_user_key_barcode_map_idx ON ' || migration_schema || '.user_key_barcode_map (key);' ); 
        PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''user_key_barcode_map'', ''user_key_barcode_map'' );' );
        BEGIN
            PERFORM migration_tools.exec( $1, 'INSERT INTO ' || migration_schema || '.config (key,value) VALUES ( ''last_unicorn_init'', now() );' );
        EXCEPTION
            WHEN OTHERS THEN PERFORM migration_tools.exec( $1, 'UPDATE ' || migration_schema || '.config SET value = now() WHERE key = ''last_unicorn_init'';' );
        END;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_init(text) OWNER TO evergreen;

--
-- Name: unicorn_item_dynamic_field_map(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_item_dynamic_field_map(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''item_dynamic_field_map'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_item_dynamic_field_map(text) OWNER TO evergreen;

--
-- Name: unicorn_item_key_barcode_map(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_item_key_barcode_map(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''item_key_barcode_map'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_item_key_barcode_map(text) OWNER TO evergreen;

--
-- Name: unicorn_item_table(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_item_table(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''item_table'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_item_table(text) OWNER TO evergreen;

--
-- Name: unicorn_make_address(text, integer, text, text, text, text, text, text, text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_make_address(text, integer, text, text, text, text, text, text, text) RETURNS integer
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        au_id ALIAS FOR $2;
        line1 ALIAS FOR $3;
        line2 ALIAS FOR $4;
        care_of ALIAS FOR $5;
        city ALIAS FOR $6;
        state ALIAS FOR $7;
        zip ALIAS FOR $8;
        label ALIAS FOR $9;
        _street1 TEXT := ''; _street2 TEXT := ''; _city TEXT := ''; _county TEXT := ''; _state TEXT := ''; _country TEXT := ''; _post_code TEXT := '';
        output RECORD;
    BEGIN
        SELECT migration_tools.country_code(migration_schema) INTO _country;
        _street1 := BTRIM(line1);
        _street2 := BTRIM(line2) || CASE WHEN line2 <> '' AND care_of <> '' THEN ' ' ELSE '' END || CASE WHEN care_of <> '' THEN 'Care Of: ' || BTRIM(care_of) ELSE '' END;
        _city := BTRIM(city);
        _state := BTRIM(state);
        _post_code := BTRIM(zip);
        IF _street1 = '' AND _street2 = '' AND _city = '' AND _state = '' AND _post_code = '' THEN
            RETURN NULL;
        END IF;
        PERFORM migration_tools.exec($1, '
            INSERT INTO ' || migration_schema || E'.actor_usr_address ( address_type, usr, street1, street2, city, county, state, country, post_code ) VALUES ( 
                COALESCE( NULLIF(' || quote_literal(label) || E',''''),''Legacy Address''), 
                ' || quote_literal(au_id) || E', 
                ' || quote_literal(_street1) || E', 
                ' || quote_literal(_street2) || E', 
                ' || quote_literal(_city) || E', 
                ' || quote_literal(_county) || E', 
                ' || quote_literal(_state) || E', 
                ' || quote_literal(_country) || E', 
                ' || quote_literal(_post_code) || E' 
            );
        ');
        EXECUTE 'SELECT max(id) AS a FROM ' || migration_schema || E'.actor_usr_address;' INTO output;
        RETURN output.a;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_make_address(text, integer, text, text, text, text, text, text, text) OWNER TO evergreen;

--
-- Name: unicorn_make_card(text, integer, text, boolean); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_make_card(text, integer, text, boolean) RETURNS integer
    LANGUAGE plpgsql STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        au_id ALIAS FOR $2;
        barcode ALIAS FOR $3;
        barcode_valid ALIAS FOR $4;
        card_collisions_table TEXT;
        output RECORD;
    BEGIN
        SELECT migration_tools.unicorn_card_collisions_table(migration_schema) INTO STRICT card_collisions_table;
        IF barcode = '' THEN
            RETURN NULL;
        END IF;
        IF LENGTH(barcode) <> 0 THEN
            EXECUTE 'SELECT id FROM ' || migration_schema || E'.actor_card WHERE barcode = ' || quote_literal(barcode) || ';' INTO output;
            IF output.id IS NULL THEN

                EXECUTE 'SELECT id FROM actor.card WHERE barcode = ' || quote_literal(barcode) || ';' INTO output;
                IF output.id IS NULL THEN
                    PERFORM migration_tools.exec($1, '
                        INSERT INTO ' || migration_schema || E'.actor_card ( usr, barcode, active ) VALUES (
                            ' || (au_id) || E',
                            ' || quote_literal(barcode) || E',
                            ' || CASE WHEN barcode_valid THEN 'true' ELSE 'false' END || E'
                        );
                    ');
                ELSE
                    PERFORM migration_tools.exec($1, '
                        INSERT INTO ' || card_collisions_table || E' ( reason, usr, barcode ) VALUES (
                            ''collision with incumbent barcode'',
                            ' || quote_literal(au_id) || E',
                            ' || quote_literal(barcode) || E'
                        );
                    ');
                    PERFORM migration_tools.exec($1, '
                        INSERT INTO ' || migration_schema || E'.actor_card ( usr, barcode, active ) VALUES (
                            ' || (au_id) || E',
                            ' || quote_literal('coll1_usr_id_'||au_id) || E',
                            ' || CASE WHEN barcode_valid THEN 'true' ELSE 'false' END || E'
                        );
                    ');
                END IF;

            ELSE
                PERFORM migration_tools.exec($1, '
                    INSERT INTO ' || card_collisions_table || E' ( reason, usr, barcode ) VALUES (
                        ''collision with another barcode in same dataset'',
                        ' || quote_literal(au_id) || E',
                        ' || quote_literal(barcode) || E'
                    );
                ');
                PERFORM migration_tools.exec($1, '
                    INSERT INTO ' || migration_schema || E'.actor_card ( usr, barcode, active ) VALUES (
                        ' || (au_id) || E',
                        ' || quote_literal('coll2_usr_id_'||au_id) || E',
                        false
                    );
                ');
            END IF;
        END IF;
        EXECUTE 'SELECT MIN(id) AS a FROM ' || migration_schema || '.actor_card WHERE usr = ' || quote_literal(au_id) || ';' INTO output;
        RETURN output.a;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_make_card(text, integer, text, boolean) OWNER TO evergreen;

--
-- Name: unicorn_money_table(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_money_table(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''money_table'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_money_table(text) OWNER TO evergreen;

--
-- Name: unicorn_org_map(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_org_map(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''org_map'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_org_map(text) OWNER TO evergreen;

--
-- Name: unicorn_patron_table(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_patron_table(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''patron_table'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_patron_table(text) OWNER TO evergreen;

--
-- Name: unicorn_profile_map(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_profile_map(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''profile_map'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_profile_map(text) OWNER TO evergreen;

--
-- Name: unicorn_user_key_barcode_map(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION unicorn_user_key_barcode_map(text) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
    DECLARE
        migration_schema ALIAS FOR $1;
        output TEXT;
    BEGIN
        FOR output IN
            EXECUTE 'SELECT ''' || migration_schema || '.'' || value FROM ' || migration_schema || '.config WHERE key = ''user_key_barcode_map'';'
        LOOP
            RETURN output;
        END LOOP;
    END;
$_$;


ALTER FUNCTION migration_tools.unicorn_user_key_barcode_map(text) OWNER TO evergreen;

--
-- Name: zip_to_city_state_county(text); Type: FUNCTION; Schema: migration_tools; Owner: evergreen
--

CREATE FUNCTION zip_to_city_state_county(text) RETURNS text[]
    LANGUAGE plperlu STABLE
    AS $_X$

	my $input = $_[0];
	my %zipdata;

	open (FH, '<', '/openils/var/data/zips.txt') or return ('No File Found', 'No File Found', 'No File Found');

	while (<FH>) {
		chomp;
		my ($junk, $state, $city, $zip, $foo, $bar, $county, $baz, $morejunk) = split(/\|/);
		$zipdata{$zip} = [$city, $state, $county];
	}

	if (defined $zipdata{$input}) {
		my ($city, $state, $county) = @{$zipdata{$input}};
		return [$city, $state, $county];
	} elsif (defined $zipdata{substr $input, 0, 5}) {
		my ($city, $state, $county) = @{$zipdata{substr $input, 0, 5}};
		return [$city, $state, $county];
	} else {
		return ['ZIP not found', 'ZIP not found', 'ZIP not found'];
	}
  
$_X$;


ALTER FUNCTION migration_tools.zip_to_city_state_county(text) OWNER TO evergreen;

SET search_path = cmd, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: unused_indexes; Type: TABLE; Schema: cmd; Owner: postgres; Tablespace: 
--

CREATE TABLE unused_indexes (
    fqindexname text,
    total_size text,
    raw_size bigint
);


ALTER TABLE cmd.unused_indexes OWNER TO postgres;

SET search_path = envisionware, pg_catalog;

--
-- Name: users_made_no_access; Type: TABLE; Schema: envisionware; Owner: evergreen; Tablespace: 
--

CREATE TABLE users_made_no_access (
    id integer,
    original_net_access_level integer,
    date_changed timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE envisionware.users_made_no_access OWNER TO evergreen;

SET search_path = esi, pg_catalog;

--
-- Name: action_circulation_hs22978; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation_hs22978 (
    id bigint,
    usr integer,
    xact_start timestamp with time zone,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone,
    duration interval,
    fine_interval interval,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean,
    desk_renewal boolean,
    opac_renewal boolean,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint,
    grace_period interval,
    copy_location integer
);


ALTER TABLE esi.action_circulation_hs22978 OWNER TO evergreen;

--
-- Name: backroom_items; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE backroom_items (
    barcode text,
    id bigint,
    status integer
);


ALTER TABLE esi.backroom_items OWNER TO evergreen;

--
-- Name: bad_hold_transit_copy; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE bad_hold_transit_copy (
    id integer,
    source_send_time timestamp with time zone,
    dest_recv_time timestamp with time zone,
    target_copy bigint,
    source integer,
    dest integer,
    prev_hop integer,
    copy_status integer,
    persistant_transfer boolean,
    prev_dest integer,
    hold integer
);


ALTER TABLE esi.bad_hold_transit_copy OWNER TO evergreen;

--
-- Name: bibs_to_reingest_hs21524; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE bibs_to_reingest_hs21524 (
    id bigint
);


ALTER TABLE esi.bibs_to_reingest_hs21524 OWNER TO evergreen;

--
-- Name: bibstodelete19187; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE bibstodelete19187 (
    record bigint,
    tag character(3),
    count bigint,
    title text,
    author text,
    isbn text[],
    value text
);


ALTER TABLE esi.bibstodelete19187 OWNER TO evergreen;

--
-- Name: chartest; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE chartest (
    marc text
);


ALTER TABLE esi.chartest OWNER TO evergreen;

--
-- Name: cleanupvolumes1; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE cleanupvolumes1 (
    volume_id bigint
);


ALTER TABLE esi.cleanupvolumes1 OWNER TO evergreen;

--
-- Name: cleanupvolumes18552; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE cleanupvolumes18552 (
    volume_id bigint
);


ALTER TABLE esi.cleanupvolumes18552 OWNER TO evergreen;

--
-- Name: cleanupvolumes2; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE cleanupvolumes2 (
    volume_id bigint
);


ALTER TABLE esi.cleanupvolumes2 OWNER TO evergreen;

--
-- Name: deletedfunds18487; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE deletedfunds18487 (
    id integer,
    fund integer,
    origin_amount numeric,
    origin_currency_type text,
    amount numeric,
    encumbrance boolean,
    debit_type text,
    xfer_destination integer,
    create_time timestamp with time zone
);


ALTER TABLE esi.deletedfunds18487 OWNER TO evergreen;

--
-- Name: fundstodelete; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE fundstodelete (
    id integer
);


ALTER TABLE esi.fundstodelete OWNER TO evergreen;

--
-- Name: fundstodelete2; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE fundstodelete2 (
    id integer,
    fund integer,
    origin_amount numeric,
    origin_currency_type text,
    amount numeric,
    encumbrance boolean,
    debit_type text,
    xfer_destination integer,
    create_time timestamp with time zone
);


ALTER TABLE esi.fundstodelete2 OWNER TO evergreen;

--
-- Name: headings; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE headings (
    id integer
);


ALTER TABLE esi.headings OWNER TO evergreen;

--
-- Name: hold_request_hs20783; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE hold_request_hs20783 (
    id integer,
    request_time timestamp with time zone,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean,
    frozen boolean,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE esi.hold_request_hs20783 OWNER TO evergreen;

--
-- Name: hold_request_hs20783_2nd_file; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE hold_request_hs20783_2nd_file (
    id integer,
    request_time timestamp with time zone,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean,
    frozen boolean,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE esi.hold_request_hs20783_2nd_file OWNER TO evergreen;

--
-- Name: hs17295_edi_message; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE hs17295_edi_message (
    id integer,
    account integer,
    remote_file text,
    create_time timestamp with time zone,
    translate_time timestamp with time zone,
    process_time timestamp with time zone,
    error_time timestamp with time zone,
    status text,
    edi text,
    jedi text,
    error text,
    purchase_order integer,
    message_type text
);


ALTER TABLE esi.hs17295_edi_message OWNER TO evergreen;

--
-- Name: needsoverduephone; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE needsoverduephone (
    id integer
);


ALTER TABLE esi.needsoverduephone OWNER TO evergreen;

--
-- Name: offline_script_hs20920; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE offline_script_hs20920 (
    id integer,
    session text,
    requestor integer,
    create_time integer,
    workstation text,
    logfile text,
    time_delta integer,
    count integer
);


ALTER TABLE esi.offline_script_hs20920 OWNER TO evergreen;

--
-- Name: offline_session_hs20920; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE offline_session_hs20920 (
    key text,
    org integer,
    description text,
    creator integer,
    create_time integer,
    in_process integer,
    start_time integer,
    end_time integer,
    num_complete integer
);


ALTER TABLE esi.offline_session_hs20920 OWNER TO evergreen;

--
-- Name: old_notice_events; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE old_notice_events (
    id bigint,
    target bigint,
    event_def integer,
    add_time timestamp with time zone,
    run_time timestamp with time zone,
    start_time timestamp with time zone,
    update_time timestamp with time zone,
    complete_time timestamp with time zone,
    update_process integer,
    state text,
    user_data text,
    template_output bigint,
    error_output bigint,
    async_output bigint
);


ALTER TABLE esi.old_notice_events OWNER TO evergreen;

--
-- Name: phasefx16756_xacts; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE phasefx16756_xacts (
    id bigint
);


ALTER TABLE esi.phasefx16756_xacts OWNER TO evergreen;

--
-- Name: saved_inactive_patron_cards; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE saved_inactive_patron_cards (
    id integer,
    usr integer,
    barcode text,
    active boolean
);


ALTER TABLE esi.saved_inactive_patron_cards OWNER TO evergreen;

--
-- Name: statuschange17802; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE statuschange17802 (
    id bigint,
    status integer
);


ALTER TABLE esi.statuschange17802 OWNER TO evergreen;

--
-- Name: steve092711oldholdnotices; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steve092711oldholdnotices (
    id bigint,
    target bigint,
    event_def integer,
    add_time timestamp with time zone,
    run_time timestamp with time zone,
    start_time timestamp with time zone,
    update_time timestamp with time zone,
    complete_time timestamp with time zone,
    update_process integer,
    state text,
    user_data text,
    template_output bigint,
    error_output bigint,
    async_output bigint
);


ALTER TABLE esi.steve092711oldholdnotices OWNER TO evergreen;

--
-- Name: steve17090funddebit; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steve17090funddebit (
    id integer,
    fund integer,
    origin_amount numeric,
    origin_currency_type text,
    amount numeric,
    encumbrance boolean,
    debit_type text,
    xfer_destination integer,
    create_time timestamp with time zone
);


ALTER TABLE esi.steve17090funddebit OWNER TO evergreen;

--
-- Name: steve17090lineitems; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steve17090lineitems (
    id bigint,
    creator integer,
    editor integer,
    selector integer,
    provider integer,
    purchase_order integer,
    picklist integer,
    expected_recv_time timestamp with time zone,
    create_time timestamp with time zone,
    edit_time timestamp with time zone,
    marc text,
    eg_bib_id bigint,
    source_label text,
    state text,
    cancel_reason integer,
    estimated_unit_price numeric,
    claim_policy integer
);


ALTER TABLE esi.steve17090lineitems OWNER TO evergreen;

--
-- Name: steve17090lineitemsdetails; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steve17090lineitemsdetails (
    id bigint,
    lineitem integer,
    fund integer,
    fund_debit integer,
    eg_copy_id bigint,
    barcode text,
    cn_label text,
    note text,
    collection_code text,
    circ_modifier text,
    owning_lib integer,
    location integer,
    recv_time timestamp with time zone,
    cancel_reason integer
);


ALTER TABLE esi.steve17090lineitemsdetails OWNER TO evergreen;

--
-- Name: steve2371665holds; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steve2371665holds (
    id integer,
    request_time timestamp with time zone,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean,
    frozen boolean,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE esi.steve2371665holds OWNER TO evergreen;

--
-- Name: steve2759532holds; Type: TABLE; Schema: esi; Owner: postgres; Tablespace: 
--

CREATE TABLE steve2759532holds (
    id integer,
    request_time timestamp with time zone,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean,
    frozen boolean,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE esi.steve2759532holds OWNER TO postgres;

--
-- Name: steve_reshelving_fix18027; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steve_reshelving_fix18027 (
    id bigint
);


ALTER TABLE esi.steve_reshelving_fix18027 OWNER TO evergreen;

--
-- Name: steve_reshelving_fix180271; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steve_reshelving_fix180271 (
    id bigint
);


ALTER TABLE esi.steve_reshelving_fix180271 OWNER TO evergreen;

--
-- Name: steveacqedimessagebackup18700; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveacqedimessagebackup18700 (
    id integer,
    account integer,
    remote_file text,
    create_time timestamp with time zone,
    translate_time timestamp with time zone,
    process_time timestamp with time zone,
    error_time timestamp with time zone,
    status text,
    edi text,
    jedi text,
    error text,
    purchase_order integer,
    message_type text
);


ALTER TABLE esi.steveacqedimessagebackup18700 OWNER TO evergreen;

--
-- Name: steveaction_collector; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveaction_collector (
    module text,
    description text
);


ALTER TABLE esi.steveaction_collector OWNER TO evergreen;

--
-- Name: steveaction_def; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveaction_def (
    id integer,
    active boolean,
    owner integer,
    name text,
    hook text,
    validator text,
    reactor text,
    cleanup_success text,
    cleanup_failure text,
    delay interval,
    max_delay interval,
    usr_field text,
    opt_in_setting text,
    delay_field text,
    group_field text,
    template text,
    granularity text
);


ALTER TABLE esi.steveaction_def OWNER TO evergreen;

--
-- Name: steveaction_environment; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveaction_environment (
    id integer,
    event_def integer,
    path text,
    collector text,
    label text
);


ALTER TABLE esi.steveaction_environment OWNER TO evergreen;

--
-- Name: steveaction_hook; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveaction_hook (
    key text,
    core_type text,
    description text,
    passive boolean
);


ALTER TABLE esi.steveaction_hook OWNER TO evergreen;

--
-- Name: steveaction_params; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveaction_params (
    id bigint,
    event_def integer,
    param text,
    value text
);


ALTER TABLE esi.steveaction_params OWNER TO evergreen;

--
-- Name: steveaction_reactor; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveaction_reactor (
    module text,
    description text
);


ALTER TABLE esi.steveaction_reactor OWNER TO evergreen;

--
-- Name: steveaction_validator; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveaction_validator (
    module text,
    description text
);


ALTER TABLE esi.steveaction_validator OWNER TO evergreen;

--
-- Name: stevebackupdef23; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevebackupdef23 (
    id integer,
    active boolean,
    owner integer,
    name text,
    hook text,
    validator text,
    reactor text,
    cleanup_success text,
    cleanup_failure text,
    delay interval,
    max_delay interval,
    usr_field text,
    opt_in_setting text,
    delay_field text,
    group_field text,
    template text,
    granularity text
);


ALTER TABLE esi.stevebackupdef23 OWNER TO evergreen;

--
-- Name: stevecheckingvolumes; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevecheckingvolumes (
    volume_id bigint
);


ALTER TABLE esi.stevecheckingvolumes OWNER TO evergreen;

--
-- Name: stevecheckmissing; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevecheckmissing (
    id bigint,
    max timestamp with time zone,
    deleted boolean
);


ALTER TABLE esi.stevecheckmissing OWNER TO evergreen;

--
-- Name: stevecheckreshelv; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevecheckreshelv (
    id bigint,
    "Max Checkin Time" timestamp with time zone,
    "Max Dest Time" timestamp with time zone
);


ALTER TABLE esi.stevecheckreshelv OWNER TO evergreen;

--
-- Name: stevecopydelete; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevecopydelete (
    id bigint
);


ALTER TABLE esi.stevecopydelete OWNER TO evergreen;

--
-- Name: steveholdprintingorig; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveholdprintingorig (
    id bigint,
    usr integer,
    name text,
    value text
);


ALTER TABLE esi.steveholdprintingorig OWNER TO evergreen;

--
-- Name: steveholdprintingorigtakeone; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveholdprintingorigtakeone (
    id bigint,
    usr integer,
    name text,
    value text
);


ALTER TABLE esi.steveholdprintingorigtakeone OWNER TO evergreen;

--
-- Name: steveholdprintingorigtakethree; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveholdprintingorigtakethree (
    id bigint,
    usr integer,
    name text,
    value text
);


ALTER TABLE esi.steveholdprintingorigtakethree OWNER TO evergreen;

--
-- Name: steveholdprintingorigtaketwo; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveholdprintingorigtaketwo (
    id bigint,
    usr integer,
    name text,
    value text
);


ALTER TABLE esi.steveholdprintingorigtaketwo OWNER TO evergreen;

--
-- Name: steveholdprintingorigtesting; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveholdprintingorigtesting (
    id bigint,
    usr integer,
    name text,
    value text
);


ALTER TABLE esi.steveholdprintingorigtesting OWNER TO evergreen;

--
-- Name: stevelongmissingitemsdelete; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevelongmissingitemsdelete (
    id bigint
);


ALTER TABLE esi.stevelongmissingitemsdelete OWNER TO evergreen;

--
-- Name: steveofflinescript18148; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveofflinescript18148 (
    id integer,
    session text,
    requestor integer,
    create_time integer,
    workstation text,
    logfile text,
    time_delta integer,
    count integer
);


ALTER TABLE esi.steveofflinescript18148 OWNER TO evergreen;

--
-- Name: steveofflinescript18148_2; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveofflinescript18148_2 (
    id integer,
    session text,
    requestor integer,
    create_time integer,
    workstation text,
    logfile text,
    time_delta integer,
    count integer
);


ALTER TABLE esi.steveofflinescript18148_2 OWNER TO evergreen;

--
-- Name: steveofflinescript18148_3; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveofflinescript18148_3 (
    id integer,
    session text,
    requestor integer,
    create_time integer,
    workstation text,
    logfile text,
    time_delta integer,
    count integer
);


ALTER TABLE esi.steveofflinescript18148_3 OWNER TO evergreen;

--
-- Name: steveofflinescript21783; Type: TABLE; Schema: esi; Owner: postgres; Tablespace: 
--

CREATE TABLE steveofflinescript21783 (
    id integer,
    session text,
    requestor integer,
    create_time integer,
    workstation text,
    logfile text,
    time_delta integer,
    count integer
);


ALTER TABLE esi.steveofflinescript21783 OWNER TO postgres;

--
-- Name: steveofflinesession18148; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveofflinesession18148 (
    key text,
    org integer,
    description text,
    creator integer,
    create_time integer,
    in_process integer,
    start_time integer,
    end_time integer,
    num_complete integer
);


ALTER TABLE esi.steveofflinesession18148 OWNER TO evergreen;

--
-- Name: steveofflinesession18148_2; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveofflinesession18148_2 (
    key text,
    org integer,
    description text,
    creator integer,
    create_time integer,
    in_process integer,
    start_time integer,
    end_time integer,
    num_complete integer
);


ALTER TABLE esi.steveofflinesession18148_2 OWNER TO evergreen;

--
-- Name: steveofflinesession18148_3; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveofflinesession18148_3 (
    key text,
    org integer,
    description text,
    creator integer,
    create_time integer,
    in_process integer,
    start_time integer,
    end_time integer,
    num_complete integer
);


ALTER TABLE esi.steveofflinesession18148_3 OWNER TO evergreen;

--
-- Name: steveofflinesession21783; Type: TABLE; Schema: esi; Owner: postgres; Tablespace: 
--

CREATE TABLE steveofflinesession21783 (
    key text,
    org integer,
    description text,
    creator integer,
    create_time integer,
    in_process integer,
    start_time integer,
    end_time integer,
    num_complete integer
);


ALTER TABLE esi.steveofflinesession21783 OWNER TO postgres;

--
-- Name: steveoverdueprintorig; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveoverdueprintorig (
    id bigint,
    usr integer,
    name text,
    value text
);


ALTER TABLE esi.steveoverdueprintorig OWNER TO evergreen;

--
-- Name: steveoverdueprintorigtesting; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveoverdueprintorigtesting (
    id bigint,
    usr integer,
    name text,
    value text
);


ALTER TABLE esi.steveoverdueprintorigtesting OWNER TO evergreen;

--
-- Name: stevepenalties14512; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevepenalties14512 (
    id integer,
    org_unit integer,
    usr integer,
    standing_penalty integer,
    staff integer,
    set_date timestamp with time zone,
    stop_date timestamp with time zone,
    note text
);


ALTER TABLE esi.stevepenalties14512 OWNER TO evergreen;

--
-- Name: stevestandingorg14512; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevestandingorg14512 (
    id integer,
    org_unit integer,
    usr integer,
    standing_penalty integer,
    staff integer,
    set_date timestamp with time zone,
    stop_date timestamp with time zone,
    note text
);


ALTER TABLE esi.stevestandingorg14512 OWNER TO evergreen;

--
-- Name: stevestopfines17480; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevestopfines17480 (
    id bigint,
    usr integer,
    xact_start timestamp with time zone,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone,
    duration interval,
    fine_interval interval,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean,
    desk_renewal boolean,
    opac_renewal boolean,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint,
    grace_period interval
);


ALTER TABLE esi.stevestopfines17480 OWNER TO evergreen;

--
-- Name: stevesupetransitcleanup; Type: TABLE; Schema: esi; Owner: postgres; Tablespace: 
--

CREATE TABLE stevesupetransitcleanup (
    target_copy bigint
);


ALTER TABLE esi.stevesupetransitcleanup OWNER TO postgres;

--
-- Name: stevetestadd; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevetestadd (
    id bigint,
    usr integer,
    name text,
    value text
);


ALTER TABLE esi.stevetestadd OWNER TO evergreen;

--
-- Name: stevetestsettings; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevetestsettings (
    id bigint,
    usr integer,
    name text,
    value text
);


ALTER TABLE esi.stevetestsettings OWNER TO evergreen;

--
-- Name: stevetransitupdate; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevetransitupdate (
    id integer,
    source_send_time timestamp with time zone,
    dest_recv_time timestamp with time zone,
    target_copy bigint,
    source integer,
    dest integer,
    prev_hop integer,
    copy_status integer,
    persistant_transfer boolean,
    prev_dest integer
);


ALTER TABLE esi.stevetransitupdate OWNER TO evergreen;

--
-- Name: stevetransitupdate2; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE stevetransitupdate2 (
    id integer,
    source_send_time timestamp with time zone,
    dest_recv_time timestamp with time zone,
    target_copy bigint,
    source integer,
    dest integer,
    prev_hop integer,
    copy_status integer,
    persistant_transfer boolean,
    prev_dest integer
);


ALTER TABLE esi.stevetransitupdate2 OWNER TO evergreen;

--
-- Name: steveusrsettingbackup; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE steveusrsettingbackup (
    id bigint,
    usr integer,
    name text,
    value text
);


ALTER TABLE esi.steveusrsettingbackup OWNER TO evergreen;

--
-- Name: templatestoconvert; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE templatestoconvert (
    id integer,
    owner integer,
    create_time timestamp with time zone,
    name text,
    description text,
    data text,
    folder integer
);


ALTER TABLE esi.templatestoconvert OWNER TO evergreen;

--
-- Name: to_keep; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE to_keep (
    barcode text
);


ALTER TABLE esi.to_keep OWNER TO evergreen;

--
-- Name: toclose; Type: TABLE; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE TABLE toclose (
    id bigint
);


ALTER TABLE esi.toclose OWNER TO evergreen;

--
-- Name: transitclear; Type: TABLE; Schema: esi; Owner: postgres; Tablespace: 
--

CREATE TABLE transitclear (
    first integer,
    target_copy bigint
);


ALTER TABLE esi.transitclear OWNER TO postgres;

SET search_path = esi16538, pg_catalog;

--
-- Name: actor_card; Type: TABLE; Schema: esi16538; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer,
    usr integer,
    barcode text,
    active boolean
);


ALTER TABLE esi16538.actor_card OWNER TO evergreen;

SET search_path = esi_14812, pg_catalog;

--
-- Name: fw_items; Type: TABLE; Schema: esi_14812; Owner: evergreen; Tablespace: 
--

CREATE TABLE fw_items (
    item_id bigint,
    circ_lib integer,
    barcode text,
    orig_status integer,
    orig_status_date timestamp without time zone,
    done boolean DEFAULT false,
    to_fix boolean DEFAULT false
);


ALTER TABLE esi_14812.fw_items OWNER TO evergreen;

--
-- Name: nw_items_changed; Type: TABLE; Schema: esi_14812; Owner: evergreen; Tablespace: 
--

CREATE TABLE nw_items_changed (
    id bigint,
    status integer
);


ALTER TABLE esi_14812.nw_items_changed OWNER TO evergreen;

--
-- Name: rn_dvds; Type: TABLE; Schema: esi_14812; Owner: evergreen; Tablespace: 
--

CREATE TABLE rn_dvds (
    id bigint,
    holdable boolean,
    opac_visible boolean
);


ALTER TABLE esi_14812.rn_dvds OWNER TO evergreen;

--
-- Name: rn_missing_items; Type: TABLE; Schema: esi_14812; Owner: evergreen; Tablespace: 
--

CREATE TABLE rn_missing_items (
    item_id bigint,
    circ_lib integer,
    barcode text,
    orig_status integer,
    orig_status_date timestamp without time zone,
    done boolean DEFAULT false,
    to_fix boolean DEFAULT false
);


ALTER TABLE esi_14812.rn_missing_items OWNER TO evergreen;

SET search_path = m_enum, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint,
    grace_period interval
);


ALTER TABLE m_enum.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_enum.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT false NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_enum.action_hold_request OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_enum.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_enum.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_enum.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_map (
    id integer NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    org_id integer,
    l_library text,
    name text,
    legacy_field1 text,
    legacy_value1 text,
    entry text
);


ALTER TABLE m_enum.actor_stat_cat_entry_map OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_map_id_seq; Type: SEQUENCE; Schema: m_enum; Owner: evergreen
--

CREATE SEQUENCE actor_stat_cat_entry_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_enum.actor_stat_cat_entry_map_id_seq OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_enum; Owner: evergreen
--

ALTER SEQUENCE actor_stat_cat_entry_map_id_seq OWNED BY actor_stat_cat_entry_map.id;


--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_enum.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_stat_cat_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_map (
    id integer NOT NULL,
    stat_cat integer,
    org_id integer,
    l_library text,
    name text
);


ALTER TABLE m_enum.actor_stat_cat_map OWNER TO evergreen;

--
-- Name: actor_stat_cat_map_id_seq; Type: SEQUENCE; Schema: m_enum; Owner: evergreen
--

CREATE SEQUENCE actor_stat_cat_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_enum.actor_stat_cat_map_id_seq OWNER TO evergreen;

--
-- Name: actor_stat_cat_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_enum; Owner: evergreen
--

ALTER SEQUENCE actor_stat_cat_map_id_seq OWNED BY actor_stat_cat_map.id;


--
-- Name: actor_usr; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_enum.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_enum.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_legacy; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_legacy (
    l_borrower_borrower text,
    l_borrower_location text,
    l_borrower_btype text,
    l_borrower_second_id text,
    l_borrower_name text,
    l_borrower_name_reconstructed text,
    l_borrower_birth_date text,
    l_borrower_backlink text,
    l_borrower_last_cko_date text,
    l_borrower_n_ckos text,
    l_borrower_registration_date text,
    l_borrower_expiration_date text,
    l_borrower_creation_date text,
    l_borrower_last_update_date text,
    l_borrower_borrower_note text,
    l_borrower_source text,
    l_borrower_language text,
    l_borrower_pin text,
    l_borrower_last_authentication_date text,
    l_borrower_self_registered text,
    l_borrower_approved_status text,
    l_borrower_homeroom text,
    l_borrower_grade text,
    l_borrower_teacher text,
    l_borrower_parent_guardian text,
    l_borrower_note1 text,
    l_borrower_note2 text,
    l_borrower_note3 text,
    l_borrower_dynix_pkey text,
    l_borrower_id text,
    l_borrower_internet_permission text,
    l_borrower_approved_borrowers text,
    l_borrower_keep_circ_history text,
    l_borrower_last_alert_date text,
    l_borrower_borr_ldap_dn text,
    l_borrower_use_guardian text,
    l_borrower_address_1__ord text,
    l_borrower_address_1__address_type text,
    l_borrower_address_1__mail_sort_type text,
    l_borrower_address_1__send_notice_by text,
    l_borrower_address_1__valid_from_date text,
    l_borrower_address_1__valid_to_date text,
    l_borrower_address_1__address1 text,
    l_borrower_address_1__address2 text,
    l_borrower_address_1__address3 text,
    l_borrower_address_1__address4 text,
    l_borrower_address_1__postal_code text,
    l_borrower_address_1__city_st text,
    l_borrower_address_1__email_name text,
    l_borrower_address_1__email_address text,
    l_borrower_address_1__send_preoverdue text,
    l_borrower_address_2__ord text,
    l_borrower_address_2__address_type text,
    l_borrower_address_2__mail_sort_type text,
    l_borrower_address_2__send_notice_by text,
    l_borrower_address_2__valid_from_date text,
    l_borrower_address_2__valid_to_date text,
    l_borrower_address_2__address1 text,
    l_borrower_address_2__address2 text,
    l_borrower_address_2__address3 text,
    l_borrower_address_2__address4 text,
    l_borrower_address_2__postal_code text,
    l_borrower_address_2__city_st text,
    l_borrower_address_2__email_name text,
    l_borrower_address_2__email_address text,
    l_borrower_address_2__send_preoverdue text,
    l_borrower_address_3__ord text,
    l_borrower_address_3__address_type text,
    l_borrower_address_3__mail_sort_type text,
    l_borrower_address_3__send_notice_by text,
    l_borrower_address_3__valid_from_date text,
    l_borrower_address_3__valid_to_date text,
    l_borrower_address_3__address1 text,
    l_borrower_address_3__address2 text,
    l_borrower_address_3__address3 text,
    l_borrower_address_3__address4 text,
    l_borrower_address_3__postal_code text,
    l_borrower_address_3__city_st text,
    l_borrower_address_3__email_name text,
    l_borrower_address_3__email_address text,
    l_borrower_address_3__send_preoverdue text,
    l_borrower_phone_1__ord text,
    l_borrower_phone_1__phone_no text,
    l_borrower_phone_1__phone_type text,
    l_borrower_phone_2__ord text,
    l_borrower_phone_2__phone_no text,
    l_borrower_phone_2__phone_type text,
    l_borrower_phone_3__ord text,
    l_borrower_phone_3__phone_no text,
    l_borrower_phone_3__phone_type text,
    l_borrower_bstat_1__bstat text,
    l_borrower_bstat_2__bstat text,
    l_borrower_bstat_3__bstat text,
    l_borrower_barcode_1__ord text,
    l_borrower_barcode_1__bbarcode text,
    l_borrower_barcode_1__barcode_type text,
    l_borrower_barcode_1__lost_date text,
    l_borrower_barcode_1__proxy_borrower text,
    l_borrower_barcode_1__proxy_expiration_date text,
    l_borrower_barcode_2__ord text,
    l_borrower_barcode_2__bbarcode text,
    l_borrower_barcode_2__barcode_type text,
    l_borrower_barcode_2__lost_date text,
    l_borrower_barcode_2__proxy_borrower text,
    l_borrower_barcode_2__proxy_expiration_date text,
    l_borrower_barcode_3__ord text,
    l_borrower_barcode_3__bbarcode text,
    l_borrower_barcode_3__barcode_type text,
    l_borrower_barcode_3__lost_date text,
    l_borrower_barcode_3__proxy_borrower text,
    l_borrower_barcode_3__proxy_expiration_date text,
    l_borrower_barcode_4__ord text,
    l_borrower_barcode_4__bbarcode text,
    l_borrower_barcode_4__barcode_type text,
    l_borrower_barcode_4__lost_date text,
    l_borrower_barcode_4__proxy_borrower text,
    l_borrower_barcode_4__proxy_expiration_date text,
    l_borrower_barcode_5__ord text,
    l_borrower_barcode_5__bbarcode text,
    l_borrower_barcode_5__barcode_type text,
    l_borrower_barcode_5__lost_date text,
    l_borrower_barcode_5__proxy_borrower text,
    l_borrower_barcode_5__proxy_expiration_date text,
    l_borrower_barcode_6__ord text,
    l_borrower_barcode_6__bbarcode text,
    l_borrower_barcode_6__barcode_type text,
    l_borrower_barcode_6__lost_date text,
    l_borrower_barcode_6__proxy_borrower text,
    l_borrower_barcode_6__proxy_expiration_date text,
    l_borrower_barcode_7__ord text,
    l_borrower_barcode_7__bbarcode text,
    l_borrower_barcode_7__barcode_type text,
    l_borrower_barcode_7__lost_date text,
    l_borrower_barcode_7__proxy_borrower text,
    l_borrower_barcode_7__proxy_expiration_date text,
    l_borrowerextradata_symphonykey text,
    l_borrowerextradata_symphonyalt_id text,
    l_borrowerextradata_library text,
    l_borrowerextradata_user_profile text,
    l_borrowerextradata_default_pin text,
    l_borrowerextradata_default_name text
)
INHERITS (actor_usr);


ALTER TABLE m_enum.actor_usr_legacy OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_enum.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint,
    label_sortkey text,
    prefix integer DEFAULT (-1) NOT NULL,
    suffix integer DEFAULT (-1) NOT NULL
);


ALTER TABLE m_enum.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_enum.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_legacy; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_legacy (
    egid integer,
    hseq integer,
    l_item_num text,
    l_barcode text,
    l_collection text,
    l_call_num text,
    l_copy text,
    l_last_inv_date text,
    l_volume text,
    l_istat text,
    l_pieces text,
    l_create_date text,
    l_update_date text,
    l_location text,
    l_price text,
    l_last_checkout text,
    l_source text,
    l_itype text,
    l_note text,
    l_call_type text,
    l_checkin_note text,
    l_item_status text,
    l_num_loans text,
    l_internal_note text
)
INHERITS (asset_copy);


ALTER TABLE m_enum.asset_copy_legacy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_enum.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_enum.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_enum.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_enum.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_enum.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_enum.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_enum; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_enum.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_enum; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_enum.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_enum; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_enum.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_enum; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_enum.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_enum; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_enum.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_enum; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_enum.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_enum; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_enum.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_enum; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: bib_hbib_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE bib_hbib_map (
    record bigint,
    value text
);


ALTER TABLE m_enum.bib_hbib_map OWNER TO evergreen;

--
-- Name: bib_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE bib_map (
    item_eg_id bigint,
    egid bigint
);


ALTER TABLE m_enum.bib_map OWNER TO evergreen;

--
-- Name: card_collisions; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE card_collisions (
    id integer NOT NULL,
    reason text,
    usr integer,
    barcode text
);


ALTER TABLE m_enum.card_collisions OWNER TO evergreen;

--
-- Name: card_collisions_id_seq; Type: SEQUENCE; Schema: m_enum; Owner: evergreen
--

CREATE SEQUENCE card_collisions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_enum.card_collisions_id_seq OWNER TO evergreen;

--
-- Name: card_collisions_id_seq; Type: SEQUENCE OWNED BY; Schema: m_enum; Owner: evergreen
--

ALTER SEQUENCE card_collisions_id_seq OWNED BY card_collisions.id;


--
-- Name: circ; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE circ (
    l_item_barcode text,
    l_patron_num text,
    l_barcode text,
    l_checkout timestamp without time zone,
    l_loc text,
    l_due timestamp without time zone,
    l_renewals text
)
INHERITS (action_circulation);


ALTER TABLE m_enum.circ OWNER TO evergreen;

--
-- Name: circ_mod_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE circ_mod_map (
    l_collection text,
    l_circ_mod text
);


ALTER TABLE m_enum.circ_mod_map OWNER TO evergreen;

--
-- Name: circs_missing_data; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE circs_missing_data (
    id bigint,
    usr integer,
    xact_start timestamp with time zone,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone,
    duration interval,
    fine_interval interval,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean,
    desk_renewal boolean,
    opac_renewal boolean,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint,
    grace_period interval,
    l_item_barcode text,
    l_patron_num text,
    l_barcode text,
    l_checkout timestamp without time zone,
    l_loc text,
    l_due timestamp without time zone,
    l_renewals text
);


ALTER TABLE m_enum.circs_missing_data OWNER TO evergreen;

--
-- Name: config; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_enum.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_enum.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: holds; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE holds (
    l_bib_num text,
    l_item_num text,
    l_bnum text,
    l_bbarc text,
    l_request_date text,
    l_expire_date text,
    l_on_shelf text,
    l_shelf_expire text,
    l_reactive text,
    l_status text,
    l_notes text
)
INHERITS (action_hold_request);


ALTER TABLE m_enum.holds OWNER TO evergreen;

--
-- Name: holds_missing_stuff; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE holds_missing_stuff (
    id integer,
    request_time timestamp with time zone,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean,
    frozen boolean,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean,
    shelf_expire_time timestamp with time zone,
    l_bib_num text,
    l_item_num text,
    l_bnum text,
    l_bbarc text,
    l_request_date text,
    l_expire_date text,
    l_on_shelf text,
    l_shelf_expire text,
    l_reactive text,
    l_status text,
    l_notes text
);


ALTER TABLE m_enum.holds_missing_stuff OWNER TO evergreen;

--
-- Name: home_location_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE home_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_enum.home_location_map OWNER TO evergreen;

--
-- Name: home_location_map_id_seq; Type: SEQUENCE; Schema: m_enum; Owner: evergreen
--

CREATE SEQUENCE home_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_enum.home_location_map_id_seq OWNER TO evergreen;

--
-- Name: home_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_enum; Owner: evergreen
--

ALTER SEQUENCE home_location_map_id_seq OWNED BY home_location_map.id;


--
-- Name: item_dynamic_field_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_enum.item_dynamic_field_map OWNER TO evergreen;

--
-- Name: item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_enum; Owner: evergreen
--

CREATE SEQUENCE item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_enum.item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_enum; Owner: evergreen
--

ALTER SEQUENCE item_dynamic_field_map_id_seq OWNED BY item_dynamic_field_map.id;


--
-- Name: item_key_barcode_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE item_key_barcode_map (
    key1 text,
    key2 text,
    key3 text,
    barcode text
);


ALTER TABLE m_enum.item_key_barcode_map OWNER TO evergreen;

--
-- Name: items_missing_barcodes; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE items_missing_barcodes (
    id bigint,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone,
    edit_date timestamp with time zone,
    copy_number integer,
    status integer,
    location integer,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean,
    deposit boolean,
    ref boolean,
    holdable boolean,
    deposit_amount numeric(6,2),
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean,
    deleted boolean,
    floating boolean,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean,
    cost numeric(8,2),
    egid integer,
    hseq integer,
    l_item_num text,
    l_barcode text,
    l_collection text,
    l_call_num text,
    l_copy text,
    l_last_inv_date text,
    l_volume text,
    l_istat text,
    l_pieces text,
    l_create_date text,
    l_update_date text,
    l_location text,
    l_price text,
    l_last_checkout text,
    l_source text,
    l_itype text,
    l_note text,
    l_call_type text,
    l_checkin_note text,
    l_item_status text,
    l_num_loans text,
    l_internal_note text
);


ALTER TABLE m_enum.items_missing_barcodes OWNER TO evergreen;

--
-- Name: items_not_migrating; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE items_not_migrating (
    id bigint,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone,
    edit_date timestamp with time zone,
    copy_number integer,
    status integer,
    location integer,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean,
    deposit boolean,
    ref boolean,
    holdable boolean,
    deposit_amount numeric(6,2),
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean,
    deleted boolean,
    floating boolean,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean,
    cost numeric(8,2),
    egid integer,
    hseq integer,
    l_item_num text,
    l_barcode text,
    l_collection text,
    l_call_num text,
    l_copy text,
    l_last_inv_date text,
    l_volume text,
    l_istat text,
    l_pieces text,
    l_create_date text,
    l_update_date text,
    l_location text,
    l_price text,
    l_last_checkout text,
    l_source text,
    l_itype text,
    l_note text,
    l_call_type text,
    l_checkin_note text,
    l_item_status text,
    l_num_loans text,
    l_internal_note text
);


ALTER TABLE m_enum.items_not_migrating OWNER TO evergreen;

--
-- Name: loc_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE loc_map (
    l_collection text,
    l_loc text
);


ALTER TABLE m_enum.loc_map OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_enum.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_enum.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_enum.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_enum.money_grocery OWNER TO evergreen;

--
-- Name: new_merge; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE new_merge (
    hbib_id bigint,
    source_egid bigint,
    target_egid bigint
);


ALTER TABLE m_enum.new_merge OWNER TO evergreen;

--
-- Name: org_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE org_map (
    id integer NOT NULL,
    org_id integer,
    transcribed_shortname text,
    l_library text NOT NULL,
    patron_rebarcode_offset bigint DEFAULT 0 NOT NULL,
    item_rebarcode_offset bigint DEFAULT 0 NOT NULL,
    default_circ_staff integer DEFAULT 1 NOT NULL
);


ALTER TABLE m_enum.org_map OWNER TO evergreen;

--
-- Name: org_map_id_seq; Type: SEQUENCE; Schema: m_enum; Owner: evergreen
--

CREATE SEQUENCE org_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_enum.org_map_id_seq OWNER TO evergreen;

--
-- Name: org_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_enum; Owner: evergreen
--

ALTER SEQUENCE org_map_id_seq OWNED BY org_map.id;


--
-- Name: orig_egid_copy_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE orig_egid_copy_map (
    id bigint,
    egid integer
);


ALTER TABLE m_enum.orig_egid_copy_map OWNER TO evergreen;

--
-- Name: profile_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_enum.profile_map OWNER TO evergreen;

--
-- Name: profile_map_id_seq; Type: SEQUENCE; Schema: m_enum; Owner: evergreen
--

CREATE SEQUENCE profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_enum.profile_map_id_seq OWNER TO evergreen;

--
-- Name: profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_enum; Owner: evergreen
--

ALTER SEQUENCE profile_map_id_seq OWNED BY profile_map.id;


--
-- Name: sql_current; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_enum.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_enum.sql_log OWNER TO evergreen;

--
-- Name: user_key_barcode_map; Type: TABLE; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE TABLE user_key_barcode_map (
    key text,
    barcode text
);


ALTER TABLE m_enum.user_key_barcode_map OWNER TO evergreen;

SET search_path = m_kcls, pg_catalog;

--
-- Name: acq_provider_address_bkp; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_provider_address_bkp (
    id integer,
    valid boolean,
    address_type text,
    provider integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    fax_phone text
);


ALTER TABLE m_kcls.acq_provider_address_bkp OWNER TO evergreen;

--
-- Name: acq_provider_address_new; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_provider_address_new (
    id integer,
    valid boolean,
    address_type text,
    provider integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    fax_phone text
);


ALTER TABLE m_kcls.acq_provider_address_new OWNER TO evergreen;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls.action_circulation OWNER TO evergreen;

--
-- Name: action_circulation_legacy; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation_legacy (
    l_item_id text,
    l_patron_id text,
    l_checkout_date text,
    l_due_date text,
    l_status text,
    l_loan_rule text,
    l_out_loc text,
    x_date text
)
INHERITS (action_circulation);


ALTER TABLE m_kcls.action_circulation_legacy OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls.action_hold_request OWNER TO evergreen;

--
-- Name: action_hold_request_legacy; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request_legacy (
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text
)
INHERITS (action_hold_request);


ALTER TABLE m_kcls.action_hold_request_legacy OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls.actor_card OWNER TO evergreen;

--
-- Name: actor_dupe_barcodes; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_dupe_barcodes (
    usrname text,
    to_fix integer
);


ALTER TABLE m_kcls.actor_dupe_barcodes OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_legacy; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_legacy (
    l_patron_id text,
    l_last_circ text,
    l_exp_date text,
    l_pcode1 text,
    l_pcode2 text,
    l_pcode3 text,
    l_ptype text,
    l_homelib text,
    l_mblock text,
    l_pmessage text,
    l_pcode4 text,
    l_birth_date text,
    l_tot_loans text,
    l_tot_renew text,
    l_claim_ret text,
    l_barcode text,
    l_name text,
    l_phone1 text,
    l_phone2 text,
    l_email text,
    x_dob text
)
INHERITS (actor_usr);


ALTER TABLE m_kcls.actor_usr_legacy OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls.actor_usr_note OWNER TO evergreen;

--
-- Name: actor_usr_setting; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_setting (
    id bigint DEFAULT nextval('actor.usr_setting_id_seq'::regclass) NOT NULL,
    usr integer,
    name text,
    value text
);


ALTER TABLE m_kcls.actor_usr_setting OWNER TO evergreen;

--
-- Name: actor_usr_standing_penalty; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_standing_penalty (
    id integer DEFAULT nextval('actor.usr_standing_penalty_id_seq'::regclass) NOT NULL,
    org_unit integer,
    usr integer,
    standing_penalty integer,
    staff integer,
    set_date timestamp with time zone DEFAULT now(),
    stop_date timestamp with time zone,
    note text
);


ALTER TABLE m_kcls.actor_usr_standing_penalty OWNER TO evergreen;

--
-- Name: alert_messages; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE alert_messages (
    l_iii_bib_id text,
    l_item_seq integer,
    array_to_string text
);


ALTER TABLE m_kcls.alert_messages OWNER TO evergreen;

--
-- Name: appropriations; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE appropriations (
    l_fund_code text,
    l_amount text
);


ALTER TABLE m_kcls.appropriations OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_legacy; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_legacy (
    l_iii_bib_id text,
    l_item_seq integer,
    l_barcode text,
    l_call_num text,
    l_copy_num text,
    l_created text,
    l_icode2 text,
    l_imessage text,
    l_int_note text,
    l_item_id text,
    l_itype text,
    l_location text,
    l_lyrcirc text,
    l_message text,
    l_opacmsg text,
    l_price text,
    l_status text,
    l_tot_chkout text,
    l_tot_renew text,
    l_volume text,
    l_ytdcirc text,
    egid bigint,
    x_call_number text
)
INHERITS (asset_copy);


ALTER TABLE m_kcls.asset_copy_legacy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: auths_to_del; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE auths_to_del (
    record bigint
);


ALTER TABLE m_kcls.auths_to_del OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: best_avail_copies; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE best_avail_copies (
    hold_id integer,
    request_time timestamp with time zone,
    bib_id bigint,
    copy_id bigint,
    circ_lib integer
);


ALTER TABLE m_kcls.best_avail_copies OWNER TO evergreen;

--
-- Name: bibs_to_fix; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE bibs_to_fix (
    seq integer NOT NULL,
    done boolean DEFAULT false,
    id bigint
);


ALTER TABLE m_kcls.bibs_to_fix OWNER TO evergreen;

--
-- Name: bibs_to_fix_seq_seq; Type: SEQUENCE; Schema: m_kcls; Owner: evergreen
--

CREATE SEQUENCE bibs_to_fix_seq_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls.bibs_to_fix_seq_seq OWNER TO evergreen;

--
-- Name: bibs_to_fix_seq_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls; Owner: evergreen
--

ALTER SEQUENCE bibs_to_fix_seq_seq OWNED BY bibs_to_fix.seq;


--
-- Name: bibs_with_938; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE bibs_with_938 (
    record bigint,
    id integer NOT NULL,
    done boolean DEFAULT false
);


ALTER TABLE m_kcls.bibs_with_938 OWNER TO evergreen;

--
-- Name: bibs_with_938_id_seq; Type: SEQUENCE; Schema: m_kcls; Owner: evergreen
--

CREATE SEQUENCE bibs_with_938_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls.bibs_with_938_id_seq OWNER TO evergreen;

--
-- Name: bibs_with_938_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls; Owner: evergreen
--

ALTER SEQUENCE bibs_with_938_id_seq OWNED BY bibs_with_938.id;


--
-- Name: bibs_with_crossed_d; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE bibs_with_crossed_d (
    id bigint
);


ALTER TABLE m_kcls.bibs_with_crossed_d OWNER TO evergreen;

--
-- Name: container_biblio_record_entry_bucket; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE container_biblio_record_entry_bucket (
    id integer DEFAULT nextval('container.biblio_record_entry_bucket_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    btype text DEFAULT 'misc'::text NOT NULL,
    pub boolean DEFAULT false NOT NULL,
    create_time timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE m_kcls.container_biblio_record_entry_bucket OWNER TO evergreen;

--
-- Name: bookbag; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE bookbag (
    l_listnum integer,
    l_patron_id integer,
    l_list_name text,
    l_list_desc text,
    l_list_date timestamp without time zone,
    x_patron_id text
)
INHERITS (container_biblio_record_entry_bucket);


ALTER TABLE m_kcls.bookbag OWNER TO evergreen;

--
-- Name: container_biblio_record_entry_bucket_item; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE container_biblio_record_entry_bucket_item (
    id integer DEFAULT nextval('container.biblio_record_entry_bucket_item_id_seq'::regclass) NOT NULL,
    bucket integer,
    target_biblio_record_entry integer,
    pos integer,
    create_time timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE m_kcls.container_biblio_record_entry_bucket_item OWNER TO evergreen;

--
-- Name: bookbag_entry; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE bookbag_entry (
    l_bib_id text,
    l_dateadded timestamp without time zone,
    l_listnum integer
)
INHERITS (container_biblio_record_entry_bucket_item);


ALTER TABLE m_kcls.bookbag_entry OWNER TO evergreen;

--
-- Name: circ_rule_map; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE circ_rule_map (
    l_loan_rule text,
    l_duration text,
    l_recurring_fine text,
    l_max_fine text
);


ALTER TABLE m_kcls.circ_rule_map OWNER TO evergreen;

--
-- Name: config; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls.config OWNER TO evergreen;

--
-- Name: copy_dupe_barcodes; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE copy_dupe_barcodes (
    barcode text,
    to_fix bigint
);


ALTER TABLE m_kcls.copy_dupe_barcodes OWNER TO evergreen;

--
-- Name: copy_dupe_barcodes2; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE copy_dupe_barcodes2 (
    barcode text,
    to_fix bigint
);


ALTER TABLE m_kcls.copy_dupe_barcodes2 OWNER TO evergreen;

--
-- Name: cp_map; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE cp_map (
    provider_id integer,
    cp_id integer
);


ALTER TABLE m_kcls.cp_map OWNER TO evergreen;

--
-- Name: dist_formulas; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE dist_formulas (
    name text,
    copies integer,
    ou text,
    ou_id integer,
    loc_id integer,
    seq integer
);


ALTER TABLE m_kcls.dist_formulas OWNER TO evergreen;

--
-- Name: dist_formulas2; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE dist_formulas2 (
    name text,
    copies integer,
    ou text,
    ou_id integer,
    seq bigint,
    dist_id integer
);


ALTER TABLE m_kcls.dist_formulas2 OWNER TO evergreen;

--
-- Name: dob_1900; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE dob_1900 (
    l_patron_id text,
    l_barcode text,
    l_dob timestamp without time zone
);


ALTER TABLE m_kcls.dob_1900 OWNER TO evergreen;

--
-- Name: eres_tcns; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE eres_tcns (
    iii_bib_id text
);


ALTER TABLE m_kcls.eres_tcns OWNER TO evergreen;

--
-- Name: event_def_restore; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE event_def_restore (
    id integer,
    active boolean,
    owner integer,
    name text,
    hook text,
    validator text,
    reactor text,
    cleanup_success text,
    cleanup_failure text,
    delay interval,
    max_delay interval,
    usr_field text,
    opt_in_setting text,
    delay_field text,
    group_field text,
    template text,
    granularity text
);


ALTER TABLE m_kcls.event_def_restore OWNER TO evergreen;

--
-- Name: event_def_restore2; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE event_def_restore2 (
    id integer,
    active boolean,
    owner integer,
    name text,
    hook text,
    validator text,
    reactor text,
    cleanup_success text,
    cleanup_failure text,
    delay interval,
    max_delay interval,
    usr_field text,
    opt_in_setting text,
    delay_field text,
    group_field text,
    template text,
    granularity text
);


ALTER TABLE m_kcls.event_def_restore2 OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: fund_all; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE fund_all (
    source_code text,
    fund_code text,
    amount text,
    source_id integer,
    find_id integer,
    amount_x numeric
);


ALTER TABLE m_kcls.fund_all OWNER TO evergreen;

--
-- Name: ids_eres; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE ids_eres (
    id bigint
);


ALTER TABLE m_kcls.ids_eres OWNER TO evergreen;

--
-- Name: ids_phys; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE ids_phys (
    id bigint
);


ALTER TABLE m_kcls.ids_phys OWNER TO evergreen;

--
-- Name: int_notes; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE int_notes (
    l_iii_bib_id text,
    l_item_seq integer,
    l_note text
)
INHERITS (asset_copy_note);


ALTER TABLE m_kcls.int_notes OWNER TO evergreen;

--
-- Name: item_exceptions; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE item_exceptions (
    id bigint,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone,
    edit_date timestamp with time zone,
    copy_number integer,
    status integer,
    location integer,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean,
    deposit boolean,
    ref boolean,
    holdable boolean,
    deposit_amount numeric(6,2),
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean,
    deleted boolean,
    floating boolean,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean,
    cost numeric(8,2),
    l_iii_bib_id text,
    l_item_seq integer,
    l_barcode text,
    l_call_num text,
    l_copy_num text,
    l_created text,
    l_icode2 text,
    l_imessage text,
    l_int_note text,
    l_item_id text,
    l_itype text,
    l_location text,
    l_lyrcirc text,
    l_message text,
    l_opacmsg text,
    l_price text,
    l_status text,
    l_tot_chkout text,
    l_tot_renew text,
    l_volume text,
    l_ytdcirc text,
    egid bigint,
    x_call_number text
);


ALTER TABLE m_kcls.item_exceptions OWNER TO evergreen;

--
-- Name: item_status_map; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE item_status_map (
    l_status text,
    eg_status integer
);


ALTER TABLE m_kcls.item_status_map OWNER TO evergreen;

--
-- Name: jan21_pos; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE jan21_pos (
    purchase_order integer,
    state text
);


ALTER TABLE m_kcls.jan21_pos OWNER TO evergreen;

--
-- Name: km_move; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE km_move (
    id bigint,
    job integer NOT NULL,
    done boolean DEFAULT false
);


ALTER TABLE m_kcls.km_move OWNER TO evergreen;

--
-- Name: km_move_job_seq; Type: SEQUENCE; Schema: m_kcls; Owner: evergreen
--

CREATE SEQUENCE km_move_job_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls.km_move_job_seq OWNER TO evergreen;

--
-- Name: km_move_job_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls; Owner: evergreen
--

ALTER SEQUENCE km_move_job_seq OWNED BY km_move.job;


--
-- Name: legacy_circ_count; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE legacy_circ_count (
    id bigint,
    circ_count integer
);


ALTER TABLE m_kcls.legacy_circ_count OWNER TO evergreen;

--
-- Name: locations; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE locations (
    l_location text,
    l_label text
)
INHERITS (asset_copy_location);


ALTER TABLE m_kcls.locations OWNER TO evergreen;

--
-- Name: messages; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE messages (
    l_iii_bib_id text,
    l_item_seq integer,
    l_note text
);


ALTER TABLE m_kcls.messages OWNER TO evergreen;

--
-- Name: metabib_field; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE metabib_field (
    id integer,
    field_class text,
    name text,
    label text,
    xpath text,
    weight integer,
    format text,
    search_field boolean,
    facet_field boolean,
    facet_xpath text
);


ALTER TABLE m_kcls.metabib_field OWNER TO evergreen;

--
-- Name: metabib_field_index_norm_map; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE metabib_field_index_norm_map (
    id integer,
    field integer,
    norm integer,
    params text,
    pos integer
);


ALTER TABLE m_kcls.metabib_field_index_norm_map OWNER TO evergreen;

--
-- Name: metabib_search_alias; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE metabib_search_alias (
    alias text,
    field_class text,
    field integer
);


ALTER TABLE m_kcls.metabib_search_alias OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls.money_grocery OWNER TO evergreen;

--
-- Name: money_grocery_legacy; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery_legacy (
    l_barcode text,
    l_patron_id text,
    l_amount text
)
INHERITS (money_grocery);


ALTER TABLE m_kcls.money_grocery_legacy OWNER TO evergreen;

--
-- Name: netlibrary_bib_ids; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE netlibrary_bib_ids (
    id bigint,
    done boolean DEFAULT false
);


ALTER TABLE m_kcls.netlibrary_bib_ids OWNER TO evergreen;

--
-- Name: old2new; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE old2new (
    l_iii_bib_id text,
    egid bigint
);


ALTER TABLE m_kcls.old2new OWNER TO evergreen;

--
-- Name: orig_notice_setting; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE orig_notice_setting (
    id bigint,
    usr integer,
    name text,
    value text
);


ALTER TABLE m_kcls.orig_notice_setting OWNER TO evergreen;

--
-- Name: orig_relevance; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE orig_relevance (
    id integer,
    active boolean,
    field integer,
    bump_type text,
    multiplier numeric
);


ALTER TABLE m_kcls.orig_relevance OWNER TO evergreen;

--
-- Name: ou_patrons; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE ou_patrons (
    l_patron_num text,
    l_barcode text,
    id integer
);


ALTER TABLE m_kcls.ou_patrons OWNER TO evergreen;

--
-- Name: patron_addr; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE patron_addr (
    l_patron_id text,
    l_addr_type text,
    l_addr_seq integer,
    l_addr_line integer,
    l_value text
);


ALTER TABLE m_kcls.patron_addr OWNER TO evergreen;

--
-- Name: patron_addr_compressed; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE patron_addr_compressed (
    l_patron_id text,
    l_addr_type text,
    l_addr_seq integer,
    array_accum text[],
    parsed text[]
);


ALTER TABLE m_kcls.patron_addr_compressed OWNER TO evergreen;

--
-- Name: patron_extras; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE patron_extras (
    l_patron_id text,
    l_barcode text,
    l_filter text,
    l_guardian text,
    l_pickupau text,
    l_halias text,
    l_fresh text,
    l_addr_alert text,
    l_owed text
);


ALTER TABLE m_kcls.patron_extras OWNER TO evergreen;

--
-- Name: patron_note; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE patron_note (
    l_patron_id text,
    l_title text,
    l_value text
);


ALTER TABLE m_kcls.patron_note OWNER TO evergreen;

--
-- Name: patrons_with_history; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE patrons_with_history (
    usr integer
);


ALTER TABLE m_kcls.patrons_with_history OWNER TO evergreen;

--
-- Name: pcode3_map; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE pcode3_map (
    code text,
    value text
);


ALTER TABLE m_kcls.pcode3_map OWNER TO evergreen;

--
-- Name: ptype_map; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE ptype_map (
    l_p_type text,
    l_grp text,
    grp_id integer
);


ALTER TABLE m_kcls.ptype_map OWNER TO evergreen;

--
-- Name: rejected_circs; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE rejected_circs (
    id bigint,
    usr integer,
    xact_start timestamp with time zone,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone,
    duration interval,
    fine_interval interval,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean,
    desk_renewal boolean,
    opac_renewal boolean,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint,
    l_item_id text,
    l_patron_id text,
    l_checkout_date text,
    l_due_date text,
    l_status text,
    l_loan_rule text,
    l_out_loc text
);


ALTER TABLE m_kcls.rejected_circs OWNER TO evergreen;

--
-- Name: rejected_holds; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE rejected_holds (
    id integer,
    request_time timestamp with time zone,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean,
    frozen boolean,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean,
    shelf_expire_time timestamp with time zone,
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text
);


ALTER TABLE m_kcls.rejected_holds OWNER TO evergreen;

--
-- Name: relevance_adjustment; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE relevance_adjustment (
    id integer,
    active boolean,
    field integer,
    bump_type text,
    multiplier numeric
);


ALTER TABLE m_kcls.relevance_adjustment OWNER TO evergreen;

--
-- Name: sources; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE sources (
    source_code text,
    amount numeric,
    source_id integer
);


ALTER TABLE m_kcls.sources OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls.sql_log OWNER TO evergreen;

--
-- Name: summer_patrons_to_delete; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE summer_patrons_to_delete (
    id integer
);


ALTER TABLE m_kcls.summer_patrons_to_delete OWNER TO evergreen;

--
-- Name: usr_not_migrated_per_ptype; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE usr_not_migrated_per_ptype (
    id integer,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean,
    master_account boolean,
    super_user boolean,
    barred boolean,
    deleted boolean,
    juvenile boolean,
    usrgroup integer,
    claims_returned_count integer,
    credit_forward_balance numeric(6,2),
    last_xact_id text,
    alert_message text,
    create_date timestamp with time zone,
    expire_date timestamp with time zone,
    claims_never_checked_out_count integer,
    l_patron_id text,
    l_last_circ text,
    l_exp_date text,
    l_pcode1 text,
    l_pcode2 text,
    l_pcode3 text,
    l_ptype text,
    l_homelib text,
    l_mblock text,
    l_pmessage text,
    l_pcode4 text,
    l_birth_date text,
    l_tot_loans text,
    l_tot_renew text,
    l_claim_ret text,
    l_barcode text,
    l_name text,
    l_phone1 text,
    l_phone2 text,
    l_email text,
    x_dob text
);


ALTER TABLE m_kcls.usr_not_migrated_per_ptype OWNER TO evergreen;

--
-- Name: vols_to_delete; Type: TABLE; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE TABLE vols_to_delete (
    volume_id bigint
);


ALTER TABLE m_kcls.vols_to_delete OWNER TO evergreen;

SET search_path = m_kcls2, pg_catalog;

--
-- Name: acq_fund; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_fund (
    id integer DEFAULT nextval('acq.fund_id_seq'::regclass) NOT NULL,
    org integer,
    name text,
    year integer DEFAULT date_part('year'::text, now()) NOT NULL,
    currency_type text,
    code text,
    rollover boolean DEFAULT false NOT NULL,
    propagate boolean DEFAULT true NOT NULL,
    active boolean DEFAULT true NOT NULL,
    balance_warning_percent integer,
    balance_stop_percent integer
);


ALTER TABLE m_kcls2.acq_fund OWNER TO evergreen;

--
-- Name: acq_fund_legacy; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_fund_legacy (
    l_code text,
    l_name text,
    l_path text,
    l_type text
)
INHERITS (acq_fund);


ALTER TABLE m_kcls2.acq_fund_legacy OWNER TO evergreen;

--
-- Name: acq_provider; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_provider (
    id integer DEFAULT nextval('acq.provider_id_seq'::regclass) NOT NULL,
    name text,
    owner integer,
    currency_type text,
    code text,
    holding_tag text,
    san text,
    edi_default integer,
    active boolean DEFAULT true NOT NULL,
    prepayment_required boolean DEFAULT false NOT NULL,
    url text,
    email text,
    phone text,
    fax_phone text,
    default_claim_policy integer
);


ALTER TABLE m_kcls2.acq_provider OWNER TO evergreen;

--
-- Name: acq_provider_address; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_provider_address (
    id integer DEFAULT nextval('acq.provider_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    address_type text,
    provider integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    fax_phone text
);


ALTER TABLE m_kcls2.acq_provider_address OWNER TO evergreen;

--
-- Name: acq_provider_address_legacy; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_provider_address_legacy (
    l_lines text[]
)
INHERITS (acq_provider_address);


ALTER TABLE m_kcls2.acq_provider_address_legacy OWNER TO evergreen;

--
-- Name: acq_provider_contact; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_provider_contact (
    id integer DEFAULT nextval('acq.provider_contact_id_seq'::regclass) NOT NULL,
    provider integer,
    name text,
    role text,
    email text,
    phone text
);


ALTER TABLE m_kcls2.acq_provider_contact OWNER TO evergreen;

--
-- Name: acq_provider_contact_address; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_provider_contact_address (
    id integer DEFAULT nextval('acq.provider_contact_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    address_type text,
    contact integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    fax_phone text
);


ALTER TABLE m_kcls2.acq_provider_contact_address OWNER TO evergreen;

--
-- Name: acq_provider_contact_legacy; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_provider_contact_legacy (
    l_contact text[]
)
INHERITS (acq_provider_contact);


ALTER TABLE m_kcls2.acq_provider_contact_legacy OWNER TO evergreen;

--
-- Name: acq_provider_legacy; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_provider_legacy (
    l_claimcycle text,
    l_vcode3 text,
    l_gir_code text,
    l_venname text,
    l_vencode text,
    l_sansuffix text,
    l_contact text,
    l_address1 text,
    l_phone_num text,
    l_fax text,
    l_note1 text,
    l_note2 text,
    l_note3 text,
    l_address2 text,
    l_email text,
    l_url text
)
INHERITS (acq_provider);


ALTER TABLE m_kcls2.acq_provider_legacy OWNER TO evergreen;

--
-- Name: acq_provider_note; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_provider_note (
    id integer DEFAULT nextval('acq.provider_note_id_seq'::regclass) NOT NULL,
    provider integer,
    creator integer,
    editor integer,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    edit_time timestamp with time zone DEFAULT now() NOT NULL,
    value text
);


ALTER TABLE m_kcls2.acq_provider_note OWNER TO evergreen;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls2.action_circulation OWNER TO evergreen;

--
-- Name: action_circulation_legacy; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation_legacy (
    l_item_id text,
    l_patron_id text,
    l_checkout_date text,
    l_due_date text,
    l_status text,
    l_loan_rule text,
    l_out_loc text,
    x_date bigint
)
INHERITS (action_circulation)
WITH (autovacuum_enabled=false);


ALTER TABLE m_kcls2.action_circulation_legacy OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls2.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls2.action_hold_request OWNER TO evergreen;

--
-- Name: action_hold_request_legacy; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request_legacy (
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text
)
INHERITS (action_hold_request)
WITH (autovacuum_enabled=false);


ALTER TABLE m_kcls2.action_hold_request_legacy OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls2.actor_card OWNER TO evergreen;

--
-- Name: actor_dupe_barcodes; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_dupe_barcodes (
    usrname text,
    to_fix integer
);


ALTER TABLE m_kcls2.actor_dupe_barcodes OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls2.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls2.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls2.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls2.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls2.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_legacy; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_legacy (
    l_patron_id text,
    l_last_circ text,
    l_exp_date text,
    l_pcode1 text,
    l_pcode2 text,
    l_pcode3 text,
    l_ptype text,
    l_homelib text,
    l_mblock text,
    l_pmessage text,
    l_pcode4 text,
    l_birth_date text,
    l_tot_loans text,
    l_tot_renew text,
    l_claim_ret text,
    l_barcode text,
    l_name text,
    l_phone1 text,
    l_phone2 text,
    l_email text,
    x_dob text
)
INHERITS (actor_usr)
WITH (autovacuum_enabled=false);


ALTER TABLE m_kcls2.actor_usr_legacy OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls2.actor_usr_note OWNER TO evergreen;

--
-- Name: actor_usr_setting; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_setting (
    id bigint DEFAULT nextval('actor.usr_setting_id_seq'::regclass) NOT NULL,
    usr integer,
    name text,
    value text
);


ALTER TABLE m_kcls2.actor_usr_setting OWNER TO evergreen;

--
-- Name: alert_messages; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE alert_messages (
    l_iii_bib_id text,
    l_item_seq integer,
    array_to_string text
);


ALTER TABLE m_kcls2.alert_messages OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls2.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls2.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_legacy; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_legacy (
    l_iii_bib_id text,
    l_item_seq integer,
    l_barcode text,
    l_call_num text,
    l_copy_num text,
    l_created text,
    l_icode2 text,
    l_imessage text,
    l_int_note text,
    l_item_id text,
    l_itype text,
    l_location text,
    l_lyrcirc text,
    l_message text,
    l_opacmsg text,
    l_price text,
    l_status text,
    l_tot_chkout text,
    l_tot_renew text,
    l_volume text,
    l_ytdcirc text,
    egid bigint,
    x_call_number text,
    x_location text
)
INHERITS (asset_copy)
WITH (autovacuum_enabled=false);


ALTER TABLE m_kcls2.asset_copy_legacy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls2.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_location_backup; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location_backup (
    id integer,
    name text,
    owning_lib integer,
    holdable boolean,
    hold_verify boolean,
    opac_visible boolean,
    circulate boolean,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls2.asset_copy_location_backup OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls2.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls2.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls2.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls2.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls2.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls2; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls2.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls2; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls2.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls2; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls2.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls2; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls2.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls2; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls2.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls2; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls2.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls2; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls2.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls2; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: container_biblio_record_entry_bucket; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE container_biblio_record_entry_bucket (
    id integer DEFAULT nextval('container.biblio_record_entry_bucket_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    btype text DEFAULT 'misc'::text NOT NULL,
    pub boolean DEFAULT false NOT NULL,
    create_time timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE m_kcls2.container_biblio_record_entry_bucket OWNER TO evergreen;

--
-- Name: bookbag; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE bookbag (
    l_listnum integer,
    l_patron_id integer,
    l_list_name text,
    l_list_desc text,
    l_list_date timestamp without time zone,
    x_patron_id text
)
INHERITS (container_biblio_record_entry_bucket)
WITH (autovacuum_enabled=false);


ALTER TABLE m_kcls2.bookbag OWNER TO evergreen;

--
-- Name: container_biblio_record_entry_bucket_item; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE container_biblio_record_entry_bucket_item (
    id integer DEFAULT nextval('container.biblio_record_entry_bucket_item_id_seq'::regclass) NOT NULL,
    bucket integer,
    target_biblio_record_entry integer,
    pos integer,
    create_time timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE m_kcls2.container_biblio_record_entry_bucket_item OWNER TO evergreen;

--
-- Name: bookbag_entry; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE bookbag_entry (
    l_bib_id text,
    l_dateadded timestamp without time zone,
    l_listnum integer
)
INHERITS (container_biblio_record_entry_bucket_item)
WITH (autovacuum_enabled=false);


ALTER TABLE m_kcls2.bookbag_entry OWNER TO evergreen;

--
-- Name: circ_rule_map; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE circ_rule_map (
    l_loan_rule text,
    l_duration text,
    l_recurring_fine text,
    l_max_fine text
);


ALTER TABLE m_kcls2.circ_rule_map OWNER TO evergreen;

--
-- Name: config; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls2.config OWNER TO evergreen;

--
-- Name: copy_dupe_barcodes; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE copy_dupe_barcodes (
    barcode text,
    to_fix bigint
);


ALTER TABLE m_kcls2.copy_dupe_barcodes OWNER TO evergreen;

--
-- Name: copy_name_map; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE copy_name_map (
    orig_code text,
    name text,
    new_code text
);


ALTER TABLE m_kcls2.copy_name_map OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls2.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: int_notes; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE int_notes (
    l_iii_bib_id text,
    l_item_seq integer,
    l_note text
)
INHERITS (asset_copy_note)
WITH (autovacuum_enabled=false);


ALTER TABLE m_kcls2.int_notes OWNER TO evergreen;

--
-- Name: item_exceptions; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE item_exceptions (
    id bigint,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone,
    edit_date timestamp with time zone,
    copy_number integer,
    status integer,
    location integer,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean,
    deposit boolean,
    ref boolean,
    holdable boolean,
    deposit_amount numeric(6,2),
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean,
    deleted boolean,
    floating boolean,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean,
    cost numeric(8,2),
    l_iii_bib_id text,
    l_item_seq integer,
    l_barcode text,
    l_call_num text,
    l_copy_num text,
    l_created text,
    l_icode2 text,
    l_imessage text,
    l_int_note text,
    l_item_id text,
    l_itype text,
    l_location text,
    l_lyrcirc text,
    l_message text,
    l_opacmsg text,
    l_price text,
    l_status text,
    l_tot_chkout text,
    l_tot_renew text,
    l_volume text,
    l_ytdcirc text,
    egid bigint,
    x_call_number text
);


ALTER TABLE m_kcls2.item_exceptions OWNER TO evergreen;

--
-- Name: item_status_map; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE item_status_map (
    l_status text,
    eg_status integer
);


ALTER TABLE m_kcls2.item_status_map OWNER TO evergreen;

--
-- Name: messages; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE messages (
    l_iii_bib_id text,
    l_item_seq integer,
    l_note text
)
WITH (autovacuum_enabled=false);


ALTER TABLE m_kcls2.messages OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls2.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls2.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls2.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls2.money_grocery OWNER TO evergreen;

--
-- Name: money_grocery_legacy; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery_legacy (
    l_barcode text,
    l_patron_id text,
    l_amount text
)
INHERITS (money_grocery);


ALTER TABLE m_kcls2.money_grocery_legacy OWNER TO evergreen;

--
-- Name: old2new; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE old2new (
    l_iii_bib_id text,
    egid bigint
);


ALTER TABLE m_kcls2.old2new OWNER TO evergreen;

--
-- Name: ou_map; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE ou_map (
    l_ou text,
    l_lib text,
    l_loc text,
    l_loc_name text,
    l_location text,
    ou_id integer
);


ALTER TABLE m_kcls2.ou_map OWNER TO evergreen;

--
-- Name: patron_addr; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE patron_addr (
    l_patron_id text,
    l_addr_type text,
    l_addr_seq integer,
    l_addr_line integer,
    l_value text
);


ALTER TABLE m_kcls2.patron_addr OWNER TO evergreen;

--
-- Name: patron_addr_compressed; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE patron_addr_compressed (
    l_patron_id text,
    l_addr_type text,
    l_addr_seq integer,
    array_accum text[],
    parsed text[]
)
WITH (autovacuum_enabled=false);


ALTER TABLE m_kcls2.patron_addr_compressed OWNER TO evergreen;

--
-- Name: patron_extras; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE patron_extras (
    l_patron_id text,
    l_barcode text,
    l_filter text,
    l_guardian text,
    l_pickupau text,
    l_halias text,
    l_fresh text,
    l_addr_alert text,
    l_owed text
)
WITH (autovacuum_enabled=false);


ALTER TABLE m_kcls2.patron_extras OWNER TO evergreen;

--
-- Name: patron_note; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE patron_note (
    l_patron_id text,
    l_title text,
    l_value text
);


ALTER TABLE m_kcls2.patron_note OWNER TO evergreen;

--
-- Name: ptype_map; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE ptype_map (
    l_p_type text,
    l_grp text,
    grp_id integer
);


ALTER TABLE m_kcls2.ptype_map OWNER TO evergreen;

--
-- Name: rejected_circs; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE rejected_circs (
    id bigint,
    usr integer,
    xact_start timestamp with time zone,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone,
    duration interval,
    fine_interval interval,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean,
    desk_renewal boolean,
    opac_renewal boolean,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint,
    l_item_id text,
    l_patron_id text,
    l_checkout_date text,
    l_due_date text,
    l_status text,
    l_loan_rule text,
    l_out_loc text
);


ALTER TABLE m_kcls2.rejected_circs OWNER TO evergreen;

--
-- Name: rejected_holds; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE rejected_holds (
    id integer,
    request_time timestamp with time zone,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean,
    frozen boolean,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean,
    shelf_expire_time timestamp with time zone,
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text
);


ALTER TABLE m_kcls2.rejected_holds OWNER TO evergreen;

--
-- Name: rename_loc_map; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE rename_loc_map (
    l_location text,
    location integer,
    code text,
    name text,
    new_code text
);


ALTER TABLE m_kcls2.rename_loc_map OWNER TO evergreen;

--
-- Name: root; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE root (
    split_part text
);


ALTER TABLE m_kcls2.root OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls2.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls2.sql_log OWNER TO evergreen;

--
-- Name: transend; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE transend (
    l_iii_bib_id text,
    egid integer
);


ALTER TABLE m_kcls2.transend OWNER TO evergreen;

--
-- Name: usr_not_migrated_per_ptype; Type: TABLE; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE TABLE usr_not_migrated_per_ptype (
    id integer,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean,
    master_account boolean,
    super_user boolean,
    barred boolean,
    deleted boolean,
    juvenile boolean,
    usrgroup integer,
    claims_returned_count integer,
    credit_forward_balance numeric(6,2),
    last_xact_id text,
    alert_message text,
    create_date timestamp with time zone,
    expire_date timestamp with time zone,
    claims_never_checked_out_count integer,
    l_patron_id text,
    l_last_circ text,
    l_exp_date text,
    l_pcode1 text,
    l_pcode2 text,
    l_pcode3 text,
    l_ptype text,
    l_homelib text,
    l_mblock text,
    l_pmessage text,
    l_pcode4 text,
    l_birth_date text,
    l_tot_loans text,
    l_tot_renew text,
    l_claim_ret text,
    l_barcode text,
    l_name text,
    l_phone1 text,
    l_phone2 text,
    l_email text,
    x_dob text
);


ALTER TABLE m_kcls2.usr_not_migrated_per_ptype OWNER TO evergreen;

SET search_path = m_kcls3, pg_catalog;

--
-- Name: acq_fund; Type: TABLE; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_fund (
    id integer DEFAULT nextval('acq.fund_id_seq'::regclass) NOT NULL,
    org integer,
    name text,
    year integer DEFAULT date_part('year'::text, now()) NOT NULL,
    currency_type text,
    code text,
    rollover boolean DEFAULT false NOT NULL,
    propagate boolean DEFAULT true NOT NULL,
    active boolean DEFAULT true NOT NULL,
    balance_warning_percent integer,
    balance_stop_percent integer
);


ALTER TABLE m_kcls3.acq_fund OWNER TO evergreen;

--
-- Name: acq_fund_2; Type: TABLE; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE TABLE acq_fund_2 (
    id integer,
    org integer,
    name text,
    year integer,
    currency_type text,
    code text,
    rollover boolean,
    propagate boolean,
    active boolean,
    balance_warning_percent integer,
    balance_stop_percent integer,
    l_amount numeric,
    l_source integer,
    l_tag text
);


ALTER TABLE m_kcls3.acq_fund_2 OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls3.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls3; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls3.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls3; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls3.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls3; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls3.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls3; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls3.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls3; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls3.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls3; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls3.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls3; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls3.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls3; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: config; Type: TABLE; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls3.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls3.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls3.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls3.sql_log OWNER TO evergreen;

SET search_path = m_kcls_call_fix, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_call_fix.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_call_fix.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_call_fix.action_hold_request OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_call_fix.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_call_fix.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_call_fix.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_call_fix.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_call_fix.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_call_fix.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_call_fix.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_call_fix.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_call_fix.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_call_fix.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_call_fix.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_call_fix.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_call_fix.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_call_fix.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_call_fix.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_call_fix; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_call_fix.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_call_fix; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_call_fix.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_call_fix; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_call_fix.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_call_fix; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_call_fix.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_call_fix; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_call_fix.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_call_fix; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_call_fix.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_call_fix; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_call_fix.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_call_fix; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: cn_with_one_item; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE cn_with_one_item (
    orig_call_id bigint
);


ALTER TABLE m_kcls_call_fix.cn_with_one_item OWNER TO evergreen;

--
-- Name: config; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_call_fix.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_call_fix.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: item_calls; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE item_calls (
    copy_id bigint,
    orig_call_id bigint,
    owning_lib integer,
    record bigint,
    circ_lib integer,
    label text,
    only_one boolean DEFAULT false,
    new_call_id integer
);


ALTER TABLE m_kcls_call_fix.item_calls OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_call_fix.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_call_fix.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_call_fix.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_call_fix.money_grocery OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_call_fix.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_call_fix.sql_log OWNER TO evergreen;

SET search_path = m_kcls_circhist, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_circhist.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_circhist.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_circhist.action_hold_request OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_circhist.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_circhist.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_circhist.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_circhist.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_circhist.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_circhist.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_circhist.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_circhist.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_circhist.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_circhist.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_circhist.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_circhist.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_circhist.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_circhist.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_circhist.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_circhist; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_circhist.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_circhist.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_circhist; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_circhist.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_circhist.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_circhist; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_circhist.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_circhist.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_circhist; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_circhist.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: circhist; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE circhist (
    l_patron_id text,
    l_bib_num text,
    l_item_num text,
    l_checkout date,
    x_date text,
    done boolean DEFAULT false
)
INHERITS (action_circulation);


ALTER TABLE m_kcls_circhist.circhist OWNER TO evergreen;

--
-- Name: config; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_circhist.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_circhist.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_circhist.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_circhist.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_circhist.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_circhist.money_grocery OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_circhist.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_circhist.sql_log OWNER TO evergreen;

SET search_path = m_kcls_gap, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_gap.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_gap.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_gap.action_hold_request OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_gap.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_gap.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_gap.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_gap.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_gap.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_gap.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_gap.actor_usr_note OWNER TO evergreen;

--
-- Name: alert_messages; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE alert_messages (
    l_iii_bib_id text,
    l_item_seq integer,
    array_to_string text
);


ALTER TABLE m_kcls_gap.alert_messages OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_gap.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_gap.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_legacy; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_legacy (
    l_iii_bib_id text,
    l_item_seq integer,
    l_barcode text,
    l_call_num text,
    l_copy_num text,
    l_created text,
    l_icode2 text,
    l_imessage text,
    l_int_note text,
    l_item_id text,
    l_itype text,
    l_location text,
    l_lyrcirc text,
    l_message text,
    l_opacmsg text,
    l_price text,
    l_status text,
    l_tot_chkout text,
    l_tot_renew text,
    l_volume text,
    l_ytdcirc text,
    egid bigint,
    x_call_number text
)
INHERITS (asset_copy);


ALTER TABLE m_kcls_gap.asset_copy_legacy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_gap.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_gap.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_gap.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_gap.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_gap.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_gap.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_gap; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_gap.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_gap; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_gap.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_gap; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_gap.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_gap; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_gap.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_gap; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_gap.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_gap; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_gap.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_gap; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_gap.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_gap; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: config; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_gap.config OWNER TO evergreen;

--
-- Name: copy_dupe_barcodes; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE copy_dupe_barcodes (
    barcode text,
    to_fix bigint
);


ALTER TABLE m_kcls_gap.copy_dupe_barcodes OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_gap.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: int_notes; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE int_notes (
    l_iii_bib_id text,
    l_item_seq integer,
    l_note text
)
INHERITS (asset_copy_note);


ALTER TABLE m_kcls_gap.int_notes OWNER TO evergreen;

--
-- Name: item_exceptions; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE item_exceptions (
    id bigint,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone,
    edit_date timestamp with time zone,
    copy_number integer,
    status integer,
    location integer,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean,
    deposit boolean,
    ref boolean,
    holdable boolean,
    deposit_amount numeric(6,2),
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean,
    deleted boolean,
    floating boolean,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean,
    cost numeric(8,2),
    l_iii_bib_id text,
    l_item_seq integer,
    l_barcode text,
    l_call_num text,
    l_copy_num text,
    l_created text,
    l_icode2 text,
    l_imessage text,
    l_int_note text,
    l_item_id text,
    l_itype text,
    l_location text,
    l_lyrcirc text,
    l_message text,
    l_opacmsg text,
    l_price text,
    l_status text,
    l_tot_chkout text,
    l_tot_renew text,
    l_volume text,
    l_ytdcirc text,
    egid bigint,
    x_call_number text
);


ALTER TABLE m_kcls_gap.item_exceptions OWNER TO evergreen;

--
-- Name: messages; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE messages (
    l_iii_bib_id text,
    l_item_seq integer,
    l_note text
);


ALTER TABLE m_kcls_gap.messages OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_gap.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_gap.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_gap.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_gap.money_grocery OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_gap.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_gap.sql_log OWNER TO evergreen;

SET search_path = m_kcls_holds, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_holds.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_holds.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_holds.action_hold_request OWNER TO evergreen;

--
-- Name: action_hold_request_legacy; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request_legacy (
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text
)
INHERITS (action_hold_request);


ALTER TABLE m_kcls_holds.action_hold_request_legacy OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_holds.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_holds.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_holds.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_holds.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_holds.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_holds.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_holds.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_holds.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_holds.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_holds.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_holds.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_holds.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_holds.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_holds.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_holds.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holds; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holds.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holds; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holds.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holds; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holds.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holds; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holds.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holds; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holds.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holds; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holds.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holds; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holds.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holds; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: config; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_holds.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_holds.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_holds.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_holds.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_holds.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_holds.money_grocery OWNER TO evergreen;

--
-- Name: rejected_holds; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE rejected_holds (
    id integer,
    request_time timestamp with time zone,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean,
    frozen boolean,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean,
    shelf_expire_time timestamp with time zone,
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text
);


ALTER TABLE m_kcls_holds.rejected_holds OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_holds.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_holds.sql_log OWNER TO evergreen;

SET search_path = m_kcls_holdsall, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_holdsall.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_holdsall.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_holdsall.action_hold_request OWNER TO evergreen;

--
-- Name: action_hold_request_legacy; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request_legacy (
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text,
    changed boolean
)
INHERITS (action_hold_request);


ALTER TABLE m_kcls_holdsall.action_hold_request_legacy OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_holdsall.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_holdsall.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_holdsall.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_holdsall.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_holdsall.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_holdsall.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_holdsall.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_holdsall.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_holdsall.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_holdsall.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_holdsall.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_holdsall.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_holdsall.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_holdsall.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_holdsall.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsall; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsall.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holdsall.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsall; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsall.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holdsall.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsall; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsall.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holdsall.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsall; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsall.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: config; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_holdsall.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_holdsall.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_holdsall.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_holdsall.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_holdsall.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_holdsall.money_grocery OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_holdsall.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_holdsall.sql_log OWNER TO evergreen;

SET search_path = m_kcls_holdsall2, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_holdsall2.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_holdsall2.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_holdsall2.action_hold_request OWNER TO evergreen;

--
-- Name: action_hold_request_legacy; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request_legacy (
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text,
    changed boolean
)
INHERITS (action_hold_request);


ALTER TABLE m_kcls_holdsall2.action_hold_request_legacy OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_holdsall2.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_holdsall2.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_holdsall2.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_holdsall2.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_holdsall2.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_holdsall2.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_holdsall2.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_holdsall2.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_holdsall2.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_holdsall2.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_holdsall2.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_holdsall2.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_holdsall2.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_holdsall2.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_holdsall2.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsall2; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsall2.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holdsall2.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsall2; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsall2.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holdsall2.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsall2; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsall2.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holdsall2.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsall2; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsall2.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: config; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_holdsall2.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_holdsall2.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_holdsall2.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_holdsall2.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_holdsall2.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_holdsall2.money_grocery OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_holdsall2.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_holdsall2.sql_log OWNER TO evergreen;

SET search_path = m_kcls_holdsall3, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_holdsall3.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_holdsall3.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_holdsall3.action_hold_request OWNER TO evergreen;

--
-- Name: action_hold_request_legacy; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request_legacy (
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text,
    changed boolean
)
INHERITS (action_hold_request);


ALTER TABLE m_kcls_holdsall3.action_hold_request_legacy OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_holdsall3.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_holdsall3.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_holdsall3.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_holdsall3.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_holdsall3.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_holdsall3.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_holdsall3.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_holdsall3.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_holdsall3.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_holdsall3.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_holdsall3.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_holdsall3.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_holdsall3.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_holdsall3.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_holdsall3.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsall3; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsall3.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holdsall3.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsall3; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsall3.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holdsall3.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsall3; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsall3.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holdsall3.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsall3; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsall3.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: config; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_holdsall3.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_holdsall3.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_holdsall3.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_holdsall3.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_holdsall3.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_holdsall3.money_grocery OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_holdsall3.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_holdsall3.sql_log OWNER TO evergreen;

SET search_path = m_kcls_holdsfix, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_holdsfix.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_holdsfix.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_holdsfix.action_hold_request OWNER TO evergreen;

--
-- Name: action_hold_request_legacy; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request_legacy (
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text
)
INHERITS (action_hold_request);


ALTER TABLE m_kcls_holdsfix.action_hold_request_legacy OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_holdsfix.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_holdsfix.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_holdsfix.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_holdsfix.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_holdsfix.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_holdsfix.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_holdsfix.actor_usr_note OWNER TO evergreen;

--
-- Name: all_prod_holds; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE all_prod_holds (
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text
);


ALTER TABLE m_kcls_holdsfix.all_prod_holds OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_holdsfix.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_holdsfix.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_holdsfix.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_holdsfix.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_holdsfix.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_holdsfix.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_holdsfix.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_holdsfix.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsfix; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsfix.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holdsfix.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsfix; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsfix.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holdsfix.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsfix; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsfix.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_holdsfix.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_holdsfix; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_holdsfix.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: config; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_holdsfix.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_holdsfix.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: holds_to_delete; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE holds_to_delete (
    id integer
);


ALTER TABLE m_kcls_holdsfix.holds_to_delete OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_holdsfix.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_holdsfix.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_holdsfix.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_holdsfix.money_grocery OWNER TO evergreen;

--
-- Name: rejected_holds; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE rejected_holds (
    id integer,
    request_time timestamp with time zone,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean,
    frozen boolean,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean,
    shelf_expire_time timestamp with time zone,
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text
);


ALTER TABLE m_kcls_holdsfix.rejected_holds OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_holdsfix.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_holdsfix.sql_log OWNER TO evergreen;

--
-- Name: to_keep; Type: TABLE; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE TABLE to_keep (
    l_nkey text,
    l_nholdrecnumber text,
    l_npatronnumber text,
    l_bitemhold text,
    l_sitemlocation text,
    l_spickuplocation text,
    l_stitle text,
    l_snormtitle text,
    l_spatronname text,
    l_snormpatronname text,
    l_timestampdateplaced text,
    l_timestampnnadate text,
    l_timestampnnbdate text,
    l_spatronphone text,
    l_spatronemail text,
    l_scallnum text,
    l_sholdposition text,
    l_sitemstatus text,
    l_sitembarcode text,
    l_bonholdshelf text,
    l_sholdnote text,
    l_snormholdnote text,
    l_sholdstatus text,
    l_snormholdstatus text,
    l_slimitlocation text,
    l_slongtitle text,
    l_snormlongtitle text,
    l_slongauthor text,
    l_snormlongauthor text,
    l_ntotalattacheditems text,
    l_ntotalattacheditemspickup text,
    l_nbibrecnum text,
    l_cmaterialtype text
);


ALTER TABLE m_kcls_holdsfix.to_keep OWNER TO evergreen;

SET search_path = m_kcls_items2, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_items2.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_items2.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_items2.action_hold_request OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_items2.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_items2.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_items2.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_items2.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_items2.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_items2.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_items2.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_items2.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_items2.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_legacy; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_legacy (
    l_iii_bib_id text,
    l_item_seq integer,
    l_barcode text,
    l_call_num text,
    l_copy_num text,
    l_created text,
    l_updated text,
    l_icode text,
    l_internal_use text,
    l_icode1 text,
    l_icode2 text,
    l_imessage text,
    l_int_note text,
    l_item_id text,
    l_itype text,
    l_invda text,
    l_intnote text,
    l_location text,
    l_lyrcirc text,
    l_message text,
    l_opacmsg text,
    l_price text,
    l_status text,
    l_tot_chkout text,
    l_tot_renew text,
    l_volume text,
    l_ytdcirc text,
    egid bigint,
    x_call_number text
)
INHERITS (asset_copy);


ALTER TABLE m_kcls_items2.asset_copy_legacy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_items2.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_items2.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_items2.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_items2.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_items2.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_items2.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_items2; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_items2.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_items2; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_items2.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_items2; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_items2.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_items2; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_items2.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_items2; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_items2.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_items2; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_items2.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_items2; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_items2.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_items2; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: config; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_items2.config OWNER TO evergreen;

--
-- Name: copy_dupe_barcodes; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE copy_dupe_barcodes (
    barcode text,
    to_fix bigint
);


ALTER TABLE m_kcls_items2.copy_dupe_barcodes OWNER TO evergreen;

--
-- Name: copy_dupe_barcodes2; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE copy_dupe_barcodes2 (
    barcode text,
    to_fix bigint
);


ALTER TABLE m_kcls_items2.copy_dupe_barcodes2 OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_items2.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: item_exceptions; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE item_exceptions (
    id bigint,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone,
    edit_date timestamp with time zone,
    copy_number integer,
    status integer,
    location integer,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean,
    deposit boolean,
    ref boolean,
    holdable boolean,
    deposit_amount numeric(6,2),
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean,
    deleted boolean,
    floating boolean,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean,
    cost numeric(8,2),
    l_iii_bib_id text,
    l_item_seq integer,
    l_barcode text,
    l_call_num text,
    l_copy_num text,
    l_created text,
    l_updated text,
    l_icode text,
    l_internal_use text,
    l_icode1 text,
    l_icode2 text,
    l_imessage text,
    l_int_note text,
    l_item_id text,
    l_itype text,
    l_invda text,
    l_intnote text,
    l_location text,
    l_lyrcirc text,
    l_message text,
    l_opacmsg text,
    l_price text,
    l_status text,
    l_tot_chkout text,
    l_tot_renew text,
    l_volume text,
    l_ytdcirc text,
    egid bigint,
    x_call_number text
);


ALTER TABLE m_kcls_items2.item_exceptions OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_items2.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_items2.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_items2.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_items2.money_grocery OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_items2.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_items2.sql_log OWNER TO evergreen;

--
-- Name: volumes; Type: TABLE; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE TABLE volumes (
    l_item_id text,
    l_volume text
);


ALTER TABLE m_kcls_items2.volumes OWNER TO evergreen;

SET search_path = m_kcls_items3, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_items3.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_items3.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_items3.action_hold_request OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_items3.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_items3.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_items3.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_items3.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_items3.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_items3.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_items3.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_items3.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_items3.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_legacy; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_legacy (
    l_iii_bib_id text,
    l_item_seq integer,
    l_barcode text,
    l_call_num text,
    l_copy_num text,
    l_created text,
    l_updated text,
    l_icode text,
    l_internal_use text,
    l_icode1 text,
    l_icode2 text,
    l_imessage text,
    l_int_note text,
    l_item_id text,
    l_itype text,
    l_invda text,
    l_intnote text,
    l_location text,
    l_lyrcirc text,
    l_message text,
    l_opacmsg text,
    l_price text,
    l_status text,
    l_tot_chkout text,
    l_tot_renew text,
    l_volume text,
    l_ytdcirc text,
    l_toss text,
    egid bigint,
    x_call_number text
)
INHERITS (asset_copy);


ALTER TABLE m_kcls_items3.asset_copy_legacy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_items3.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_items3.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_items3.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_items3.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_items3.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_items3.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_items3; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_items3.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_items3; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_items3.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_items3; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_items3.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_items3; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_items3.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_items3; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_items3.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_items3; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_items3.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_items3; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_items3.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_items3; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: calls; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE calls (
    l_item_id text,
    l_call_num text
);


ALTER TABLE m_kcls_items3.calls OWNER TO evergreen;

--
-- Name: cn_to_del; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE cn_to_del (
    id bigint
);


ALTER TABLE m_kcls_items3.cn_to_del OWNER TO evergreen;

--
-- Name: config; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_items3.config OWNER TO evergreen;

--
-- Name: copy_dupe_barcodes; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE copy_dupe_barcodes (
    barcode text,
    to_fix bigint
);


ALTER TABLE m_kcls_items3.copy_dupe_barcodes OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_items3.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: item_exceptions; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE item_exceptions (
    id bigint,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone,
    edit_date timestamp with time zone,
    copy_number integer,
    status integer,
    location integer,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean,
    deposit boolean,
    ref boolean,
    holdable boolean,
    deposit_amount numeric(6,2),
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean,
    deleted boolean,
    floating boolean,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean,
    cost numeric(8,2),
    l_iii_bib_id text,
    l_item_seq integer,
    l_barcode text,
    l_call_num text,
    l_copy_num text,
    l_created text,
    l_updated text,
    l_icode text,
    l_internal_use text,
    l_icode1 text,
    l_icode2 text,
    l_imessage text,
    l_int_note text,
    l_item_id text,
    l_itype text,
    l_invda text,
    l_intnote text,
    l_location text,
    l_lyrcirc text,
    l_message text,
    l_opacmsg text,
    l_price text,
    l_status text,
    l_tot_chkout text,
    l_tot_renew text,
    l_volume text,
    l_ytdcirc text,
    l_toss text,
    egid bigint,
    x_call_number text
);


ALTER TABLE m_kcls_items3.item_exceptions OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_items3.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_items3.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_items3.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_items3.money_grocery OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_items3.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_items3.sql_log OWNER TO evergreen;

SET search_path = m_kcls_ord, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_ord.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_ord.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_ord.action_hold_request OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_ord.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_ord.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_ord.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_ord.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_ord.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_ord.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_ord.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_ord.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_ord.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_ord.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_ord.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_ord.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_ord.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_ord.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_ord.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_ord; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_ord.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_ord; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_ord.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_ord; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_ord.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_ord; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_ord.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_ord; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_ord.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_ord; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_ord.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_ord; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_ord.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_ord; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: config; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_ord.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_ord.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: item_exceptions; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE item_exceptions (
    id bigint,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone,
    edit_date timestamp with time zone,
    copy_number integer,
    status integer,
    location integer,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean,
    deposit boolean,
    ref boolean,
    holdable boolean,
    deposit_amount numeric(6,2),
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean,
    deleted boolean,
    floating boolean,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean,
    cost numeric(8,2),
    l_iii_bib_id text,
    l_call_no text,
    l_title text,
    l_ord_type text,
    l_ord_status text,
    l_cdate text,
    l_odate text,
    l_rdate text,
    l_location text,
    egid bigint
);


ALTER TABLE m_kcls_ord.item_exceptions OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_ord.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_ord.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_ord.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_ord.money_grocery OWNER TO evergreen;

--
-- Name: on_order_items; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE on_order_items (
    l_iii_bib_id text,
    l_call_no text,
    l_title text,
    l_ord_type text,
    l_ord_status text,
    l_cdate text,
    l_odate text,
    l_rdate text,
    l_location text,
    l_price text,
    egid bigint
)
INHERITS (asset_copy);


ALTER TABLE m_kcls_ord.on_order_items OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_ord.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_ord.sql_log OWNER TO evergreen;

SET search_path = m_kcls_ord2, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_ord2.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_ord2.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_ord2.action_hold_request OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_ord2.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_ord2.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_ord2.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_ord2.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_ord2.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_ord2.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_ord2.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_ord2.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_ord2.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_ord2.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_ord2.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_ord2.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_ord2.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_ord2.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_ord2.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_ord2; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_ord2.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_ord2.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_ord2; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_ord2.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_ord2.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_ord2; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_ord2.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_ord2.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_ord2; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_ord2.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: config; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_ord2.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_ord2.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_ord2.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_ord2.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_ord2.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_ord2.money_grocery OWNER TO evergreen;

--
-- Name: on_order_items; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE on_order_items (
    l_iii_bib_id text,
    l_call_no text,
    l_title text,
    l_ord_type text,
    l_ord_status text,
    l_cdate text,
    l_odate text,
    l_rdate text,
    l_location text,
    l_price text,
    egid bigint
)
INHERITS (asset_copy);


ALTER TABLE m_kcls_ord2.on_order_items OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_ord2.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_ord2.sql_log OWNER TO evergreen;

SET search_path = m_kcls_ord3, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_kcls_ord3.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_kcls_ord3.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_kcls_ord3.action_hold_request OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_kcls_ord3.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_ord3.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_ord3.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_kcls_ord3.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_kcls_ord3.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_kcls_ord3.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_ord3.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_kcls_ord3.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_kcls_ord3.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_kcls_ord3.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_kcls_ord3.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_kcls_ord3.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_kcls_ord3.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_kcls_ord3.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_kcls_ord3.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_ord3; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_ord3.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_ord3.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_kcls_ord3; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_ord3.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_ord3.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_kcls_ord3; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_ord3.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_kcls_ord3.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_kcls_ord3; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_kcls_ord3.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: config; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_kcls_ord3.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_kcls_ord3.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_kcls_ord3.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_kcls_ord3.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_kcls_ord3.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_kcls_ord3.money_grocery OWNER TO evergreen;

--
-- Name: on_order_items; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE on_order_items (
    l_iii_bib_id text,
    l_call_no text,
    l_title text,
    l_ord_type text,
    l_ord_status text,
    l_cdate text,
    l_odate text,
    l_rdate text,
    l_location text,
    l_price text,
    egid bigint
)
INHERITS (asset_copy);


ALTER TABLE m_kcls_ord3.on_order_items OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_kcls_ord3.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_kcls_ord3.sql_log OWNER TO evergreen;

SET search_path = m_kcls_xfr, pg_catalog;

--
-- Name: billing_type; Type: TABLE; Schema: m_kcls_xfr; Owner: evergreen; Tablespace: 
--

CREATE TABLE billing_type (
    id integer,
    name text,
    owner integer,
    default_price numeric(6,2)
);


ALTER TABLE m_kcls_xfr.billing_type OWNER TO evergreen;

--
-- Name: circ_modifier; Type: TABLE; Schema: m_kcls_xfr; Owner: evergreen; Tablespace: 
--

CREATE TABLE circ_modifier (
    code text,
    name text,
    description text,
    sip2_media_type text,
    magnetic_media boolean,
    avg_wait_time interval
);


ALTER TABLE m_kcls_xfr.circ_modifier OWNER TO evergreen;

--
-- Name: grp_change; Type: TABLE; Schema: m_kcls_xfr; Owner: evergreen; Tablespace: 
--

CREATE TABLE grp_change (
    from_name text,
    to_name text,
    from_id integer,
    to_id integer
);


ALTER TABLE m_kcls_xfr.grp_change OWNER TO evergreen;

--
-- Name: grp_tree; Type: TABLE; Schema: m_kcls_xfr; Owner: evergreen; Tablespace: 
--

CREATE TABLE grp_tree (
    id integer,
    name text,
    parent integer,
    usergroup boolean,
    perm_interval interval,
    description text,
    application_perm text
);


ALTER TABLE m_kcls_xfr.grp_tree OWNER TO evergreen;

--
-- Name: org_unit; Type: TABLE; Schema: m_kcls_xfr; Owner: evergreen; Tablespace: 
--

CREATE TABLE org_unit (
    id integer,
    parent_ou integer,
    ou_type integer,
    ill_address integer,
    holds_address integer,
    mailing_address integer,
    billing_address integer,
    shortname text,
    name text,
    email text,
    phone text,
    opac_visible boolean,
    fiscal_calendar integer
);


ALTER TABLE m_kcls_xfr.org_unit OWNER TO evergreen;

--
-- Name: org_unit_type; Type: TABLE; Schema: m_kcls_xfr; Owner: evergreen; Tablespace: 
--

CREATE TABLE org_unit_type (
    id integer,
    name text,
    opac_label text,
    depth integer,
    parent integer,
    can_have_vols boolean,
    can_have_users boolean
);


ALTER TABLE m_kcls_xfr.org_unit_type OWNER TO evergreen;

SET search_path = m_test, pg_catalog;

--
-- Name: action_circulation; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_circulation (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    target_copy bigint,
    circ_lib integer,
    circ_staff integer,
    checkin_staff integer,
    checkin_lib integer,
    renewal_remaining integer,
    due_date timestamp with time zone,
    stop_fines_time timestamp with time zone,
    checkin_time timestamp with time zone,
    create_time timestamp with time zone DEFAULT now() NOT NULL,
    duration interval,
    fine_interval interval DEFAULT '1 day'::interval NOT NULL,
    recurring_fine numeric(6,2),
    max_fine numeric(6,2),
    phone_renewal boolean DEFAULT false NOT NULL,
    desk_renewal boolean DEFAULT false NOT NULL,
    opac_renewal boolean DEFAULT false NOT NULL,
    duration_rule text,
    recurring_fine_rule text,
    max_fine_rule text,
    stop_fines text,
    workstation integer,
    checkin_workstation integer,
    checkin_scan_time timestamp with time zone,
    parent_circ bigint
);


ALTER TABLE m_test.action_circulation OWNER TO evergreen;

--
-- Name: action_hold_notification; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_notification (
    id integer DEFAULT nextval('action.hold_notification_id_seq'::regclass) NOT NULL,
    hold integer,
    notify_staff integer,
    notify_time timestamp with time zone DEFAULT now() NOT NULL,
    method text,
    note text
);


ALTER TABLE m_test.action_hold_notification OWNER TO evergreen;

--
-- Name: action_hold_request; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE action_hold_request (
    id integer DEFAULT nextval('action.hold_request_id_seq'::regclass) NOT NULL,
    request_time timestamp with time zone DEFAULT now() NOT NULL,
    capture_time timestamp with time zone,
    fulfillment_time timestamp with time zone,
    checkin_time timestamp with time zone,
    return_time timestamp with time zone,
    prev_check_time timestamp with time zone,
    expire_time timestamp with time zone,
    cancel_time timestamp with time zone,
    cancel_cause integer,
    cancel_note text,
    target bigint,
    current_copy bigint,
    fulfillment_staff integer,
    fulfillment_lib integer,
    request_lib integer,
    requestor integer,
    usr integer,
    selection_ou integer,
    selection_depth integer DEFAULT 0 NOT NULL,
    pickup_lib integer,
    hold_type text,
    holdable_formats text,
    phone_notify text,
    email_notify boolean DEFAULT true NOT NULL,
    frozen boolean DEFAULT false NOT NULL,
    thaw_date timestamp with time zone,
    shelf_time timestamp with time zone,
    cut_in_line boolean,
    mint_condition boolean DEFAULT true NOT NULL,
    shelf_expire_time timestamp with time zone
);


ALTER TABLE m_test.action_hold_request OWNER TO evergreen;

--
-- Name: actor_card; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_card (
    id integer DEFAULT nextval('actor.card_id_seq'::regclass) NOT NULL,
    usr integer,
    barcode text,
    active boolean DEFAULT true NOT NULL
);


ALTER TABLE m_test.actor_card OWNER TO evergreen;

--
-- Name: actor_stat_cat; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat (
    id integer DEFAULT nextval('actor.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    name text,
    opac_visible boolean DEFAULT false NOT NULL,
    usr_summary boolean DEFAULT false NOT NULL
);


ALTER TABLE m_test.actor_stat_cat OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry (
    id integer DEFAULT nextval('actor.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_test.actor_stat_cat_entry OWNER TO evergreen;

--
-- Name: actor_stat_cat_entry_usr_map; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_stat_cat_entry_usr_map (
    id bigint DEFAULT nextval('actor.stat_cat_entry_usr_map_id_seq'::regclass) NOT NULL,
    stat_cat_entry text,
    stat_cat integer,
    target_usr integer
);


ALTER TABLE m_test.actor_stat_cat_entry_usr_map OWNER TO evergreen;

--
-- Name: actor_usr; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr (
    id integer DEFAULT nextval('actor.usr_id_seq'::regclass) NOT NULL,
    card integer,
    profile integer,
    usrname text,
    email text,
    passwd text,
    standing integer DEFAULT 1 NOT NULL,
    ident_type integer,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer DEFAULT 1 NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text,
    second_given_name text,
    family_name text,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer,
    dob timestamp with time zone,
    active boolean DEFAULT true NOT NULL,
    master_account boolean DEFAULT false NOT NULL,
    super_user boolean DEFAULT false NOT NULL,
    barred boolean DEFAULT false NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    juvenile boolean DEFAULT false NOT NULL,
    usrgroup integer DEFAULT nextval('actor.usr_usrgroup_seq'::regclass) NOT NULL,
    claims_returned_count integer DEFAULT 0 NOT NULL,
    credit_forward_balance numeric(6,2) DEFAULT 0.00 NOT NULL,
    last_xact_id text DEFAULT 'none'::text NOT NULL,
    alert_message text,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    expire_date timestamp with time zone DEFAULT (now() + '3 years'::interval) NOT NULL,
    claims_never_checked_out_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE m_test.actor_usr OWNER TO evergreen;

--
-- Name: actor_usr_address; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_address (
    id integer DEFAULT nextval('actor.usr_address_id_seq'::regclass) NOT NULL,
    valid boolean DEFAULT true NOT NULL,
    within_city_limits boolean DEFAULT true NOT NULL,
    address_type text DEFAULT 'MAILING'::text NOT NULL,
    usr integer,
    street1 text,
    street2 text,
    city text,
    county text,
    state text,
    country text,
    post_code text,
    pending boolean DEFAULT false NOT NULL,
    replaces integer
);


ALTER TABLE m_test.actor_usr_address OWNER TO evergreen;

--
-- Name: actor_usr_note; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE actor_usr_note (
    id bigint DEFAULT nextval('actor.usr_note_id_seq'::regclass) NOT NULL,
    usr bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_test.actor_usr_note OWNER TO evergreen;

--
-- Name: asset_call_number; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_call_number (
    id bigint DEFAULT nextval('asset.call_number_id_seq'::regclass) NOT NULL,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    editor bigint,
    edit_date timestamp with time zone DEFAULT now(),
    record bigint,
    owning_lib integer,
    label text,
    deleted boolean DEFAULT false NOT NULL,
    label_class bigint DEFAULT 1 NOT NULL,
    label_sortkey text
);


ALTER TABLE m_test.asset_call_number OWNER TO evergreen;

--
-- Name: asset_copy; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy (
    id bigint DEFAULT nextval('asset.copy_id_seq'::regclass) NOT NULL,
    circ_lib integer,
    creator bigint,
    call_number bigint,
    editor bigint,
    create_date timestamp with time zone DEFAULT now(),
    edit_date timestamp with time zone DEFAULT now(),
    copy_number integer,
    status integer DEFAULT 0 NOT NULL,
    location integer DEFAULT 1 NOT NULL,
    loan_duration integer,
    fine_level integer,
    age_protect integer,
    circulate boolean DEFAULT true NOT NULL,
    deposit boolean DEFAULT false NOT NULL,
    ref boolean DEFAULT false NOT NULL,
    holdable boolean DEFAULT true NOT NULL,
    deposit_amount numeric(6,2) DEFAULT 0.00 NOT NULL,
    price numeric(8,2),
    barcode text,
    circ_modifier text,
    circ_as_type text,
    dummy_title text,
    dummy_author text,
    alert_message text,
    opac_visible boolean DEFAULT true NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    floating boolean DEFAULT false NOT NULL,
    dummy_isbn text,
    status_changed_time timestamp with time zone,
    mint_condition boolean DEFAULT true NOT NULL,
    cost numeric(8,2)
);


ALTER TABLE m_test.asset_copy OWNER TO evergreen;

--
-- Name: asset_copy_location; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_location (
    id integer DEFAULT nextval('asset.copy_location_id_seq'::regclass) NOT NULL,
    name text,
    owning_lib integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    label_prefix text,
    label_suffix text
);


ALTER TABLE m_test.asset_copy_location OWNER TO evergreen;

--
-- Name: asset_copy_note; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_copy_note (
    id bigint DEFAULT nextval('asset.copy_note_id_seq'::regclass) NOT NULL,
    owning_copy bigint,
    creator bigint,
    create_date timestamp with time zone DEFAULT now(),
    pub boolean DEFAULT false NOT NULL,
    title text,
    value text
);


ALTER TABLE m_test.asset_copy_note OWNER TO evergreen;

--
-- Name: asset_stat_cat; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat (
    id integer DEFAULT nextval('asset.stat_cat_id_seq'::regclass) NOT NULL,
    owner integer,
    opac_visible boolean DEFAULT false NOT NULL,
    name text,
    required boolean DEFAULT false NOT NULL
);


ALTER TABLE m_test.asset_stat_cat OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry (
    id integer DEFAULT nextval('asset.stat_cat_entry_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    owner integer,
    value text
);


ALTER TABLE m_test.asset_stat_cat_entry OWNER TO evergreen;

--
-- Name: asset_stat_cat_entry_copy_map; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE asset_stat_cat_entry_copy_map (
    id bigint DEFAULT nextval('asset.stat_cat_entry_copy_map_id_seq'::regclass) NOT NULL,
    stat_cat integer,
    stat_cat_entry integer,
    owning_copy bigint
);


ALTER TABLE m_test.asset_stat_cat_entry_copy_map OWNER TO evergreen;

--
-- Name: base_circ_field_map; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_circ_field_map (
    id integer NOT NULL,
    circulate boolean,
    loan_period text,
    max_renewals text,
    max_out text,
    fine_amount text,
    fine_interval text,
    max_fine text,
    item_field1 text,
    item_value1 text,
    item_field2 text,
    item_value2 text,
    patron_field1 text,
    patron_value1 text,
    patron_field2 text,
    patron_value2 text
);


ALTER TABLE m_test.base_circ_field_map OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE; Schema: m_test; Owner: evergreen
--

CREATE SEQUENCE base_circ_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_test.base_circ_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_test; Owner: evergreen
--

ALTER SEQUENCE base_circ_field_map_id_seq OWNED BY base_circ_field_map.id;


--
-- Name: base_copy_location_map; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_copy_location_map (
    id integer NOT NULL,
    location integer,
    holdable boolean DEFAULT true NOT NULL,
    hold_verify boolean DEFAULT false NOT NULL,
    opac_visible boolean DEFAULT true NOT NULL,
    circulate boolean DEFAULT true NOT NULL,
    transcribed_location text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_test.base_copy_location_map OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE; Schema: m_test; Owner: evergreen
--

CREATE SEQUENCE base_copy_location_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_test.base_copy_location_map_id_seq OWNER TO evergreen;

--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_test; Owner: evergreen
--

ALTER SEQUENCE base_copy_location_map_id_seq OWNED BY base_copy_location_map.id;


--
-- Name: base_item_dynamic_field_map; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_item_dynamic_field_map (
    id integer NOT NULL,
    evergreen_field text,
    evergreen_value text,
    evergreen_datatype text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_test.base_item_dynamic_field_map OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE; Schema: m_test; Owner: evergreen
--

CREATE SEQUENCE base_item_dynamic_field_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_test.base_item_dynamic_field_map_id_seq OWNER TO evergreen;

--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_test; Owner: evergreen
--

ALTER SEQUENCE base_item_dynamic_field_map_id_seq OWNED BY base_item_dynamic_field_map.id;


--
-- Name: base_profile_map; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE base_profile_map (
    id integer NOT NULL,
    perm_grp_id integer,
    transcribed_perm_group text,
    legacy_field1 text,
    legacy_value1 text,
    legacy_field2 text,
    legacy_value2 text,
    legacy_field3 text,
    legacy_value3 text
);


ALTER TABLE m_test.base_profile_map OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE; Schema: m_test; Owner: evergreen
--

CREATE SEQUENCE base_profile_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE m_test.base_profile_map_id_seq OWNER TO evergreen;

--
-- Name: base_profile_map_id_seq; Type: SEQUENCE OWNED BY; Schema: m_test; Owner: evergreen
--

ALTER SEQUENCE base_profile_map_id_seq OWNED BY base_profile_map.id;


--
-- Name: circhist; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE circhist (
    l_patron_id text,
    l_bib_num text,
    l_item_num text,
    l_checkout date
)
INHERITS (action_circulation);


ALTER TABLE m_test.circhist OWNER TO evergreen;

--
-- Name: config; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE config (
    key text,
    value text
);


ALTER TABLE m_test.config OWNER TO evergreen;

--
-- Name: fields_requiring_mapping; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE fields_requiring_mapping (
    table_schema text,
    table_name text,
    column_name text,
    data_type text
);


ALTER TABLE m_test.fields_requiring_mapping OWNER TO evergreen;

--
-- Name: money_billing; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_billing (
    id bigint DEFAULT nextval('money.billing_id_seq'::regclass) NOT NULL,
    xact bigint,
    billing_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    voider integer,
    void_time timestamp with time zone,
    amount numeric(6,2),
    billing_type text,
    btype integer,
    note text
);


ALTER TABLE m_test.money_billing OWNER TO evergreen;

--
-- Name: money_cash_payment; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_cash_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer,
    cash_drawer integer
);


ALTER TABLE m_test.money_cash_payment OWNER TO evergreen;

--
-- Name: money_forgive_payment; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_forgive_payment (
    id bigint DEFAULT nextval('money.payment_id_seq'::regclass) NOT NULL,
    xact bigint,
    payment_ts timestamp with time zone DEFAULT now() NOT NULL,
    voided boolean DEFAULT false NOT NULL,
    amount numeric(6,2),
    note text,
    amount_collected numeric(6,2),
    accepting_usr integer
);


ALTER TABLE m_test.money_forgive_payment OWNER TO evergreen;

--
-- Name: money_grocery; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE money_grocery (
    id bigint DEFAULT nextval('money.billable_xact_id_seq'::regclass) NOT NULL,
    usr integer,
    xact_start timestamp with time zone DEFAULT now() NOT NULL,
    xact_finish timestamp with time zone,
    unrecovered boolean,
    billing_location integer,
    note text
);


ALTER TABLE m_test.money_grocery OWNER TO evergreen;

--
-- Name: sql_current; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_current (
    sql text
);


ALTER TABLE m_test.sql_current OWNER TO evergreen;

--
-- Name: sql_log; Type: TABLE; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE TABLE sql_log (
    "time" timestamp without time zone DEFAULT now() NOT NULL,
    row_count integer,
    sql text
);


ALTER TABLE m_test.sql_log OWNER TO evergreen;

SET search_path = migration_tools, pg_catalog;

--
-- Name: db_object_stash; Type: TABLE; Schema: migration_tools; Owner: evergreen; Tablespace: 
--

CREATE TABLE db_object_stash (
    schema_name name,
    table_name name,
    object_name name,
    object_type text,
    restore_command text,
    CONSTRAINT db_object_stash_object_type_check CHECK ((object_type = ANY (ARRAY['index'::text, 'trigger'::text, 'rule'::text])))
);


ALTER TABLE migration_tools.db_object_stash OWNER TO evergreen;

SET search_path = prod_staff_users, pg_catalog;

--
-- Name: card; Type: TABLE; Schema: prod_staff_users; Owner: evergreen; Tablespace: 
--

CREATE TABLE card (
    id integer NOT NULL,
    usr integer NOT NULL,
    barcode text NOT NULL,
    active boolean NOT NULL
);


ALTER TABLE prod_staff_users.card OWNER TO evergreen;

--
-- Name: save_source; Type: TABLE; Schema: prod_staff_users; Owner: evergreen; Tablespace: 
--

CREATE TABLE save_source (
    barcode text,
    usrname text,
    fname text,
    lname text,
    passwd text
);


ALTER TABLE prod_staff_users.save_source OWNER TO evergreen;

--
-- Name: save_these; Type: TABLE; Schema: prod_staff_users; Owner: evergreen; Tablespace: 
--

CREATE TABLE save_these (
    id integer
);


ALTER TABLE prod_staff_users.save_these OWNER TO evergreen;

--
-- Name: usr; Type: TABLE; Schema: prod_staff_users; Owner: evergreen; Tablespace: 
--

CREATE TABLE usr (
    id integer NOT NULL,
    card integer,
    profile integer NOT NULL,
    usrname text NOT NULL,
    email text,
    passwd text NOT NULL,
    standing integer NOT NULL,
    ident_type integer NOT NULL,
    ident_value text,
    ident_type2 integer,
    ident_value2 text,
    net_access_level integer NOT NULL,
    photo_url text,
    prefix text,
    first_given_name text NOT NULL,
    second_given_name text,
    family_name text NOT NULL,
    suffix text,
    alias text,
    day_phone text,
    evening_phone text,
    other_phone text,
    mailing_address integer,
    billing_address integer,
    home_ou integer NOT NULL,
    dob timestamp with time zone,
    active boolean NOT NULL,
    master_account boolean NOT NULL,
    super_user boolean NOT NULL,
    barred boolean NOT NULL,
    deleted boolean NOT NULL,
    juvenile boolean NOT NULL,
    usrgroup integer NOT NULL,
    claims_returned_count integer NOT NULL,
    credit_forward_balance numeric(6,2) NOT NULL,
    last_xact_id text NOT NULL,
    alert_message text,
    create_date timestamp with time zone NOT NULL,
    expire_date timestamp with time zone NOT NULL,
    claims_never_checked_out_count integer NOT NULL
);


ALTER TABLE prod_staff_users.usr OWNER TO evergreen;

--
-- Name: usr_address; Type: TABLE; Schema: prod_staff_users; Owner: evergreen; Tablespace: 
--

CREATE TABLE usr_address (
    id integer NOT NULL,
    valid boolean NOT NULL,
    within_city_limits boolean NOT NULL,
    address_type text NOT NULL,
    usr integer NOT NULL,
    street1 text NOT NULL,
    street2 text,
    city text NOT NULL,
    county text,
    state text NOT NULL,
    country text NOT NULL,
    post_code text NOT NULL,
    pending boolean NOT NULL,
    replaces integer
);


ALTER TABLE prod_staff_users.usr_address OWNER TO evergreen;

--
-- Name: usr_perm_map; Type: TABLE; Schema: prod_staff_users; Owner: evergreen; Tablespace: 
--

CREATE TABLE usr_perm_map (
    id integer NOT NULL,
    usr integer NOT NULL,
    perm integer NOT NULL,
    depth integer NOT NULL,
    grantable boolean NOT NULL
);


ALTER TABLE prod_staff_users.usr_perm_map OWNER TO evergreen;

--
-- Name: usr_setting; Type: TABLE; Schema: prod_staff_users; Owner: evergreen; Tablespace: 
--

CREATE TABLE usr_setting (
    id bigint NOT NULL,
    usr integer NOT NULL,
    name text NOT NULL,
    value text NOT NULL
);


ALTER TABLE prod_staff_users.usr_setting OWNER TO evergreen;

--
-- Name: usr_work_ou_map; Type: TABLE; Schema: prod_staff_users; Owner: evergreen; Tablespace: 
--

CREATE TABLE usr_work_ou_map (
    id integer NOT NULL,
    usr integer NOT NULL,
    work_ou integer NOT NULL
);


ALTER TABLE prod_staff_users.usr_work_ou_map OWNER TO evergreen;

SET search_path = sip_temp, pg_catalog;

--
-- Name: user; Type: TABLE; Schema: sip_temp; Owner: evergreen; Tablespace: 
--

CREATE TABLE "user" (
    usrname text,
    passwd text,
    org_unit text
);


ALTER TABLE sip_temp."user" OWNER TO evergreen;

SET search_path = m_enum, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_stat_cat_entry_map ALTER COLUMN id SET DEFAULT nextval('actor_stat_cat_entry_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_stat_cat_map ALTER COLUMN id SET DEFAULT nextval('actor_stat_cat_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN id SET DEFAULT nextval('actor.usr_id_seq'::regclass);


--
-- Name: standing; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN standing SET DEFAULT 1;


--
-- Name: net_access_level; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN net_access_level SET DEFAULT 1;


--
-- Name: active; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN active SET DEFAULT true;


--
-- Name: master_account; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN master_account SET DEFAULT false;


--
-- Name: super_user; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN super_user SET DEFAULT false;


--
-- Name: barred; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN barred SET DEFAULT false;


--
-- Name: deleted; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN deleted SET DEFAULT false;


--
-- Name: juvenile; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN juvenile SET DEFAULT false;


--
-- Name: usrgroup; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN usrgroup SET DEFAULT nextval('actor.usr_usrgroup_seq'::regclass);


--
-- Name: claims_returned_count; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN claims_returned_count SET DEFAULT 0;


--
-- Name: credit_forward_balance; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN credit_forward_balance SET DEFAULT 0.00;


--
-- Name: last_xact_id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN last_xact_id SET DEFAULT 'none'::text;


--
-- Name: create_date; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: expire_date; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN expire_date SET DEFAULT (now() + '3 years'::interval);


--
-- Name: claims_never_checked_out_count; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN claims_never_checked_out_count SET DEFAULT 0;


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN id SET DEFAULT nextval('asset.copy_id_seq'::regclass);


--
-- Name: create_date; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: edit_date; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN edit_date SET DEFAULT now();


--
-- Name: status; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN status SET DEFAULT 0;


--
-- Name: location; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN location SET DEFAULT 1;


--
-- Name: circulate; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN circulate SET DEFAULT true;


--
-- Name: deposit; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deposit SET DEFAULT false;


--
-- Name: ref; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN ref SET DEFAULT false;


--
-- Name: holdable; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN holdable SET DEFAULT true;


--
-- Name: deposit_amount; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deposit_amount SET DEFAULT 0.00;


--
-- Name: opac_visible; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN opac_visible SET DEFAULT true;


--
-- Name: deleted; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deleted SET DEFAULT false;


--
-- Name: floating; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN floating SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY card_collisions ALTER COLUMN id SET DEFAULT nextval('card_collisions_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY circ ALTER COLUMN id SET DEFAULT nextval('money.billable_xact_id_seq'::regclass);


--
-- Name: xact_start; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY circ ALTER COLUMN xact_start SET DEFAULT now();


--
-- Name: create_time; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY circ ALTER COLUMN create_time SET DEFAULT now();


--
-- Name: fine_interval; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY circ ALTER COLUMN fine_interval SET DEFAULT '1 day'::interval;


--
-- Name: phone_renewal; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY circ ALTER COLUMN phone_renewal SET DEFAULT false;


--
-- Name: desk_renewal; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY circ ALTER COLUMN desk_renewal SET DEFAULT false;


--
-- Name: opac_renewal; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY circ ALTER COLUMN opac_renewal SET DEFAULT false;


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY holds ALTER COLUMN id SET DEFAULT nextval('action.hold_request_id_seq'::regclass);


--
-- Name: request_time; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY holds ALTER COLUMN request_time SET DEFAULT now();


--
-- Name: selection_depth; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY holds ALTER COLUMN selection_depth SET DEFAULT 0;


--
-- Name: email_notify; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY holds ALTER COLUMN email_notify SET DEFAULT true;


--
-- Name: frozen; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY holds ALTER COLUMN frozen SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY holds ALTER COLUMN mint_condition SET DEFAULT false;


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY home_location_map ALTER COLUMN id SET DEFAULT nextval('home_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY org_map ALTER COLUMN id SET DEFAULT nextval('org_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_enum; Owner: evergreen
--

ALTER TABLE ONLY profile_map ALTER COLUMN id SET DEFAULT nextval('profile_map_id_seq'::regclass);


SET search_path = m_kcls, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN id SET DEFAULT nextval('money.billable_xact_id_seq'::regclass);


--
-- Name: xact_start; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN xact_start SET DEFAULT now();


--
-- Name: create_time; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN create_time SET DEFAULT now();


--
-- Name: fine_interval; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN fine_interval SET DEFAULT '1 day'::interval;


--
-- Name: phone_renewal; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN phone_renewal SET DEFAULT false;


--
-- Name: desk_renewal; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN desk_renewal SET DEFAULT false;


--
-- Name: opac_renewal; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN opac_renewal SET DEFAULT false;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN id SET DEFAULT nextval('action.hold_request_id_seq'::regclass);


--
-- Name: request_time; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN request_time SET DEFAULT now();


--
-- Name: selection_depth; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN selection_depth SET DEFAULT 0;


--
-- Name: email_notify; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN email_notify SET DEFAULT true;


--
-- Name: frozen; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN frozen SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN id SET DEFAULT nextval('actor.usr_id_seq'::regclass);


--
-- Name: standing; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN standing SET DEFAULT 1;


--
-- Name: net_access_level; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN net_access_level SET DEFAULT 1;


--
-- Name: active; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN active SET DEFAULT true;


--
-- Name: master_account; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN master_account SET DEFAULT false;


--
-- Name: super_user; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN super_user SET DEFAULT false;


--
-- Name: barred; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN barred SET DEFAULT false;


--
-- Name: deleted; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN deleted SET DEFAULT false;


--
-- Name: juvenile; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN juvenile SET DEFAULT false;


--
-- Name: usrgroup; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN usrgroup SET DEFAULT nextval('actor.usr_usrgroup_seq'::regclass);


--
-- Name: claims_returned_count; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN claims_returned_count SET DEFAULT 0;


--
-- Name: credit_forward_balance; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN credit_forward_balance SET DEFAULT 0.00;


--
-- Name: last_xact_id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN last_xact_id SET DEFAULT 'none'::text;


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: expire_date; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN expire_date SET DEFAULT (now() + '3 years'::interval);


--
-- Name: claims_never_checked_out_count; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN claims_never_checked_out_count SET DEFAULT 0;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN id SET DEFAULT nextval('asset.copy_id_seq'::regclass);


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: edit_date; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN edit_date SET DEFAULT now();


--
-- Name: status; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN status SET DEFAULT 0;


--
-- Name: location; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN location SET DEFAULT 1;


--
-- Name: circulate; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN circulate SET DEFAULT true;


--
-- Name: deposit; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deposit SET DEFAULT false;


--
-- Name: ref; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN ref SET DEFAULT false;


--
-- Name: holdable; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN holdable SET DEFAULT true;


--
-- Name: deposit_amount; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deposit_amount SET DEFAULT 0.00;


--
-- Name: opac_visible; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN opac_visible SET DEFAULT true;


--
-- Name: deleted; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deleted SET DEFAULT false;


--
-- Name: floating; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN floating SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


--
-- Name: seq; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY bibs_to_fix ALTER COLUMN seq SET DEFAULT nextval('bibs_to_fix_seq_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY bibs_with_938 ALTER COLUMN id SET DEFAULT nextval('bibs_with_938_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY bookbag ALTER COLUMN id SET DEFAULT nextval('container.biblio_record_entry_bucket_id_seq'::regclass);


--
-- Name: btype; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY bookbag ALTER COLUMN btype SET DEFAULT 'misc'::text;


--
-- Name: pub; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY bookbag ALTER COLUMN pub SET DEFAULT false;


--
-- Name: create_time; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY bookbag ALTER COLUMN create_time SET DEFAULT now();


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY bookbag_entry ALTER COLUMN id SET DEFAULT nextval('container.biblio_record_entry_bucket_item_id_seq'::regclass);


--
-- Name: create_time; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY bookbag_entry ALTER COLUMN create_time SET DEFAULT now();


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY int_notes ALTER COLUMN id SET DEFAULT nextval('asset.copy_note_id_seq'::regclass);


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY int_notes ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: pub; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY int_notes ALTER COLUMN pub SET DEFAULT false;


--
-- Name: job; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY km_move ALTER COLUMN job SET DEFAULT nextval('km_move_job_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY locations ALTER COLUMN id SET DEFAULT nextval('asset.copy_location_id_seq'::regclass);


--
-- Name: holdable; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY locations ALTER COLUMN holdable SET DEFAULT true;


--
-- Name: hold_verify; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY locations ALTER COLUMN hold_verify SET DEFAULT false;


--
-- Name: opac_visible; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY locations ALTER COLUMN opac_visible SET DEFAULT true;


--
-- Name: circulate; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY locations ALTER COLUMN circulate SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY money_grocery_legacy ALTER COLUMN id SET DEFAULT nextval('money.billable_xact_id_seq'::regclass);


--
-- Name: xact_start; Type: DEFAULT; Schema: m_kcls; Owner: evergreen
--

ALTER TABLE ONLY money_grocery_legacy ALTER COLUMN xact_start SET DEFAULT now();


SET search_path = m_kcls2, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY acq_fund_legacy ALTER COLUMN id SET DEFAULT nextval('acq.fund_id_seq'::regclass);


--
-- Name: year; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY acq_fund_legacy ALTER COLUMN year SET DEFAULT date_part('year'::text, now());


--
-- Name: rollover; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY acq_fund_legacy ALTER COLUMN rollover SET DEFAULT false;


--
-- Name: propagate; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY acq_fund_legacy ALTER COLUMN propagate SET DEFAULT true;


--
-- Name: active; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY acq_fund_legacy ALTER COLUMN active SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY acq_provider_address_legacy ALTER COLUMN id SET DEFAULT nextval('acq.provider_address_id_seq'::regclass);


--
-- Name: valid; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY acq_provider_address_legacy ALTER COLUMN valid SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY acq_provider_contact_legacy ALTER COLUMN id SET DEFAULT nextval('acq.provider_contact_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY acq_provider_legacy ALTER COLUMN id SET DEFAULT nextval('acq.provider_id_seq'::regclass);


--
-- Name: active; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY acq_provider_legacy ALTER COLUMN active SET DEFAULT true;


--
-- Name: prepayment_required; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY acq_provider_legacy ALTER COLUMN prepayment_required SET DEFAULT false;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN id SET DEFAULT nextval('money.billable_xact_id_seq'::regclass);


--
-- Name: xact_start; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN xact_start SET DEFAULT now();


--
-- Name: create_time; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN create_time SET DEFAULT now();


--
-- Name: fine_interval; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN fine_interval SET DEFAULT '1 day'::interval;


--
-- Name: phone_renewal; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN phone_renewal SET DEFAULT false;


--
-- Name: desk_renewal; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN desk_renewal SET DEFAULT false;


--
-- Name: opac_renewal; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_circulation_legacy ALTER COLUMN opac_renewal SET DEFAULT false;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN id SET DEFAULT nextval('action.hold_request_id_seq'::regclass);


--
-- Name: request_time; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN request_time SET DEFAULT now();


--
-- Name: selection_depth; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN selection_depth SET DEFAULT 0;


--
-- Name: email_notify; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN email_notify SET DEFAULT true;


--
-- Name: frozen; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN frozen SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN id SET DEFAULT nextval('actor.usr_id_seq'::regclass);


--
-- Name: standing; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN standing SET DEFAULT 1;


--
-- Name: net_access_level; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN net_access_level SET DEFAULT 1;


--
-- Name: active; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN active SET DEFAULT true;


--
-- Name: master_account; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN master_account SET DEFAULT false;


--
-- Name: super_user; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN super_user SET DEFAULT false;


--
-- Name: barred; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN barred SET DEFAULT false;


--
-- Name: deleted; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN deleted SET DEFAULT false;


--
-- Name: juvenile; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN juvenile SET DEFAULT false;


--
-- Name: usrgroup; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN usrgroup SET DEFAULT nextval('actor.usr_usrgroup_seq'::regclass);


--
-- Name: claims_returned_count; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN claims_returned_count SET DEFAULT 0;


--
-- Name: credit_forward_balance; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN credit_forward_balance SET DEFAULT 0.00;


--
-- Name: last_xact_id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN last_xact_id SET DEFAULT 'none'::text;


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: expire_date; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN expire_date SET DEFAULT (now() + '3 years'::interval);


--
-- Name: claims_never_checked_out_count; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY actor_usr_legacy ALTER COLUMN claims_never_checked_out_count SET DEFAULT 0;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN id SET DEFAULT nextval('asset.copy_id_seq'::regclass);


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: edit_date; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN edit_date SET DEFAULT now();


--
-- Name: status; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN status SET DEFAULT 0;


--
-- Name: location; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN location SET DEFAULT 1;


--
-- Name: circulate; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN circulate SET DEFAULT true;


--
-- Name: deposit; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deposit SET DEFAULT false;


--
-- Name: ref; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN ref SET DEFAULT false;


--
-- Name: holdable; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN holdable SET DEFAULT true;


--
-- Name: deposit_amount; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deposit_amount SET DEFAULT 0.00;


--
-- Name: opac_visible; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN opac_visible SET DEFAULT true;


--
-- Name: deleted; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deleted SET DEFAULT false;


--
-- Name: floating; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN floating SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY bookbag ALTER COLUMN id SET DEFAULT nextval('container.biblio_record_entry_bucket_id_seq'::regclass);


--
-- Name: btype; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY bookbag ALTER COLUMN btype SET DEFAULT 'misc'::text;


--
-- Name: pub; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY bookbag ALTER COLUMN pub SET DEFAULT false;


--
-- Name: create_time; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY bookbag ALTER COLUMN create_time SET DEFAULT now();


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY bookbag_entry ALTER COLUMN id SET DEFAULT nextval('container.biblio_record_entry_bucket_item_id_seq'::regclass);


--
-- Name: create_time; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY bookbag_entry ALTER COLUMN create_time SET DEFAULT now();


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY int_notes ALTER COLUMN id SET DEFAULT nextval('asset.copy_note_id_seq'::regclass);


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY int_notes ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: pub; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY int_notes ALTER COLUMN pub SET DEFAULT false;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY money_grocery_legacy ALTER COLUMN id SET DEFAULT nextval('money.billable_xact_id_seq'::regclass);


--
-- Name: xact_start; Type: DEFAULT; Schema: m_kcls2; Owner: evergreen
--

ALTER TABLE ONLY money_grocery_legacy ALTER COLUMN xact_start SET DEFAULT now();


SET search_path = m_kcls3, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls3; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls3; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls3; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls3; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


SET search_path = m_kcls_call_fix, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_call_fix; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_call_fix; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_call_fix; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_call_fix; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


SET search_path = m_kcls_circhist, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN id SET DEFAULT nextval('money.billable_xact_id_seq'::regclass);


--
-- Name: xact_start; Type: DEFAULT; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN xact_start SET DEFAULT now();


--
-- Name: create_time; Type: DEFAULT; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN create_time SET DEFAULT now();


--
-- Name: fine_interval; Type: DEFAULT; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN fine_interval SET DEFAULT '1 day'::interval;


--
-- Name: phone_renewal; Type: DEFAULT; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN phone_renewal SET DEFAULT false;


--
-- Name: desk_renewal; Type: DEFAULT; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN desk_renewal SET DEFAULT false;


--
-- Name: opac_renewal; Type: DEFAULT; Schema: m_kcls_circhist; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN opac_renewal SET DEFAULT false;


SET search_path = m_kcls_gap, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN id SET DEFAULT nextval('asset.copy_id_seq'::regclass);


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: edit_date; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN edit_date SET DEFAULT now();


--
-- Name: status; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN status SET DEFAULT 0;


--
-- Name: location; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN location SET DEFAULT 1;


--
-- Name: circulate; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN circulate SET DEFAULT true;


--
-- Name: deposit; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deposit SET DEFAULT false;


--
-- Name: ref; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN ref SET DEFAULT false;


--
-- Name: holdable; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN holdable SET DEFAULT true;


--
-- Name: deposit_amount; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deposit_amount SET DEFAULT 0.00;


--
-- Name: opac_visible; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN opac_visible SET DEFAULT true;


--
-- Name: deleted; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deleted SET DEFAULT false;


--
-- Name: floating; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN floating SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY int_notes ALTER COLUMN id SET DEFAULT nextval('asset.copy_note_id_seq'::regclass);


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY int_notes ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: pub; Type: DEFAULT; Schema: m_kcls_gap; Owner: evergreen
--

ALTER TABLE ONLY int_notes ALTER COLUMN pub SET DEFAULT false;


SET search_path = m_kcls_holds, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holds; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN id SET DEFAULT nextval('action.hold_request_id_seq'::regclass);


--
-- Name: request_time; Type: DEFAULT; Schema: m_kcls_holds; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN request_time SET DEFAULT now();


--
-- Name: selection_depth; Type: DEFAULT; Schema: m_kcls_holds; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN selection_depth SET DEFAULT 0;


--
-- Name: email_notify; Type: DEFAULT; Schema: m_kcls_holds; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN email_notify SET DEFAULT true;


--
-- Name: frozen; Type: DEFAULT; Schema: m_kcls_holds; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN frozen SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls_holds; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holds; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holds; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holds; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holds; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


SET search_path = m_kcls_holdsall, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN id SET DEFAULT nextval('action.hold_request_id_seq'::regclass);


--
-- Name: request_time; Type: DEFAULT; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN request_time SET DEFAULT now();


--
-- Name: selection_depth; Type: DEFAULT; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN selection_depth SET DEFAULT 0;


--
-- Name: email_notify; Type: DEFAULT; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN email_notify SET DEFAULT true;


--
-- Name: frozen; Type: DEFAULT; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN frozen SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


SET search_path = m_kcls_holdsall2, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN id SET DEFAULT nextval('action.hold_request_id_seq'::regclass);


--
-- Name: request_time; Type: DEFAULT; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN request_time SET DEFAULT now();


--
-- Name: selection_depth; Type: DEFAULT; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN selection_depth SET DEFAULT 0;


--
-- Name: email_notify; Type: DEFAULT; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN email_notify SET DEFAULT true;


--
-- Name: frozen; Type: DEFAULT; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN frozen SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall2; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


SET search_path = m_kcls_holdsall3, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN id SET DEFAULT nextval('action.hold_request_id_seq'::regclass);


--
-- Name: request_time; Type: DEFAULT; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN request_time SET DEFAULT now();


--
-- Name: selection_depth; Type: DEFAULT; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN selection_depth SET DEFAULT 0;


--
-- Name: email_notify; Type: DEFAULT; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN email_notify SET DEFAULT true;


--
-- Name: frozen; Type: DEFAULT; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN frozen SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsall3; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


SET search_path = m_kcls_holdsfix, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN id SET DEFAULT nextval('action.hold_request_id_seq'::regclass);


--
-- Name: request_time; Type: DEFAULT; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN request_time SET DEFAULT now();


--
-- Name: selection_depth; Type: DEFAULT; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN selection_depth SET DEFAULT 0;


--
-- Name: email_notify; Type: DEFAULT; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN email_notify SET DEFAULT true;


--
-- Name: frozen; Type: DEFAULT; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN frozen SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER TABLE ONLY action_hold_request_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_holdsfix; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


SET search_path = m_kcls_items2, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN id SET DEFAULT nextval('asset.copy_id_seq'::regclass);


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: edit_date; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN edit_date SET DEFAULT now();


--
-- Name: status; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN status SET DEFAULT 0;


--
-- Name: location; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN location SET DEFAULT 1;


--
-- Name: circulate; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN circulate SET DEFAULT true;


--
-- Name: deposit; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deposit SET DEFAULT false;


--
-- Name: ref; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN ref SET DEFAULT false;


--
-- Name: holdable; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN holdable SET DEFAULT true;


--
-- Name: deposit_amount; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deposit_amount SET DEFAULT 0.00;


--
-- Name: opac_visible; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN opac_visible SET DEFAULT true;


--
-- Name: deleted; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deleted SET DEFAULT false;


--
-- Name: floating; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN floating SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_items2; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


SET search_path = m_kcls_items3, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN id SET DEFAULT nextval('asset.copy_id_seq'::regclass);


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: edit_date; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN edit_date SET DEFAULT now();


--
-- Name: status; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN status SET DEFAULT 0;


--
-- Name: location; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN location SET DEFAULT 1;


--
-- Name: circulate; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN circulate SET DEFAULT true;


--
-- Name: deposit; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deposit SET DEFAULT false;


--
-- Name: ref; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN ref SET DEFAULT false;


--
-- Name: holdable; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN holdable SET DEFAULT true;


--
-- Name: deposit_amount; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deposit_amount SET DEFAULT 0.00;


--
-- Name: opac_visible; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN opac_visible SET DEFAULT true;


--
-- Name: deleted; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN deleted SET DEFAULT false;


--
-- Name: floating; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN floating SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY asset_copy_legacy ALTER COLUMN mint_condition SET DEFAULT true;


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_items3; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


SET search_path = m_kcls_ord, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN id SET DEFAULT nextval('asset.copy_id_seq'::regclass);


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: edit_date; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN edit_date SET DEFAULT now();


--
-- Name: status; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN status SET DEFAULT 0;


--
-- Name: location; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN location SET DEFAULT 1;


--
-- Name: circulate; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN circulate SET DEFAULT true;


--
-- Name: deposit; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN deposit SET DEFAULT false;


--
-- Name: ref; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN ref SET DEFAULT false;


--
-- Name: holdable; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN holdable SET DEFAULT true;


--
-- Name: deposit_amount; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN deposit_amount SET DEFAULT 0.00;


--
-- Name: opac_visible; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN opac_visible SET DEFAULT true;


--
-- Name: deleted; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN deleted SET DEFAULT false;


--
-- Name: floating; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN floating SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls_ord; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN mint_condition SET DEFAULT true;


SET search_path = m_kcls_ord2, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN id SET DEFAULT nextval('asset.copy_id_seq'::regclass);


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: edit_date; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN edit_date SET DEFAULT now();


--
-- Name: status; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN status SET DEFAULT 0;


--
-- Name: location; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN location SET DEFAULT 1;


--
-- Name: circulate; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN circulate SET DEFAULT true;


--
-- Name: deposit; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN deposit SET DEFAULT false;


--
-- Name: ref; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN ref SET DEFAULT false;


--
-- Name: holdable; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN holdable SET DEFAULT true;


--
-- Name: deposit_amount; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN deposit_amount SET DEFAULT 0.00;


--
-- Name: opac_visible; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN opac_visible SET DEFAULT true;


--
-- Name: deleted; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN deleted SET DEFAULT false;


--
-- Name: floating; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN floating SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls_ord2; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN mint_condition SET DEFAULT true;


SET search_path = m_kcls_ord3, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN id SET DEFAULT nextval('asset.copy_id_seq'::regclass);


--
-- Name: create_date; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN create_date SET DEFAULT now();


--
-- Name: edit_date; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN edit_date SET DEFAULT now();


--
-- Name: status; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN status SET DEFAULT 0;


--
-- Name: location; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN location SET DEFAULT 1;


--
-- Name: circulate; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN circulate SET DEFAULT true;


--
-- Name: deposit; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN deposit SET DEFAULT false;


--
-- Name: ref; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN ref SET DEFAULT false;


--
-- Name: holdable; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN holdable SET DEFAULT true;


--
-- Name: deposit_amount; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN deposit_amount SET DEFAULT 0.00;


--
-- Name: opac_visible; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN opac_visible SET DEFAULT true;


--
-- Name: deleted; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN deleted SET DEFAULT false;


--
-- Name: floating; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN floating SET DEFAULT false;


--
-- Name: mint_condition; Type: DEFAULT; Schema: m_kcls_ord3; Owner: evergreen
--

ALTER TABLE ONLY on_order_items ALTER COLUMN mint_condition SET DEFAULT true;


SET search_path = m_test, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: m_test; Owner: evergreen
--

ALTER TABLE ONLY base_circ_field_map ALTER COLUMN id SET DEFAULT nextval('base_circ_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_test; Owner: evergreen
--

ALTER TABLE ONLY base_copy_location_map ALTER COLUMN id SET DEFAULT nextval('base_copy_location_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_test; Owner: evergreen
--

ALTER TABLE ONLY base_item_dynamic_field_map ALTER COLUMN id SET DEFAULT nextval('base_item_dynamic_field_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_test; Owner: evergreen
--

ALTER TABLE ONLY base_profile_map ALTER COLUMN id SET DEFAULT nextval('base_profile_map_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: m_test; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN id SET DEFAULT nextval('money.billable_xact_id_seq'::regclass);


--
-- Name: xact_start; Type: DEFAULT; Schema: m_test; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN xact_start SET DEFAULT now();


--
-- Name: create_time; Type: DEFAULT; Schema: m_test; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN create_time SET DEFAULT now();


--
-- Name: fine_interval; Type: DEFAULT; Schema: m_test; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN fine_interval SET DEFAULT '1 day'::interval;


--
-- Name: phone_renewal; Type: DEFAULT; Schema: m_test; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN phone_renewal SET DEFAULT false;


--
-- Name: desk_renewal; Type: DEFAULT; Schema: m_test; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN desk_renewal SET DEFAULT false;


--
-- Name: opac_renewal; Type: DEFAULT; Schema: m_test; Owner: evergreen
--

ALTER TABLE ONLY circhist ALTER COLUMN opac_renewal SET DEFAULT false;


SET search_path = cmd, pg_catalog;

--
-- Data for Name: unused_indexes; Type: TABLE DATA; Schema: cmd; Owner: postgres
--

COPY unused_indexes (fqindexname, total_size, raw_size) FROM stdin;
\.


SET search_path = envisionware, pg_catalog;

--
-- Data for Name: users_made_no_access; Type: TABLE DATA; Schema: envisionware; Owner: evergreen
--

COPY users_made_no_access (id, original_net_access_level, date_changed) FROM stdin;
\.


SET search_path = esi, pg_catalog;

--
-- Data for Name: action_circulation_hs22978; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY action_circulation_hs22978 (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ, grace_period, copy_location) FROM stdin;
\.


--
-- Data for Name: backroom_items; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY backroom_items (barcode, id, status) FROM stdin;
\.


--
-- Data for Name: bad_hold_transit_copy; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY bad_hold_transit_copy (id, source_send_time, dest_recv_time, target_copy, source, dest, prev_hop, copy_status, persistant_transfer, prev_dest, hold) FROM stdin;
\.


--
-- Data for Name: bibs_to_reingest_hs21524; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY bibs_to_reingest_hs21524 (id) FROM stdin;
\.


--
-- Data for Name: bibstodelete19187; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY bibstodelete19187 (record, tag, count, title, author, isbn, value) FROM stdin;
\.


--
-- Data for Name: chartest; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY chartest (marc) FROM stdin;
\.


--
-- Data for Name: cleanupvolumes1; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY cleanupvolumes1 (volume_id) FROM stdin;
\.


--
-- Data for Name: cleanupvolumes18552; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY cleanupvolumes18552 (volume_id) FROM stdin;
\.


--
-- Data for Name: cleanupvolumes2; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY cleanupvolumes2 (volume_id) FROM stdin;
\.


--
-- Data for Name: deletedfunds18487; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY deletedfunds18487 (id, fund, origin_amount, origin_currency_type, amount, encumbrance, debit_type, xfer_destination, create_time) FROM stdin;
\.


--
-- Data for Name: fundstodelete; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY fundstodelete (id) FROM stdin;
\.


--
-- Data for Name: fundstodelete2; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY fundstodelete2 (id, fund, origin_amount, origin_currency_type, amount, encumbrance, debit_type, xfer_destination, create_time) FROM stdin;
\.


--
-- Data for Name: headings; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY headings (id) FROM stdin;
\.


--
-- Data for Name: hold_request_hs20783; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY hold_request_hs20783 (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: hold_request_hs20783_2nd_file; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY hold_request_hs20783_2nd_file (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: hs17295_edi_message; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY hs17295_edi_message (id, account, remote_file, create_time, translate_time, process_time, error_time, status, edi, jedi, error, purchase_order, message_type) FROM stdin;
\.


--
-- Data for Name: needsoverduephone; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY needsoverduephone (id) FROM stdin;
\.


--
-- Data for Name: offline_script_hs20920; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY offline_script_hs20920 (id, session, requestor, create_time, workstation, logfile, time_delta, count) FROM stdin;
\.


--
-- Data for Name: offline_session_hs20920; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY offline_session_hs20920 (key, org, description, creator, create_time, in_process, start_time, end_time, num_complete) FROM stdin;
\.


--
-- Data for Name: old_notice_events; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY old_notice_events (id, target, event_def, add_time, run_time, start_time, update_time, complete_time, update_process, state, user_data, template_output, error_output, async_output) FROM stdin;
\.


--
-- Data for Name: phasefx16756_xacts; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY phasefx16756_xacts (id) FROM stdin;
\.


--
-- Data for Name: saved_inactive_patron_cards; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY saved_inactive_patron_cards (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: statuschange17802; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY statuschange17802 (id, status) FROM stdin;
\.


--
-- Data for Name: steve092711oldholdnotices; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steve092711oldholdnotices (id, target, event_def, add_time, run_time, start_time, update_time, complete_time, update_process, state, user_data, template_output, error_output, async_output) FROM stdin;
\.


--
-- Data for Name: steve17090funddebit; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steve17090funddebit (id, fund, origin_amount, origin_currency_type, amount, encumbrance, debit_type, xfer_destination, create_time) FROM stdin;
\.


--
-- Data for Name: steve17090lineitems; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steve17090lineitems (id, creator, editor, selector, provider, purchase_order, picklist, expected_recv_time, create_time, edit_time, marc, eg_bib_id, source_label, state, cancel_reason, estimated_unit_price, claim_policy) FROM stdin;
\.


--
-- Data for Name: steve17090lineitemsdetails; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steve17090lineitemsdetails (id, lineitem, fund, fund_debit, eg_copy_id, barcode, cn_label, note, collection_code, circ_modifier, owning_lib, location, recv_time, cancel_reason) FROM stdin;
\.


--
-- Data for Name: steve2371665holds; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steve2371665holds (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: steve2759532holds; Type: TABLE DATA; Schema: esi; Owner: postgres
--

COPY steve2759532holds (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: steve_reshelving_fix18027; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steve_reshelving_fix18027 (id) FROM stdin;
\.


--
-- Data for Name: steve_reshelving_fix180271; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steve_reshelving_fix180271 (id) FROM stdin;
\.


--
-- Data for Name: steveacqedimessagebackup18700; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveacqedimessagebackup18700 (id, account, remote_file, create_time, translate_time, process_time, error_time, status, edi, jedi, error, purchase_order, message_type) FROM stdin;
\.


--
-- Data for Name: steveaction_collector; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveaction_collector (module, description) FROM stdin;
\.


--
-- Data for Name: steveaction_def; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveaction_def (id, active, owner, name, hook, validator, reactor, cleanup_success, cleanup_failure, delay, max_delay, usr_field, opt_in_setting, delay_field, group_field, template, granularity) FROM stdin;
\.


--
-- Data for Name: steveaction_environment; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveaction_environment (id, event_def, path, collector, label) FROM stdin;
\.


--
-- Data for Name: steveaction_hook; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveaction_hook (key, core_type, description, passive) FROM stdin;
\.


--
-- Data for Name: steveaction_params; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveaction_params (id, event_def, param, value) FROM stdin;
\.


--
-- Data for Name: steveaction_reactor; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveaction_reactor (module, description) FROM stdin;
\.


--
-- Data for Name: steveaction_validator; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveaction_validator (module, description) FROM stdin;
\.


--
-- Data for Name: stevebackupdef23; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevebackupdef23 (id, active, owner, name, hook, validator, reactor, cleanup_success, cleanup_failure, delay, max_delay, usr_field, opt_in_setting, delay_field, group_field, template, granularity) FROM stdin;
\.


--
-- Data for Name: stevecheckingvolumes; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevecheckingvolumes (volume_id) FROM stdin;
\.


--
-- Data for Name: stevecheckmissing; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevecheckmissing (id, max, deleted) FROM stdin;
\.


--
-- Data for Name: stevecheckreshelv; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevecheckreshelv (id, "Max Checkin Time", "Max Dest Time") FROM stdin;
\.


--
-- Data for Name: stevecopydelete; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevecopydelete (id) FROM stdin;
\.


--
-- Data for Name: steveholdprintingorig; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveholdprintingorig (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: steveholdprintingorigtakeone; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveholdprintingorigtakeone (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: steveholdprintingorigtakethree; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveholdprintingorigtakethree (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: steveholdprintingorigtaketwo; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveholdprintingorigtaketwo (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: steveholdprintingorigtesting; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveholdprintingorigtesting (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: stevelongmissingitemsdelete; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevelongmissingitemsdelete (id) FROM stdin;
\.


--
-- Data for Name: steveofflinescript18148; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveofflinescript18148 (id, session, requestor, create_time, workstation, logfile, time_delta, count) FROM stdin;
\.


--
-- Data for Name: steveofflinescript18148_2; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveofflinescript18148_2 (id, session, requestor, create_time, workstation, logfile, time_delta, count) FROM stdin;
\.


--
-- Data for Name: steveofflinescript18148_3; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveofflinescript18148_3 (id, session, requestor, create_time, workstation, logfile, time_delta, count) FROM stdin;
\.


--
-- Data for Name: steveofflinescript21783; Type: TABLE DATA; Schema: esi; Owner: postgres
--

COPY steveofflinescript21783 (id, session, requestor, create_time, workstation, logfile, time_delta, count) FROM stdin;
\.


--
-- Data for Name: steveofflinesession18148; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveofflinesession18148 (key, org, description, creator, create_time, in_process, start_time, end_time, num_complete) FROM stdin;
\.


--
-- Data for Name: steveofflinesession18148_2; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveofflinesession18148_2 (key, org, description, creator, create_time, in_process, start_time, end_time, num_complete) FROM stdin;
\.


--
-- Data for Name: steveofflinesession18148_3; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveofflinesession18148_3 (key, org, description, creator, create_time, in_process, start_time, end_time, num_complete) FROM stdin;
\.


--
-- Data for Name: steveofflinesession21783; Type: TABLE DATA; Schema: esi; Owner: postgres
--

COPY steveofflinesession21783 (key, org, description, creator, create_time, in_process, start_time, end_time, num_complete) FROM stdin;
\.


--
-- Data for Name: steveoverdueprintorig; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveoverdueprintorig (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: steveoverdueprintorigtesting; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveoverdueprintorigtesting (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: stevepenalties14512; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevepenalties14512 (id, org_unit, usr, standing_penalty, staff, set_date, stop_date, note) FROM stdin;
\.


--
-- Data for Name: stevestandingorg14512; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevestandingorg14512 (id, org_unit, usr, standing_penalty, staff, set_date, stop_date, note) FROM stdin;
\.


--
-- Data for Name: stevestopfines17480; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevestopfines17480 (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ, grace_period) FROM stdin;
\.


--
-- Data for Name: stevesupetransitcleanup; Type: TABLE DATA; Schema: esi; Owner: postgres
--

COPY stevesupetransitcleanup (target_copy) FROM stdin;
\.


--
-- Data for Name: stevetestadd; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevetestadd (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: stevetestsettings; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevetestsettings (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: stevetransitupdate; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevetransitupdate (id, source_send_time, dest_recv_time, target_copy, source, dest, prev_hop, copy_status, persistant_transfer, prev_dest) FROM stdin;
\.


--
-- Data for Name: stevetransitupdate2; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY stevetransitupdate2 (id, source_send_time, dest_recv_time, target_copy, source, dest, prev_hop, copy_status, persistant_transfer, prev_dest) FROM stdin;
\.


--
-- Data for Name: steveusrsettingbackup; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY steveusrsettingbackup (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: templatestoconvert; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY templatestoconvert (id, owner, create_time, name, description, data, folder) FROM stdin;
\.


--
-- Data for Name: to_keep; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY to_keep (barcode) FROM stdin;
\.


--
-- Data for Name: toclose; Type: TABLE DATA; Schema: esi; Owner: evergreen
--

COPY toclose (id) FROM stdin;
\.


--
-- Data for Name: transitclear; Type: TABLE DATA; Schema: esi; Owner: postgres
--

COPY transitclear (first, target_copy) FROM stdin;
\.


SET search_path = esi16538, pg_catalog;

--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: esi16538; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


SET search_path = esi_14812, pg_catalog;

--
-- Data for Name: fw_items; Type: TABLE DATA; Schema: esi_14812; Owner: evergreen
--

COPY fw_items (item_id, circ_lib, barcode, orig_status, orig_status_date, done, to_fix) FROM stdin;
\.


--
-- Data for Name: nw_items_changed; Type: TABLE DATA; Schema: esi_14812; Owner: evergreen
--

COPY nw_items_changed (id, status) FROM stdin;
\.


--
-- Data for Name: rn_dvds; Type: TABLE DATA; Schema: esi_14812; Owner: evergreen
--

COPY rn_dvds (id, holdable, opac_visible) FROM stdin;
\.


--
-- Data for Name: rn_missing_items; Type: TABLE DATA; Schema: esi_14812; Owner: evergreen
--

COPY rn_missing_items (item_id, circ_lib, barcode, orig_status, orig_status_date, done, to_fix) FROM stdin;
\.


SET search_path = m_enum, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ, grace_period) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY actor_stat_cat_entry_map (id, stat_cat, stat_cat_entry, org_id, l_library, name, legacy_field1, legacy_value1, entry) FROM stdin;
\.


--
-- Name: actor_stat_cat_entry_map_id_seq; Type: SEQUENCE SET; Schema: m_enum; Owner: evergreen
--

SELECT pg_catalog.setval('actor_stat_cat_entry_map_id_seq', 1, false);


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY actor_stat_cat_map (id, stat_cat, org_id, l_library, name) FROM stdin;
\.


--
-- Name: actor_stat_cat_map_id_seq; Type: SEQUENCE SET; Schema: m_enum; Owner: evergreen
--

SELECT pg_catalog.setval('actor_stat_cat_map_id_seq', 1, false);


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_legacy; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY actor_usr_legacy (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count, l_borrower_borrower, l_borrower_location, l_borrower_btype, l_borrower_second_id, l_borrower_name, l_borrower_name_reconstructed, l_borrower_birth_date, l_borrower_backlink, l_borrower_last_cko_date, l_borrower_n_ckos, l_borrower_registration_date, l_borrower_expiration_date, l_borrower_creation_date, l_borrower_last_update_date, l_borrower_borrower_note, l_borrower_source, l_borrower_language, l_borrower_pin, l_borrower_last_authentication_date, l_borrower_self_registered, l_borrower_approved_status, l_borrower_homeroom, l_borrower_grade, l_borrower_teacher, l_borrower_parent_guardian, l_borrower_note1, l_borrower_note2, l_borrower_note3, l_borrower_dynix_pkey, l_borrower_id, l_borrower_internet_permission, l_borrower_approved_borrowers, l_borrower_keep_circ_history, l_borrower_last_alert_date, l_borrower_borr_ldap_dn, l_borrower_use_guardian, l_borrower_address_1__ord, l_borrower_address_1__address_type, l_borrower_address_1__mail_sort_type, l_borrower_address_1__send_notice_by, l_borrower_address_1__valid_from_date, l_borrower_address_1__valid_to_date, l_borrower_address_1__address1, l_borrower_address_1__address2, l_borrower_address_1__address3, l_borrower_address_1__address4, l_borrower_address_1__postal_code, l_borrower_address_1__city_st, l_borrower_address_1__email_name, l_borrower_address_1__email_address, l_borrower_address_1__send_preoverdue, l_borrower_address_2__ord, l_borrower_address_2__address_type, l_borrower_address_2__mail_sort_type, l_borrower_address_2__send_notice_by, l_borrower_address_2__valid_from_date, l_borrower_address_2__valid_to_date, l_borrower_address_2__address1, l_borrower_address_2__address2, l_borrower_address_2__address3, l_borrower_address_2__address4, l_borrower_address_2__postal_code, l_borrower_address_2__city_st, l_borrower_address_2__email_name, l_borrower_address_2__email_address, l_borrower_address_2__send_preoverdue, l_borrower_address_3__ord, l_borrower_address_3__address_type, l_borrower_address_3__mail_sort_type, l_borrower_address_3__send_notice_by, l_borrower_address_3__valid_from_date, l_borrower_address_3__valid_to_date, l_borrower_address_3__address1, l_borrower_address_3__address2, l_borrower_address_3__address3, l_borrower_address_3__address4, l_borrower_address_3__postal_code, l_borrower_address_3__city_st, l_borrower_address_3__email_name, l_borrower_address_3__email_address, l_borrower_address_3__send_preoverdue, l_borrower_phone_1__ord, l_borrower_phone_1__phone_no, l_borrower_phone_1__phone_type, l_borrower_phone_2__ord, l_borrower_phone_2__phone_no, l_borrower_phone_2__phone_type, l_borrower_phone_3__ord, l_borrower_phone_3__phone_no, l_borrower_phone_3__phone_type, l_borrower_bstat_1__bstat, l_borrower_bstat_2__bstat, l_borrower_bstat_3__bstat, l_borrower_barcode_1__ord, l_borrower_barcode_1__bbarcode, l_borrower_barcode_1__barcode_type, l_borrower_barcode_1__lost_date, l_borrower_barcode_1__proxy_borrower, l_borrower_barcode_1__proxy_expiration_date, l_borrower_barcode_2__ord, l_borrower_barcode_2__bbarcode, l_borrower_barcode_2__barcode_type, l_borrower_barcode_2__lost_date, l_borrower_barcode_2__proxy_borrower, l_borrower_barcode_2__proxy_expiration_date, l_borrower_barcode_3__ord, l_borrower_barcode_3__bbarcode, l_borrower_barcode_3__barcode_type, l_borrower_barcode_3__lost_date, l_borrower_barcode_3__proxy_borrower, l_borrower_barcode_3__proxy_expiration_date, l_borrower_barcode_4__ord, l_borrower_barcode_4__bbarcode, l_borrower_barcode_4__barcode_type, l_borrower_barcode_4__lost_date, l_borrower_barcode_4__proxy_borrower, l_borrower_barcode_4__proxy_expiration_date, l_borrower_barcode_5__ord, l_borrower_barcode_5__bbarcode, l_borrower_barcode_5__barcode_type, l_borrower_barcode_5__lost_date, l_borrower_barcode_5__proxy_borrower, l_borrower_barcode_5__proxy_expiration_date, l_borrower_barcode_6__ord, l_borrower_barcode_6__bbarcode, l_borrower_barcode_6__barcode_type, l_borrower_barcode_6__lost_date, l_borrower_barcode_6__proxy_borrower, l_borrower_barcode_6__proxy_expiration_date, l_borrower_barcode_7__ord, l_borrower_barcode_7__bbarcode, l_borrower_barcode_7__barcode_type, l_borrower_barcode_7__lost_date, l_borrower_barcode_7__proxy_borrower, l_borrower_barcode_7__proxy_expiration_date, l_borrowerextradata_symphonykey, l_borrowerextradata_symphonyalt_id, l_borrowerextradata_library, l_borrowerextradata_user_profile, l_borrowerextradata_default_pin, l_borrowerextradata_default_name) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey, prefix, suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_legacy; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY asset_copy_legacy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, egid, hseq, l_item_num, l_barcode, l_collection, l_call_num, l_copy, l_last_inv_date, l_volume, l_istat, l_pieces, l_create_date, l_update_date, l_location, l_price, l_last_checkout, l_source, l_itype, l_note, l_call_type, l_checkin_note, l_item_status, l_num_loans, l_internal_note) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_enum; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_enum; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_enum; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_enum; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: bib_hbib_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY bib_hbib_map (record, value) FROM stdin;
\.


--
-- Data for Name: bib_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY bib_map (item_eg_id, egid) FROM stdin;
\.


--
-- Data for Name: card_collisions; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY card_collisions (id, reason, usr, barcode) FROM stdin;
\.


--
-- Name: card_collisions_id_seq; Type: SEQUENCE SET; Schema: m_enum; Owner: evergreen
--

SELECT pg_catalog.setval('card_collisions_id_seq', 1, false);


--
-- Data for Name: circ; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY circ (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ, grace_period, l_item_barcode, l_patron_num, l_barcode, l_checkout, l_loc, l_due, l_renewals) FROM stdin;
\.


--
-- Data for Name: circ_mod_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY circ_mod_map (l_collection, l_circ_mod) FROM stdin;
\.


--
-- Data for Name: circs_missing_data; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY circs_missing_data (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ, grace_period, l_item_barcode, l_patron_num, l_barcode, l_checkout, l_loc, l_due, l_renewals) FROM stdin;
\.


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: holds; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY holds (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_bib_num, l_item_num, l_bnum, l_bbarc, l_request_date, l_expire_date, l_on_shelf, l_shelf_expire, l_reactive, l_status, l_notes) FROM stdin;
\.


--
-- Data for Name: holds_missing_stuff; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY holds_missing_stuff (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_bib_num, l_item_num, l_bnum, l_bbarc, l_request_date, l_expire_date, l_on_shelf, l_shelf_expire, l_reactive, l_status, l_notes) FROM stdin;
\.


--
-- Data for Name: home_location_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY home_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: home_location_map_id_seq; Type: SEQUENCE SET; Schema: m_enum; Owner: evergreen
--

SELECT pg_catalog.setval('home_location_map_id_seq', 1, false);


--
-- Data for Name: item_dynamic_field_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_enum; Owner: evergreen
--

SELECT pg_catalog.setval('item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: item_key_barcode_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY item_key_barcode_map (key1, key2, key3, barcode) FROM stdin;
\.


--
-- Data for Name: items_missing_barcodes; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY items_missing_barcodes (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, egid, hseq, l_item_num, l_barcode, l_collection, l_call_num, l_copy, l_last_inv_date, l_volume, l_istat, l_pieces, l_create_date, l_update_date, l_location, l_price, l_last_checkout, l_source, l_itype, l_note, l_call_type, l_checkin_note, l_item_status, l_num_loans, l_internal_note) FROM stdin;
\.


--
-- Data for Name: items_not_migrating; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY items_not_migrating (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, egid, hseq, l_item_num, l_barcode, l_collection, l_call_num, l_copy, l_last_inv_date, l_volume, l_istat, l_pieces, l_create_date, l_update_date, l_location, l_price, l_last_checkout, l_source, l_itype, l_note, l_call_type, l_checkin_note, l_item_status, l_num_loans, l_internal_note) FROM stdin;
\.


--
-- Data for Name: loc_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY loc_map (l_collection, l_loc) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: new_merge; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY new_merge (hbib_id, source_egid, target_egid) FROM stdin;
\.


--
-- Data for Name: org_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY org_map (id, org_id, transcribed_shortname, l_library, patron_rebarcode_offset, item_rebarcode_offset, default_circ_staff) FROM stdin;
\.


--
-- Name: org_map_id_seq; Type: SEQUENCE SET; Schema: m_enum; Owner: evergreen
--

SELECT pg_catalog.setval('org_map_id_seq', 1, false);


--
-- Data for Name: orig_egid_copy_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY orig_egid_copy_map (id, egid) FROM stdin;
\.


--
-- Data for Name: profile_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: profile_map_id_seq; Type: SEQUENCE SET; Schema: m_enum; Owner: evergreen
--

SELECT pg_catalog.setval('profile_map_id_seq', 1, false);


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


--
-- Data for Name: user_key_barcode_map; Type: TABLE DATA; Schema: m_enum; Owner: evergreen
--

COPY user_key_barcode_map (key, barcode) FROM stdin;
\.


SET search_path = m_kcls, pg_catalog;

--
-- Data for Name: acq_provider_address_bkp; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY acq_provider_address_bkp (id, valid, address_type, provider, street1, street2, city, county, state, country, post_code, fax_phone) FROM stdin;
\.


--
-- Data for Name: acq_provider_address_new; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY acq_provider_address_new (id, valid, address_type, provider, street1, street2, city, county, state, country, post_code, fax_phone) FROM stdin;
\.


--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_circulation_legacy; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY action_circulation_legacy (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ, l_item_id, l_patron_id, l_checkout_date, l_due_date, l_status, l_loan_rule, l_out_loc, x_date) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: action_hold_request_legacy; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY action_hold_request_legacy (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_dupe_barcodes; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY actor_dupe_barcodes (usrname, to_fix) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_legacy; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY actor_usr_legacy (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count, l_patron_id, l_last_circ, l_exp_date, l_pcode1, l_pcode2, l_pcode3, l_ptype, l_homelib, l_mblock, l_pmessage, l_pcode4, l_birth_date, l_tot_loans, l_tot_renew, l_claim_ret, l_barcode, l_name, l_phone1, l_phone2, l_email, x_dob) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: actor_usr_setting; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY actor_usr_setting (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: actor_usr_standing_penalty; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY actor_usr_standing_penalty (id, org_unit, usr, standing_penalty, staff, set_date, stop_date, note) FROM stdin;
\.


--
-- Data for Name: alert_messages; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY alert_messages (l_iii_bib_id, l_item_seq, array_to_string) FROM stdin;
\.


--
-- Data for Name: appropriations; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY appropriations (l_fund_code, l_amount) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_legacy; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY asset_copy_legacy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_item_seq, l_barcode, l_call_num, l_copy_num, l_created, l_icode2, l_imessage, l_int_note, l_item_id, l_itype, l_location, l_lyrcirc, l_message, l_opacmsg, l_price, l_status, l_tot_chkout, l_tot_renew, l_volume, l_ytdcirc, egid, x_call_number) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: auths_to_del; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY auths_to_del (record) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: best_avail_copies; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY best_avail_copies (hold_id, request_time, bib_id, copy_id, circ_lib) FROM stdin;
\.


--
-- Data for Name: bibs_to_fix; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY bibs_to_fix (seq, done, id) FROM stdin;
\.


--
-- Name: bibs_to_fix_seq_seq; Type: SEQUENCE SET; Schema: m_kcls; Owner: evergreen
--

SELECT pg_catalog.setval('bibs_to_fix_seq_seq', 1, false);


--
-- Data for Name: bibs_with_938; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY bibs_with_938 (record, id, done) FROM stdin;
\.


--
-- Name: bibs_with_938_id_seq; Type: SEQUENCE SET; Schema: m_kcls; Owner: evergreen
--

SELECT pg_catalog.setval('bibs_with_938_id_seq', 1, false);


--
-- Data for Name: bibs_with_crossed_d; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY bibs_with_crossed_d (id) FROM stdin;
\.


--
-- Data for Name: bookbag; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY bookbag (id, owner, name, btype, pub, create_time, l_listnum, l_patron_id, l_list_name, l_list_desc, l_list_date, x_patron_id) FROM stdin;
\.


--
-- Data for Name: bookbag_entry; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY bookbag_entry (id, bucket, target_biblio_record_entry, pos, create_time, l_bib_id, l_dateadded, l_listnum) FROM stdin;
\.


--
-- Data for Name: circ_rule_map; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY circ_rule_map (l_loan_rule, l_duration, l_recurring_fine, l_max_fine) FROM stdin;
\.


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: container_biblio_record_entry_bucket; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY container_biblio_record_entry_bucket (id, owner, name, btype, pub, create_time) FROM stdin;
\.


--
-- Data for Name: container_biblio_record_entry_bucket_item; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY container_biblio_record_entry_bucket_item (id, bucket, target_biblio_record_entry, pos, create_time) FROM stdin;
\.


--
-- Data for Name: copy_dupe_barcodes; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY copy_dupe_barcodes (barcode, to_fix) FROM stdin;
\.


--
-- Data for Name: copy_dupe_barcodes2; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY copy_dupe_barcodes2 (barcode, to_fix) FROM stdin;
\.


--
-- Data for Name: cp_map; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY cp_map (provider_id, cp_id) FROM stdin;
\.


--
-- Data for Name: dist_formulas; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY dist_formulas (name, copies, ou, ou_id, loc_id, seq) FROM stdin;
\.


--
-- Data for Name: dist_formulas2; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY dist_formulas2 (name, copies, ou, ou_id, seq, dist_id) FROM stdin;
\.


--
-- Data for Name: dob_1900; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY dob_1900 (l_patron_id, l_barcode, l_dob) FROM stdin;
\.


--
-- Data for Name: eres_tcns; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY eres_tcns (iii_bib_id) FROM stdin;
\.


--
-- Data for Name: event_def_restore; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY event_def_restore (id, active, owner, name, hook, validator, reactor, cleanup_success, cleanup_failure, delay, max_delay, usr_field, opt_in_setting, delay_field, group_field, template, granularity) FROM stdin;
\.


--
-- Data for Name: event_def_restore2; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY event_def_restore2 (id, active, owner, name, hook, validator, reactor, cleanup_success, cleanup_failure, delay, max_delay, usr_field, opt_in_setting, delay_field, group_field, template, granularity) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: fund_all; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY fund_all (source_code, fund_code, amount, source_id, find_id, amount_x) FROM stdin;
\.


--
-- Data for Name: ids_eres; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY ids_eres (id) FROM stdin;
\.


--
-- Data for Name: ids_phys; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY ids_phys (id) FROM stdin;
\.


--
-- Data for Name: int_notes; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY int_notes (id, owning_copy, creator, create_date, pub, title, value, l_iii_bib_id, l_item_seq, l_note) FROM stdin;
\.


--
-- Data for Name: item_exceptions; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY item_exceptions (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_item_seq, l_barcode, l_call_num, l_copy_num, l_created, l_icode2, l_imessage, l_int_note, l_item_id, l_itype, l_location, l_lyrcirc, l_message, l_opacmsg, l_price, l_status, l_tot_chkout, l_tot_renew, l_volume, l_ytdcirc, egid, x_call_number) FROM stdin;
\.


--
-- Data for Name: item_status_map; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY item_status_map (l_status, eg_status) FROM stdin;
\.


--
-- Data for Name: jan21_pos; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY jan21_pos (purchase_order, state) FROM stdin;
\.


--
-- Data for Name: km_move; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY km_move (id, job, done) FROM stdin;
\.


--
-- Name: km_move_job_seq; Type: SEQUENCE SET; Schema: m_kcls; Owner: evergreen
--

SELECT pg_catalog.setval('km_move_job_seq', 1, false);


--
-- Data for Name: legacy_circ_count; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY legacy_circ_count (id, circ_count) FROM stdin;
\.


--
-- Data for Name: locations; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY locations (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix, l_location, l_label) FROM stdin;
\.


--
-- Data for Name: messages; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY messages (l_iii_bib_id, l_item_seq, l_note) FROM stdin;
\.


--
-- Data for Name: metabib_field; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY metabib_field (id, field_class, name, label, xpath, weight, format, search_field, facet_field, facet_xpath) FROM stdin;
\.


--
-- Data for Name: metabib_field_index_norm_map; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY metabib_field_index_norm_map (id, field, norm, params, pos) FROM stdin;
\.


--
-- Data for Name: metabib_search_alias; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY metabib_search_alias (alias, field_class, field) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: money_grocery_legacy; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY money_grocery_legacy (id, usr, xact_start, xact_finish, unrecovered, billing_location, note, l_barcode, l_patron_id, l_amount) FROM stdin;
\.


--
-- Data for Name: netlibrary_bib_ids; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY netlibrary_bib_ids (id, done) FROM stdin;
\.


--
-- Data for Name: old2new; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY old2new (l_iii_bib_id, egid) FROM stdin;
\.


--
-- Data for Name: orig_notice_setting; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY orig_notice_setting (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: orig_relevance; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY orig_relevance (id, active, field, bump_type, multiplier) FROM stdin;
\.


--
-- Data for Name: ou_patrons; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY ou_patrons (l_patron_num, l_barcode, id) FROM stdin;
\.


--
-- Data for Name: patron_addr; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY patron_addr (l_patron_id, l_addr_type, l_addr_seq, l_addr_line, l_value) FROM stdin;
\.


--
-- Data for Name: patron_addr_compressed; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY patron_addr_compressed (l_patron_id, l_addr_type, l_addr_seq, array_accum, parsed) FROM stdin;
\.


--
-- Data for Name: patron_extras; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY patron_extras (l_patron_id, l_barcode, l_filter, l_guardian, l_pickupau, l_halias, l_fresh, l_addr_alert, l_owed) FROM stdin;
\.


--
-- Data for Name: patron_note; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY patron_note (l_patron_id, l_title, l_value) FROM stdin;
\.


--
-- Data for Name: patrons_with_history; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY patrons_with_history (usr) FROM stdin;
\.


--
-- Data for Name: pcode3_map; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY pcode3_map (code, value) FROM stdin;
\.


--
-- Data for Name: ptype_map; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY ptype_map (l_p_type, l_grp, grp_id) FROM stdin;
\.


--
-- Data for Name: rejected_circs; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY rejected_circs (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ, l_item_id, l_patron_id, l_checkout_date, l_due_date, l_status, l_loan_rule, l_out_loc) FROM stdin;
\.


--
-- Data for Name: rejected_holds; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY rejected_holds (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype) FROM stdin;
\.


--
-- Data for Name: relevance_adjustment; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY relevance_adjustment (id, active, field, bump_type, multiplier) FROM stdin;
\.


--
-- Data for Name: sources; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY sources (source_code, amount, source_id) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


--
-- Data for Name: summer_patrons_to_delete; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY summer_patrons_to_delete (id) FROM stdin;
\.


--
-- Data for Name: usr_not_migrated_per_ptype; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY usr_not_migrated_per_ptype (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count, l_patron_id, l_last_circ, l_exp_date, l_pcode1, l_pcode2, l_pcode3, l_ptype, l_homelib, l_mblock, l_pmessage, l_pcode4, l_birth_date, l_tot_loans, l_tot_renew, l_claim_ret, l_barcode, l_name, l_phone1, l_phone2, l_email, x_dob) FROM stdin;
\.


--
-- Data for Name: vols_to_delete; Type: TABLE DATA; Schema: m_kcls; Owner: evergreen
--

COPY vols_to_delete (volume_id) FROM stdin;
\.


SET search_path = m_kcls2, pg_catalog;

--
-- Data for Name: acq_fund; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY acq_fund (id, org, name, year, currency_type, code, rollover, propagate, active, balance_warning_percent, balance_stop_percent) FROM stdin;
\.


--
-- Data for Name: acq_fund_legacy; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY acq_fund_legacy (id, org, name, year, currency_type, code, rollover, propagate, active, balance_warning_percent, balance_stop_percent, l_code, l_name, l_path, l_type) FROM stdin;
\.


--
-- Data for Name: acq_provider; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY acq_provider (id, name, owner, currency_type, code, holding_tag, san, edi_default, active, prepayment_required, url, email, phone, fax_phone, default_claim_policy) FROM stdin;
\.


--
-- Data for Name: acq_provider_address; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY acq_provider_address (id, valid, address_type, provider, street1, street2, city, county, state, country, post_code, fax_phone) FROM stdin;
\.


--
-- Data for Name: acq_provider_address_legacy; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY acq_provider_address_legacy (id, valid, address_type, provider, street1, street2, city, county, state, country, post_code, fax_phone, l_lines) FROM stdin;
\.


--
-- Data for Name: acq_provider_contact; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY acq_provider_contact (id, provider, name, role, email, phone) FROM stdin;
\.


--
-- Data for Name: acq_provider_contact_address; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY acq_provider_contact_address (id, valid, address_type, contact, street1, street2, city, county, state, country, post_code, fax_phone) FROM stdin;
\.


--
-- Data for Name: acq_provider_contact_legacy; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY acq_provider_contact_legacy (id, provider, name, role, email, phone, l_contact) FROM stdin;
\.


--
-- Data for Name: acq_provider_legacy; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY acq_provider_legacy (id, name, owner, currency_type, code, holding_tag, san, edi_default, active, prepayment_required, url, email, phone, fax_phone, default_claim_policy, l_claimcycle, l_vcode3, l_gir_code, l_venname, l_vencode, l_sansuffix, l_contact, l_address1, l_phone_num, l_fax, l_note1, l_note2, l_note3, l_address2, l_email, l_url) FROM stdin;
\.


--
-- Data for Name: acq_provider_note; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY acq_provider_note (id, provider, creator, editor, create_time, edit_time, value) FROM stdin;
\.


--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_circulation_legacy; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY action_circulation_legacy (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ, l_item_id, l_patron_id, l_checkout_date, l_due_date, l_status, l_loan_rule, l_out_loc, x_date) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: action_hold_request_legacy; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY action_hold_request_legacy (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_dupe_barcodes; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY actor_dupe_barcodes (usrname, to_fix) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_legacy; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY actor_usr_legacy (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count, l_patron_id, l_last_circ, l_exp_date, l_pcode1, l_pcode2, l_pcode3, l_ptype, l_homelib, l_mblock, l_pmessage, l_pcode4, l_birth_date, l_tot_loans, l_tot_renew, l_claim_ret, l_barcode, l_name, l_phone1, l_phone2, l_email, x_dob) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: actor_usr_setting; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY actor_usr_setting (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: alert_messages; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY alert_messages (l_iii_bib_id, l_item_seq, array_to_string) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_legacy; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY asset_copy_legacy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_item_seq, l_barcode, l_call_num, l_copy_num, l_created, l_icode2, l_imessage, l_int_note, l_item_id, l_itype, l_location, l_lyrcirc, l_message, l_opacmsg, l_price, l_status, l_tot_chkout, l_tot_renew, l_volume, l_ytdcirc, egid, x_call_number, x_location) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_location_backup; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY asset_copy_location_backup (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls2; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls2; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls2; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls2; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: bookbag; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY bookbag (id, owner, name, btype, pub, create_time, l_listnum, l_patron_id, l_list_name, l_list_desc, l_list_date, x_patron_id) FROM stdin;
\.


--
-- Data for Name: bookbag_entry; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY bookbag_entry (id, bucket, target_biblio_record_entry, pos, create_time, l_bib_id, l_dateadded, l_listnum) FROM stdin;
\.


--
-- Data for Name: circ_rule_map; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY circ_rule_map (l_loan_rule, l_duration, l_recurring_fine, l_max_fine) FROM stdin;
\.


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: container_biblio_record_entry_bucket; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY container_biblio_record_entry_bucket (id, owner, name, btype, pub, create_time) FROM stdin;
\.


--
-- Data for Name: container_biblio_record_entry_bucket_item; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY container_biblio_record_entry_bucket_item (id, bucket, target_biblio_record_entry, pos, create_time) FROM stdin;
\.


--
-- Data for Name: copy_dupe_barcodes; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY copy_dupe_barcodes (barcode, to_fix) FROM stdin;
\.


--
-- Data for Name: copy_name_map; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY copy_name_map (orig_code, name, new_code) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: int_notes; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY int_notes (id, owning_copy, creator, create_date, pub, title, value, l_iii_bib_id, l_item_seq, l_note) FROM stdin;
\.


--
-- Data for Name: item_exceptions; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY item_exceptions (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_item_seq, l_barcode, l_call_num, l_copy_num, l_created, l_icode2, l_imessage, l_int_note, l_item_id, l_itype, l_location, l_lyrcirc, l_message, l_opacmsg, l_price, l_status, l_tot_chkout, l_tot_renew, l_volume, l_ytdcirc, egid, x_call_number) FROM stdin;
\.


--
-- Data for Name: item_status_map; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY item_status_map (l_status, eg_status) FROM stdin;
\.


--
-- Data for Name: messages; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY messages (l_iii_bib_id, l_item_seq, l_note) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: money_grocery_legacy; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY money_grocery_legacy (id, usr, xact_start, xact_finish, unrecovered, billing_location, note, l_barcode, l_patron_id, l_amount) FROM stdin;
\.


--
-- Data for Name: old2new; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY old2new (l_iii_bib_id, egid) FROM stdin;
\.


--
-- Data for Name: ou_map; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY ou_map (l_ou, l_lib, l_loc, l_loc_name, l_location, ou_id) FROM stdin;
\.


--
-- Data for Name: patron_addr; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY patron_addr (l_patron_id, l_addr_type, l_addr_seq, l_addr_line, l_value) FROM stdin;
\.


--
-- Data for Name: patron_addr_compressed; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY patron_addr_compressed (l_patron_id, l_addr_type, l_addr_seq, array_accum, parsed) FROM stdin;
\.


--
-- Data for Name: patron_extras; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY patron_extras (l_patron_id, l_barcode, l_filter, l_guardian, l_pickupau, l_halias, l_fresh, l_addr_alert, l_owed) FROM stdin;
\.


--
-- Data for Name: patron_note; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY patron_note (l_patron_id, l_title, l_value) FROM stdin;
\.


--
-- Data for Name: ptype_map; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY ptype_map (l_p_type, l_grp, grp_id) FROM stdin;
\.


--
-- Data for Name: rejected_circs; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY rejected_circs (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ, l_item_id, l_patron_id, l_checkout_date, l_due_date, l_status, l_loan_rule, l_out_loc) FROM stdin;
\.


--
-- Data for Name: rejected_holds; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY rejected_holds (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype) FROM stdin;
\.


--
-- Data for Name: rename_loc_map; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY rename_loc_map (l_location, location, code, name, new_code) FROM stdin;
\.


--
-- Data for Name: root; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY root (split_part) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


--
-- Data for Name: transend; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY transend (l_iii_bib_id, egid) FROM stdin;
\.


--
-- Data for Name: usr_not_migrated_per_ptype; Type: TABLE DATA; Schema: m_kcls2; Owner: evergreen
--

COPY usr_not_migrated_per_ptype (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count, l_patron_id, l_last_circ, l_exp_date, l_pcode1, l_pcode2, l_pcode3, l_ptype, l_homelib, l_mblock, l_pmessage, l_pcode4, l_birth_date, l_tot_loans, l_tot_renew, l_claim_ret, l_barcode, l_name, l_phone1, l_phone2, l_email, x_dob) FROM stdin;
\.


SET search_path = m_kcls3, pg_catalog;

--
-- Data for Name: acq_fund; Type: TABLE DATA; Schema: m_kcls3; Owner: evergreen
--

COPY acq_fund (id, org, name, year, currency_type, code, rollover, propagate, active, balance_warning_percent, balance_stop_percent) FROM stdin;
\.


--
-- Data for Name: acq_fund_2; Type: TABLE DATA; Schema: m_kcls3; Owner: evergreen
--

COPY acq_fund_2 (id, org, name, year, currency_type, code, rollover, propagate, active, balance_warning_percent, balance_stop_percent, l_amount, l_source, l_tag) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls3; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls3; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls3; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls3; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls3; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls3; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls3; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls3; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls3; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls3; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls3; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls3; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = m_kcls_call_fix, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_call_fix; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_call_fix; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_call_fix; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_call_fix; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: cn_with_one_item; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY cn_with_one_item (orig_call_id) FROM stdin;
\.


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: item_calls; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY item_calls (copy_id, orig_call_id, owning_lib, record, circ_lib, label, only_one, new_call_id) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_call_fix; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = m_kcls_circhist, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_circhist; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_circhist; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_circhist; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_circhist; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: circhist; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY circhist (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ, l_patron_id, l_bib_num, l_item_num, l_checkout, x_date, done) FROM stdin;
\.


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_circhist; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = m_kcls_gap, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: alert_messages; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY alert_messages (l_iii_bib_id, l_item_seq, array_to_string) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_legacy; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY asset_copy_legacy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_item_seq, l_barcode, l_call_num, l_copy_num, l_created, l_icode2, l_imessage, l_int_note, l_item_id, l_itype, l_location, l_lyrcirc, l_message, l_opacmsg, l_price, l_status, l_tot_chkout, l_tot_renew, l_volume, l_ytdcirc, egid, x_call_number) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_gap; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_gap; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_gap; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_gap; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: copy_dupe_barcodes; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY copy_dupe_barcodes (barcode, to_fix) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: int_notes; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY int_notes (id, owning_copy, creator, create_date, pub, title, value, l_iii_bib_id, l_item_seq, l_note) FROM stdin;
\.


--
-- Data for Name: item_exceptions; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY item_exceptions (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_item_seq, l_barcode, l_call_num, l_copy_num, l_created, l_icode2, l_imessage, l_int_note, l_item_id, l_itype, l_location, l_lyrcirc, l_message, l_opacmsg, l_price, l_status, l_tot_chkout, l_tot_renew, l_volume, l_ytdcirc, egid, x_call_number) FROM stdin;
\.


--
-- Data for Name: messages; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY messages (l_iii_bib_id, l_item_seq, l_note) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_gap; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = m_kcls_holds, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: action_hold_request_legacy; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY action_hold_request_legacy (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holds; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holds; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holds; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holds; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: rejected_holds; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY rejected_holds (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_holds; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = m_kcls_holdsall, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: action_hold_request_legacy; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY action_hold_request_legacy (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype, changed) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsall; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsall; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsall; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsall; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_holdsall; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = m_kcls_holdsall2, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: action_hold_request_legacy; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY action_hold_request_legacy (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype, changed) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsall2; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsall2; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsall2; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsall2; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_holdsall2; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = m_kcls_holdsall3, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: action_hold_request_legacy; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY action_hold_request_legacy (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype, changed) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsall3; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsall3; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsall3; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsall3; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_holdsall3; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = m_kcls_holdsfix, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: action_hold_request_legacy; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY action_hold_request_legacy (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: all_prod_holds; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY all_prod_holds (l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsfix; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsfix; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsfix; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_holdsfix; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: holds_to_delete; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY holds_to_delete (id) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: rejected_holds; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY rejected_holds (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time, l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


--
-- Data for Name: to_keep; Type: TABLE DATA; Schema: m_kcls_holdsfix; Owner: evergreen
--

COPY to_keep (l_nkey, l_nholdrecnumber, l_npatronnumber, l_bitemhold, l_sitemlocation, l_spickuplocation, l_stitle, l_snormtitle, l_spatronname, l_snormpatronname, l_timestampdateplaced, l_timestampnnadate, l_timestampnnbdate, l_spatronphone, l_spatronemail, l_scallnum, l_sholdposition, l_sitemstatus, l_sitembarcode, l_bonholdshelf, l_sholdnote, l_snormholdnote, l_sholdstatus, l_snormholdstatus, l_slimitlocation, l_slongtitle, l_snormlongtitle, l_slongauthor, l_snormlongauthor, l_ntotalattacheditems, l_ntotalattacheditemspickup, l_nbibrecnum, l_cmaterialtype) FROM stdin;
\.


SET search_path = m_kcls_items2, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_legacy; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY asset_copy_legacy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_item_seq, l_barcode, l_call_num, l_copy_num, l_created, l_updated, l_icode, l_internal_use, l_icode1, l_icode2, l_imessage, l_int_note, l_item_id, l_itype, l_invda, l_intnote, l_location, l_lyrcirc, l_message, l_opacmsg, l_price, l_status, l_tot_chkout, l_tot_renew, l_volume, l_ytdcirc, egid, x_call_number) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_items2; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_items2; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_items2; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_items2; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: copy_dupe_barcodes; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY copy_dupe_barcodes (barcode, to_fix) FROM stdin;
\.


--
-- Data for Name: copy_dupe_barcodes2; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY copy_dupe_barcodes2 (barcode, to_fix) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: item_exceptions; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY item_exceptions (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_item_seq, l_barcode, l_call_num, l_copy_num, l_created, l_updated, l_icode, l_internal_use, l_icode1, l_icode2, l_imessage, l_int_note, l_item_id, l_itype, l_invda, l_intnote, l_location, l_lyrcirc, l_message, l_opacmsg, l_price, l_status, l_tot_chkout, l_tot_renew, l_volume, l_ytdcirc, egid, x_call_number) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


--
-- Data for Name: volumes; Type: TABLE DATA; Schema: m_kcls_items2; Owner: evergreen
--

COPY volumes (l_item_id, l_volume) FROM stdin;
\.


SET search_path = m_kcls_items3, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_legacy; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY asset_copy_legacy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_item_seq, l_barcode, l_call_num, l_copy_num, l_created, l_updated, l_icode, l_internal_use, l_icode1, l_icode2, l_imessage, l_int_note, l_item_id, l_itype, l_invda, l_intnote, l_location, l_lyrcirc, l_message, l_opacmsg, l_price, l_status, l_tot_chkout, l_tot_renew, l_volume, l_ytdcirc, l_toss, egid, x_call_number) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_items3; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_items3; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_items3; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_items3; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: calls; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY calls (l_item_id, l_call_num) FROM stdin;
\.


--
-- Data for Name: cn_to_del; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY cn_to_del (id) FROM stdin;
\.


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: copy_dupe_barcodes; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY copy_dupe_barcodes (barcode, to_fix) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: item_exceptions; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY item_exceptions (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_item_seq, l_barcode, l_call_num, l_copy_num, l_created, l_updated, l_icode, l_internal_use, l_icode1, l_icode2, l_imessage, l_int_note, l_item_id, l_itype, l_invda, l_intnote, l_location, l_lyrcirc, l_message, l_opacmsg, l_price, l_status, l_tot_chkout, l_tot_renew, l_volume, l_ytdcirc, l_toss, egid, x_call_number) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_items3; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = m_kcls_ord, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_ord; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_ord; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_ord; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_ord; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: item_exceptions; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY item_exceptions (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_call_no, l_title, l_ord_type, l_ord_status, l_cdate, l_odate, l_rdate, l_location, egid) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: on_order_items; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY on_order_items (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_call_no, l_title, l_ord_type, l_ord_status, l_cdate, l_odate, l_rdate, l_location, l_price, egid) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_ord; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = m_kcls_ord2, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_ord2; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_ord2; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_ord2; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_ord2; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: on_order_items; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY on_order_items (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_call_no, l_title, l_ord_type, l_ord_status, l_cdate, l_odate, l_rdate, l_location, l_price, egid) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_ord2; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = m_kcls_ord3, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_ord3; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_ord3; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_ord3; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_kcls_ord3; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: on_order_items; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY on_order_items (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost, l_iii_bib_id, l_call_no, l_title, l_ord_type, l_ord_status, l_cdate, l_odate, l_rdate, l_location, l_price, egid) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_kcls_ord3; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = m_kcls_xfr, pg_catalog;

--
-- Data for Name: billing_type; Type: TABLE DATA; Schema: m_kcls_xfr; Owner: evergreen
--

COPY billing_type (id, name, owner, default_price) FROM stdin;
\.


--
-- Data for Name: circ_modifier; Type: TABLE DATA; Schema: m_kcls_xfr; Owner: evergreen
--

COPY circ_modifier (code, name, description, sip2_media_type, magnetic_media, avg_wait_time) FROM stdin;
\.


--
-- Data for Name: grp_change; Type: TABLE DATA; Schema: m_kcls_xfr; Owner: evergreen
--

COPY grp_change (from_name, to_name, from_id, to_id) FROM stdin;
\.


--
-- Data for Name: grp_tree; Type: TABLE DATA; Schema: m_kcls_xfr; Owner: evergreen
--

COPY grp_tree (id, name, parent, usergroup, perm_interval, description, application_perm) FROM stdin;
\.


--
-- Data for Name: org_unit; Type: TABLE DATA; Schema: m_kcls_xfr; Owner: evergreen
--

COPY org_unit (id, parent_ou, ou_type, ill_address, holds_address, mailing_address, billing_address, shortname, name, email, phone, opac_visible, fiscal_calendar) FROM stdin;
\.


--
-- Data for Name: org_unit_type; Type: TABLE DATA; Schema: m_kcls_xfr; Owner: evergreen
--

COPY org_unit_type (id, name, opac_label, depth, parent, can_have_vols, can_have_users) FROM stdin;
\.


SET search_path = m_test, pg_catalog;

--
-- Data for Name: action_circulation; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY action_circulation (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ) FROM stdin;
\.


--
-- Data for Name: action_hold_notification; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY action_hold_notification (id, hold, notify_staff, notify_time, method, note) FROM stdin;
\.


--
-- Data for Name: action_hold_request; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY action_hold_request (id, request_time, capture_time, fulfillment_time, checkin_time, return_time, prev_check_time, expire_time, cancel_time, cancel_cause, cancel_note, target, current_copy, fulfillment_staff, fulfillment_lib, request_lib, requestor, usr, selection_ou, selection_depth, pickup_lib, hold_type, holdable_formats, phone_notify, email_notify, frozen, thaw_date, shelf_time, cut_in_line, mint_condition, shelf_expire_time) FROM stdin;
\.


--
-- Data for Name: actor_card; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY actor_card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY actor_stat_cat (id, owner, name, opac_visible, usr_summary) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY actor_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: actor_stat_cat_entry_usr_map; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY actor_stat_cat_entry_usr_map (id, stat_cat_entry, stat_cat, target_usr) FROM stdin;
\.


--
-- Data for Name: actor_usr; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY actor_usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: actor_usr_address; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY actor_usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: actor_usr_note; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY actor_usr_note (id, usr, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_call_number; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY asset_call_number (id, creator, create_date, editor, edit_date, record, owning_lib, label, deleted, label_class, label_sortkey) FROM stdin;
\.


--
-- Data for Name: asset_copy; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY asset_copy (id, circ_lib, creator, call_number, editor, create_date, edit_date, copy_number, status, location, loan_duration, fine_level, age_protect, circulate, deposit, ref, holdable, deposit_amount, price, barcode, circ_modifier, circ_as_type, dummy_title, dummy_author, alert_message, opac_visible, deleted, floating, dummy_isbn, status_changed_time, mint_condition, cost) FROM stdin;
\.


--
-- Data for Name: asset_copy_location; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY asset_copy_location (id, name, owning_lib, holdable, hold_verify, opac_visible, circulate, label_prefix, label_suffix) FROM stdin;
\.


--
-- Data for Name: asset_copy_note; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY asset_copy_note (id, owning_copy, creator, create_date, pub, title, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY asset_stat_cat (id, owner, opac_visible, name, required) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY asset_stat_cat_entry (id, stat_cat, owner, value) FROM stdin;
\.


--
-- Data for Name: asset_stat_cat_entry_copy_map; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY asset_stat_cat_entry_copy_map (id, stat_cat, stat_cat_entry, owning_copy) FROM stdin;
\.


--
-- Data for Name: base_circ_field_map; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY base_circ_field_map (id, circulate, loan_period, max_renewals, max_out, fine_amount, fine_interval, max_fine, item_field1, item_value1, item_field2, item_value2, patron_field1, patron_value1, patron_field2, patron_value2) FROM stdin;
\.


--
-- Name: base_circ_field_map_id_seq; Type: SEQUENCE SET; Schema: m_test; Owner: evergreen
--

SELECT pg_catalog.setval('base_circ_field_map_id_seq', 1, false);


--
-- Data for Name: base_copy_location_map; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY base_copy_location_map (id, location, holdable, hold_verify, opac_visible, circulate, transcribed_location, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_copy_location_map_id_seq; Type: SEQUENCE SET; Schema: m_test; Owner: evergreen
--

SELECT pg_catalog.setval('base_copy_location_map_id_seq', 1, false);


--
-- Data for Name: base_item_dynamic_field_map; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY base_item_dynamic_field_map (id, evergreen_field, evergreen_value, evergreen_datatype, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_item_dynamic_field_map_id_seq; Type: SEQUENCE SET; Schema: m_test; Owner: evergreen
--

SELECT pg_catalog.setval('base_item_dynamic_field_map_id_seq', 1, false);


--
-- Data for Name: base_profile_map; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY base_profile_map (id, perm_grp_id, transcribed_perm_group, legacy_field1, legacy_value1, legacy_field2, legacy_value2, legacy_field3, legacy_value3) FROM stdin;
\.


--
-- Name: base_profile_map_id_seq; Type: SEQUENCE SET; Schema: m_test; Owner: evergreen
--

SELECT pg_catalog.setval('base_profile_map_id_seq', 1, false);


--
-- Data for Name: circhist; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY circhist (id, usr, xact_start, xact_finish, unrecovered, target_copy, circ_lib, circ_staff, checkin_staff, checkin_lib, renewal_remaining, due_date, stop_fines_time, checkin_time, create_time, duration, fine_interval, recurring_fine, max_fine, phone_renewal, desk_renewal, opac_renewal, duration_rule, recurring_fine_rule, max_fine_rule, stop_fines, workstation, checkin_workstation, checkin_scan_time, parent_circ, l_patron_id, l_bib_num, l_item_num, l_checkout) FROM stdin;
\.


--
-- Data for Name: config; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY config (key, value) FROM stdin;
\.


--
-- Data for Name: fields_requiring_mapping; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY fields_requiring_mapping (table_schema, table_name, column_name, data_type) FROM stdin;
\.


--
-- Data for Name: money_billing; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY money_billing (id, xact, billing_ts, voided, voider, void_time, amount, billing_type, btype, note) FROM stdin;
\.


--
-- Data for Name: money_cash_payment; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY money_cash_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr, cash_drawer) FROM stdin;
\.


--
-- Data for Name: money_forgive_payment; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY money_forgive_payment (id, xact, payment_ts, voided, amount, note, amount_collected, accepting_usr) FROM stdin;
\.


--
-- Data for Name: money_grocery; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY money_grocery (id, usr, xact_start, xact_finish, unrecovered, billing_location, note) FROM stdin;
\.


--
-- Data for Name: sql_current; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY sql_current (sql) FROM stdin;
\.


--
-- Data for Name: sql_log; Type: TABLE DATA; Schema: m_test; Owner: evergreen
--

COPY sql_log ("time", row_count, sql) FROM stdin;
\.


SET search_path = migration_tools, pg_catalog;

--
-- Data for Name: db_object_stash; Type: TABLE DATA; Schema: migration_tools; Owner: evergreen
--

COPY db_object_stash (schema_name, table_name, object_name, object_type, restore_command) FROM stdin;
\.


SET search_path = prod_staff_users, pg_catalog;

--
-- Data for Name: card; Type: TABLE DATA; Schema: prod_staff_users; Owner: evergreen
--

COPY card (id, usr, barcode, active) FROM stdin;
\.


--
-- Data for Name: save_source; Type: TABLE DATA; Schema: prod_staff_users; Owner: evergreen
--

COPY save_source (barcode, usrname, fname, lname, passwd) FROM stdin;
\.


--
-- Data for Name: save_these; Type: TABLE DATA; Schema: prod_staff_users; Owner: evergreen
--

COPY save_these (id) FROM stdin;
\.


--
-- Data for Name: usr; Type: TABLE DATA; Schema: prod_staff_users; Owner: evergreen
--

COPY usr (id, card, profile, usrname, email, passwd, standing, ident_type, ident_value, ident_type2, ident_value2, net_access_level, photo_url, prefix, first_given_name, second_given_name, family_name, suffix, alias, day_phone, evening_phone, other_phone, mailing_address, billing_address, home_ou, dob, active, master_account, super_user, barred, deleted, juvenile, usrgroup, claims_returned_count, credit_forward_balance, last_xact_id, alert_message, create_date, expire_date, claims_never_checked_out_count) FROM stdin;
\.


--
-- Data for Name: usr_address; Type: TABLE DATA; Schema: prod_staff_users; Owner: evergreen
--

COPY usr_address (id, valid, within_city_limits, address_type, usr, street1, street2, city, county, state, country, post_code, pending, replaces) FROM stdin;
\.


--
-- Data for Name: usr_perm_map; Type: TABLE DATA; Schema: prod_staff_users; Owner: evergreen
--

COPY usr_perm_map (id, usr, perm, depth, grantable) FROM stdin;
\.


--
-- Data for Name: usr_setting; Type: TABLE DATA; Schema: prod_staff_users; Owner: evergreen
--

COPY usr_setting (id, usr, name, value) FROM stdin;
\.


--
-- Data for Name: usr_work_ou_map; Type: TABLE DATA; Schema: prod_staff_users; Owner: evergreen
--

COPY usr_work_ou_map (id, usr, work_ou) FROM stdin;
\.


SET search_path = sip_temp, pg_catalog;

--
-- Data for Name: user; Type: TABLE DATA; Schema: sip_temp; Owner: evergreen
--

COPY "user" (usrname, passwd, org_unit) FROM stdin;
\.


SET search_path = m_enum, pg_catalog;

--
-- Name: bib_map_egid_key; Type: CONSTRAINT; Schema: m_enum; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY bib_map
    ADD CONSTRAINT bib_map_egid_key UNIQUE (egid);


--
-- Name: bib_map_item_eg_id_key; Type: CONSTRAINT; Schema: m_enum; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY bib_map
    ADD CONSTRAINT bib_map_item_eg_id_key UNIQUE (item_eg_id);


--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_enum; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


--
-- Name: org_map_l_library_key; Type: CONSTRAINT; Schema: m_enum; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY org_map
    ADD CONSTRAINT org_map_l_library_key UNIQUE (l_library);


SET search_path = m_kcls, pg_catalog;

--
-- Name: bibs_to_fix_pkey; Type: CONSTRAINT; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY bibs_to_fix
    ADD CONSTRAINT bibs_to_fix_pkey PRIMARY KEY (seq);


--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls2, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls3, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_call_fix, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_circhist, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_gap, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_holds, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_holdsall, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_holdsall2, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_holdsall3, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_holdsfix, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_items2, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_items3, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_ord, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_ord2, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_kcls_ord3, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = m_test, pg_catalog;

--
-- Name: config_key_key; Type: CONSTRAINT; Schema: m_test; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_key_key UNIQUE (key);


SET search_path = prod_staff_users, pg_catalog;

--
-- Name: address_pk; Type: CONSTRAINT; Schema: prod_staff_users; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY usr_address
    ADD CONSTRAINT address_pk PRIMARY KEY (id);


--
-- Name: card_pkey; Type: CONSTRAINT; Schema: prod_staff_users; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY card
    ADD CONSTRAINT card_pkey PRIMARY KEY (id);


--
-- Name: usr_pkey; Type: CONSTRAINT; Schema: prod_staff_users; Owner: evergreen; Tablespace: 
--

ALTER TABLE ONLY usr
    ADD CONSTRAINT usr_pkey PRIMARY KEY (id);


SET search_path = esi, pg_catalog;

--
-- Name: esi_phasefx16756_xacts_id; Type: INDEX; Schema: esi; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX esi_phasefx16756_xacts_id ON phasefx16756_xacts USING btree (id);


SET search_path = esi_14812, pg_catalog;

--
-- Name: fw_item_idx; Type: INDEX; Schema: esi_14812; Owner: evergreen; Tablespace: 
--

CREATE INDEX fw_item_idx ON fw_items USING btree (item_id);


--
-- Name: nw_item_idx; Type: INDEX; Schema: esi_14812; Owner: evergreen; Tablespace: 
--

CREATE INDEX nw_item_idx ON nw_items_changed USING btree (id);


--
-- Name: rn_dvd_idx; Type: INDEX; Schema: esi_14812; Owner: evergreen; Tablespace: 
--

CREATE INDEX rn_dvd_idx ON rn_dvds USING btree (id);


--
-- Name: rn_item_idx; Type: INDEX; Schema: esi_14812; Owner: evergreen; Tablespace: 
--

CREATE INDEX rn_item_idx ON rn_missing_items USING btree (item_id);


SET search_path = m_enum, pg_catalog;

--
-- Name: m_enum_base_copy_location_lf1_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_enum_base_copy_location_lf2_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_enum_base_copy_location_lf3_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_enum_base_copy_location_loc_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_enum_callnum_label_once_per_lib; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_enum_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_enum_callnum_record_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_enum_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_enum_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_enum_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_enum_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_enum_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_enum_copy_barcode_key; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_enum_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_enum_copy_id_key; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_enum_copy_id_key ON asset_copy USING btree (id);


--
-- Name: m_enum_home_location_lf1_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_home_location_lf1_idx ON home_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_enum_home_location_lf2_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_home_location_lf2_idx ON home_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_enum_home_location_lf3_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_home_location_lf3_idx ON home_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_enum_home_location_loc_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_home_location_loc_idx ON home_location_map USING btree (transcribed_location);


--
-- Name: m_enum_item_dynamic_lf1_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_enum_item_dynamic_lf2_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_enum_item_dynamic_lf3_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_enum_item_key_barcode_map_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_item_key_barcode_map_idx ON item_key_barcode_map USING btree (key1, key2, key3);


--
-- Name: m_enum_patron_barcode_key; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_enum_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_enum_patron_usrname_key; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_enum_patron_usrname_key ON actor_usr USING btree (usrname);


--
-- Name: m_enum_unicorn_item_dynamic_lf1_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_unicorn_item_dynamic_lf1_idx ON item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_enum_unicorn_item_dynamic_lf2_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_unicorn_item_dynamic_lf2_idx ON item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_enum_unicorn_item_dynamic_lf3_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_unicorn_item_dynamic_lf3_idx ON item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_enum_user_key_barcode_map_idx; Type: INDEX; Schema: m_enum; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_enum_user_key_barcode_map_idx ON user_key_barcode_map USING btree (key);


SET search_path = m_kcls, pg_catalog;

--
-- Name: copy_id_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX copy_id_idx ON best_avail_copies USING btree (copy_id);


--
-- Name: egid_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX egid_idx ON old2new USING btree (egid);


--
-- Name: gmc_idx1; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX gmc_idx1 ON vols_to_delete USING btree (volume_id);


--
-- Name: hold_id_ix; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX hold_id_ix ON best_avail_copies USING btree (hold_id);


--
-- Name: iii_bib_id1; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_bib_id1 ON asset_copy_legacy USING btree (l_iii_bib_id);


--
-- Name: iii_bib_id2; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_bib_id2 ON asset_copy_legacy USING btree (l_iii_bib_id, l_item_seq);


--
-- Name: iii_bib_id_old2new; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_bib_id_old2new ON old2new USING btree (l_iii_bib_id);


--
-- Name: iii_item_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_item_idx ON asset_copy_legacy USING btree (l_item_id);


--
-- Name: iii_patron_id; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_patron_id ON actor_usr_legacy USING btree (l_patron_id);


--
-- Name: iii_patron_id_3; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_patron_id_3 ON patron_addr USING btree (l_patron_id);


--
-- Name: iii_patron_id_4; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_patron_id_4 ON patron_addr_compressed USING btree (l_patron_id);


--
-- Name: job_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX job_idx ON km_move USING btree (job);


--
-- Name: l_icode2; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_icode2 ON asset_copy_legacy USING btree (l_icode2);


--
-- Name: l_itype; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_itype ON asset_copy_legacy USING btree (l_itype);


--
-- Name: l_location; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_location ON asset_copy_legacy USING btree (l_location);


--
-- Name: m_kcls_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_callnum_record_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_copy_barcode_key; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_patron_barcode_key; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_patron_usrname_key; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_patron_usrname_key ON actor_usr USING btree (usrname);


--
-- Name: x_bib_id; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX x_bib_id ON bookbag_entry USING btree (l_bib_id);


--
-- Name: x_date; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX x_date ON action_circulation_legacy USING btree (x_date);


--
-- Name: x_patron_id; Type: INDEX; Schema: m_kcls; Owner: evergreen; Tablespace: 
--

CREATE INDEX x_patron_id ON bookbag USING btree (x_patron_id);


SET search_path = m_kcls2, pg_catalog;

--
-- Name: id2; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX id2 ON old2new USING btree (l_iii_bib_id);


--
-- Name: id4; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX id4 ON asset_copy_legacy USING btree (substr(l_item_id, 1, 9));


--
-- Name: idx7; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX idx7 ON action_circulation_legacy USING btree ((ARRAY[(usr)::bigint, target_copy, x_date]));


--
-- Name: iii_bib_id1; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_bib_id1 ON asset_copy_legacy USING btree (l_iii_bib_id);


--
-- Name: iii_bib_id2; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_bib_id2 ON asset_copy_legacy USING btree (l_iii_bib_id, l_item_seq);


--
-- Name: iii_patron_id; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_patron_id ON actor_usr_legacy USING btree (l_patron_id);


--
-- Name: iii_patron_id_2; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_patron_id_2 ON patron_note USING btree (l_patron_id);


--
-- Name: iii_patron_id_3; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_patron_id_3 ON patron_addr USING btree (l_patron_id);


--
-- Name: iii_patron_id_4; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_patron_id_4 ON patron_addr_compressed USING btree (l_patron_id);


--
-- Name: l_icode2; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_icode2 ON asset_copy_legacy USING btree (l_icode2);


--
-- Name: l_itype; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_itype ON asset_copy_legacy USING btree (l_itype);


--
-- Name: l_location; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_location ON asset_copy_legacy USING btree (l_location);


--
-- Name: m_kcls2_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls2_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls2_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls2_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls2_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls2_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls2_callnum_record_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls2_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls2_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls2_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls2_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls2_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls2_copy_barcode_key; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls2_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls2_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls2_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls2_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls2_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls2_patron_barcode_key; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls2_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls2_patron_usrname_key; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls2_patron_usrname_key ON actor_usr USING btree (usrname);


--
-- Name: x_bib_id; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX x_bib_id ON bookbag_entry USING btree (l_bib_id);


--
-- Name: x_patron_id; Type: INDEX; Schema: m_kcls2; Owner: evergreen; Tablespace: 
--

CREATE INDEX x_patron_id ON bookbag USING btree (x_patron_id);


SET search_path = m_kcls3, pg_catalog;

--
-- Name: m_kcls3_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls3_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls3_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls3_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls3_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls3_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls3_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls3_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls3_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls3_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls3_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls3_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls3_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls3_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls3_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls3_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls3_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls3_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls3_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls3_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls3_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls3_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


SET search_path = m_kcls_call_fix, pg_catalog;

--
-- Name: copy_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX copy_idx ON item_calls USING btree (copy_id);


--
-- Name: m_kcls_call_fix_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_call_fix_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_call_fix_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_call_fix_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_call_fix_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_call_fix_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_call_fix_callnum_record_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_call_fix_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_call_fix_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_call_fix_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_call_fix_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_call_fix_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_call_fix_copy_barcode_key; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_call_fix_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_call_fix_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_call_fix_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_call_fix_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_call_fix_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_call_fix_patron_barcode_key; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_call_fix_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_call_fix_patron_usrname_key; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_call_fix_patron_usrname_key ON actor_usr USING btree (usrname);


--
-- Name: orig_cn_idx; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX orig_cn_idx ON item_calls USING btree (orig_call_id);


--
-- Name: orig_cn_idx2; Type: INDEX; Schema: m_kcls_call_fix; Owner: evergreen; Tablespace: 
--

CREATE INDEX orig_cn_idx2 ON cn_with_one_item USING btree (orig_call_id);


SET search_path = m_kcls_circhist, pg_catalog;

--
-- Name: iid_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX iid_idx ON circhist USING btree (id, done);


--
-- Name: m_kcls_circhist_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_circhist_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_circhist_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_circhist_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_circhist_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_circhist_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_circhist_callnum_record_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_circhist_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_circhist_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_circhist_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_circhist_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_circhist_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_circhist_copy_barcode_key; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_circhist_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_circhist_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_circhist_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_circhist_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_circhist_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_circhist_patron_barcode_key; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_circhist_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_circhist_patron_usrname_key; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_circhist_patron_usrname_key ON actor_usr USING btree (usrname);


--
-- Name: x_date; Type: INDEX; Schema: m_kcls_circhist; Owner: evergreen; Tablespace: 
--

CREATE INDEX x_date ON circhist USING btree (x_date);


SET search_path = m_kcls_gap, pg_catalog;

--
-- Name: iii_bib_id1; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_bib_id1 ON asset_copy_legacy USING btree (l_iii_bib_id);


--
-- Name: iii_bib_id2; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_bib_id2 ON asset_copy_legacy USING btree (l_iii_bib_id, l_item_seq);


--
-- Name: iii_item_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_item_idx ON asset_copy_legacy USING btree (l_item_id);


--
-- Name: l_icode2; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_icode2 ON asset_copy_legacy USING btree (l_icode2);


--
-- Name: l_itype; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_itype ON asset_copy_legacy USING btree (l_itype);


--
-- Name: l_location; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_location ON asset_copy_legacy USING btree (l_location);


--
-- Name: m_kcls_gap_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_gap_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_gap_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_gap_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_gap_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_gap_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_gap_callnum_record_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_gap_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_gap_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_gap_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_gap_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_gap_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_gap_copy_barcode_key; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_gap_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_gap_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_gap_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_gap_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_gap_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_gap_patron_barcode_key; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_gap_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_gap_patron_usrname_key; Type: INDEX; Schema: m_kcls_gap; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_gap_patron_usrname_key ON actor_usr USING btree (usrname);


SET search_path = m_kcls_holds, pg_catalog;

--
-- Name: m_kcls_holds_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_holds_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_holds_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_holds_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_holds_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holds_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_holds_callnum_record_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_holds_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_holds_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_holds_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_holds_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_holds_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_holds_copy_barcode_key; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holds_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_holds_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_holds_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_holds_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holds_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_holds_patron_barcode_key; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holds_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_holds_patron_usrname_key; Type: INDEX; Schema: m_kcls_holds; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holds_patron_usrname_key ON actor_usr USING btree (usrname);


SET search_path = m_kcls_holdsall, pg_catalog;

--
-- Name: m_kcls_holdsall_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_holdsall_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_holdsall_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_holdsall_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_holdsall_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsall_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_holdsall_callnum_record_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_holdsall_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_holdsall_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_holdsall_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_holdsall_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_holdsall_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_holdsall_copy_barcode_key; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsall_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_holdsall_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_holdsall_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_holdsall_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_holdsall_patron_barcode_key; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsall_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_holdsall_patron_usrname_key; Type: INDEX; Schema: m_kcls_holdsall; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsall_patron_usrname_key ON actor_usr USING btree (usrname);


SET search_path = m_kcls_holdsall2, pg_catalog;

--
-- Name: m_kcls_holdsall2_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_holdsall2_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_holdsall2_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_holdsall2_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_holdsall2_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsall2_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_holdsall2_callnum_record_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_holdsall2_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_holdsall2_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_holdsall2_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_holdsall2_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_holdsall2_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_holdsall2_copy_barcode_key; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsall2_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_holdsall2_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_holdsall2_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_holdsall2_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall2_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_holdsall2_patron_barcode_key; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsall2_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_holdsall2_patron_usrname_key; Type: INDEX; Schema: m_kcls_holdsall2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsall2_patron_usrname_key ON actor_usr USING btree (usrname);


SET search_path = m_kcls_holdsall3, pg_catalog;

--
-- Name: m_kcls_holdsall3_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_holdsall3_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_holdsall3_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_holdsall3_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_holdsall3_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsall3_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_holdsall3_callnum_record_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_holdsall3_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_holdsall3_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_holdsall3_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_holdsall3_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_holdsall3_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_holdsall3_copy_barcode_key; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsall3_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_holdsall3_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_holdsall3_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_holdsall3_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsall3_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_holdsall3_patron_barcode_key; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsall3_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_holdsall3_patron_usrname_key; Type: INDEX; Schema: m_kcls_holdsall3; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsall3_patron_usrname_key ON actor_usr USING btree (usrname);


SET search_path = m_kcls_holdsfix, pg_catalog;

--
-- Name: hold_id; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX hold_id ON holds_to_delete USING btree (id);


--
-- Name: m_kcls_holdsfix_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_holdsfix_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_holdsfix_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_holdsfix_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_holdsfix_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsfix_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_holdsfix_callnum_record_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_holdsfix_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_holdsfix_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_holdsfix_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_holdsfix_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_holdsfix_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_holdsfix_copy_barcode_key; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsfix_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_holdsfix_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_holdsfix_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_holdsfix_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_holdsfix_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_holdsfix_patron_barcode_key; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsfix_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_holdsfix_patron_usrname_key; Type: INDEX; Schema: m_kcls_holdsfix; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_holdsfix_patron_usrname_key ON actor_usr USING btree (usrname);


SET search_path = m_kcls_items2, pg_catalog;

--
-- Name: iii_bib_id1; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_bib_id1 ON asset_copy_legacy USING btree (l_iii_bib_id);


--
-- Name: iii_item_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_item_idx ON asset_copy_legacy USING btree (l_item_id);


--
-- Name: l_icode2; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_icode2 ON asset_copy_legacy USING btree (l_icode2);


--
-- Name: l_itype; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_itype ON asset_copy_legacy USING btree (l_itype);


--
-- Name: l_location; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_location ON asset_copy_legacy USING btree (l_location);


--
-- Name: m_kcls_items2_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_items2_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_items2_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_items2_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_items2_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_items2_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_items2_callnum_record_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_items2_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_items2_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_items2_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_items2_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_items2_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_items2_copy_barcode_key; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_items2_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_items2_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_items2_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_items2_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items2_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_items2_patron_barcode_key; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_items2_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_items2_patron_usrname_key; Type: INDEX; Schema: m_kcls_items2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_items2_patron_usrname_key ON actor_usr USING btree (usrname);


SET search_path = m_kcls_items3, pg_catalog;

--
-- Name: iii_bib_id1; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_bib_id1 ON asset_copy_legacy USING btree (l_iii_bib_id);


--
-- Name: iii_item_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX iii_item_idx ON asset_copy_legacy USING btree (l_item_id);


--
-- Name: l_icode2; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_icode2 ON asset_copy_legacy USING btree (l_icode2);


--
-- Name: l_itype; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_itype ON asset_copy_legacy USING btree (l_itype);


--
-- Name: l_location; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX l_location ON asset_copy_legacy USING btree (l_location);


--
-- Name: m_kcls_items3_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_items3_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_items3_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_items3_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_items3_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_items3_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_items3_callnum_record_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_items3_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_items3_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_items3_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_items3_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_items3_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_items3_copy_barcode_key; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_items3_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_items3_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_items3_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_items3_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_items3_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_items3_patron_barcode_key; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_items3_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_items3_patron_usrname_key; Type: INDEX; Schema: m_kcls_items3; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_items3_patron_usrname_key ON actor_usr USING btree (usrname);


SET search_path = m_kcls_ord, pg_catalog;

--
-- Name: m_kcls_ord3_idx2; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_idx2 ON on_order_items USING btree (id);


--
-- Name: m_kcls_ord_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_ord_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_ord_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_ord_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_ord_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_ord_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_ord_callnum_record_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_ord_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_ord_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_ord_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_ord_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_ord_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_ord_copy_barcode_key; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_ord_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_ord_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_ord_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_ord_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_ord_patron_barcode_key; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_ord_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_ord_patron_usrname_key; Type: INDEX; Schema: m_kcls_ord; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_ord_patron_usrname_key ON actor_usr USING btree (usrname);


SET search_path = m_kcls_ord2, pg_catalog;

--
-- Name: m_kcls_ord2_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_ord2_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_ord2_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_ord2_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_ord2_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_ord2_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_ord2_callnum_record_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_ord2_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_ord2_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_ord2_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_ord2_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_ord2_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_ord2_copy_barcode_key; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_ord2_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_ord2_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_ord2_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_ord2_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord2_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_ord2_patron_barcode_key; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_ord2_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_ord2_patron_usrname_key; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_ord2_patron_usrname_key ON actor_usr USING btree (usrname);


--
-- Name: m_kcls_ord3_idx2; Type: INDEX; Schema: m_kcls_ord2; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_idx2 ON on_order_items USING btree (id);


SET search_path = m_kcls_ord3, pg_catalog;

--
-- Name: m_kcls_ord3_base_copy_location_lf1_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_ord3_base_copy_location_lf2_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_ord3_base_copy_location_lf3_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_ord3_base_copy_location_loc_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_kcls_ord3_callnum_label_once_per_lib; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_ord3_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_kcls_ord3_callnum_record_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_kcls_ord3_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_kcls_ord3_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_kcls_ord3_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_kcls_ord3_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_kcls_ord3_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_kcls_ord3_copy_barcode_key; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_ord3_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_kcls_ord3_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_idx ON asset_copy USING btree (id);


--
-- Name: m_kcls_ord3_idx2; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_idx2 ON on_order_items USING btree (id);


--
-- Name: m_kcls_ord3_item_dynamic_lf1_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_kcls_ord3_item_dynamic_lf2_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_kcls_ord3_item_dynamic_lf3_idx; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_kcls_ord3_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_kcls_ord3_patron_barcode_key; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_ord3_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_kcls_ord3_patron_usrname_key; Type: INDEX; Schema: m_kcls_ord3; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_kcls_ord3_patron_usrname_key ON actor_usr USING btree (usrname);


SET search_path = m_test, pg_catalog;

--
-- Name: m_test_base_copy_location_lf1_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_base_copy_location_lf1_idx ON base_copy_location_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_test_base_copy_location_lf2_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_base_copy_location_lf2_idx ON base_copy_location_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_test_base_copy_location_lf3_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_base_copy_location_lf3_idx ON base_copy_location_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_test_base_copy_location_loc_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_base_copy_location_loc_idx ON base_copy_location_map USING btree (transcribed_location);


--
-- Name: m_test_callnum_label_once_per_lib; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_test_callnum_label_once_per_lib ON asset_call_number USING btree (record, owning_lib, label);


--
-- Name: m_test_callnum_record_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_callnum_record_idx ON asset_call_number USING btree (record);


--
-- Name: m_test_callnum_upper_label_id_lib_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_callnum_upper_label_id_lib_idx ON asset_call_number USING btree (upper(label), id, owning_lib);


--
-- Name: m_test_circ_dynamic_lf1_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_circ_dynamic_lf1_idx ON base_circ_field_map USING btree (item_field1, item_value1);


--
-- Name: m_test_circ_dynamic_lf2_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_circ_dynamic_lf2_idx ON base_circ_field_map USING btree (item_field2, item_value2);


--
-- Name: m_test_circ_dynamic_lf3_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_circ_dynamic_lf3_idx ON base_circ_field_map USING btree (patron_field1, patron_value1);


--
-- Name: m_test_circ_dynamic_lf4_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_circ_dynamic_lf4_idx ON base_circ_field_map USING btree (patron_field2, patron_value2);


--
-- Name: m_test_copy_barcode_key; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_test_copy_barcode_key ON asset_copy USING btree (barcode);


--
-- Name: m_test_item_dynamic_lf1_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_item_dynamic_lf1_idx ON base_item_dynamic_field_map USING btree (legacy_field1, legacy_value1);


--
-- Name: m_test_item_dynamic_lf2_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_item_dynamic_lf2_idx ON base_item_dynamic_field_map USING btree (legacy_field2, legacy_value2);


--
-- Name: m_test_item_dynamic_lf3_idx; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE INDEX m_test_item_dynamic_lf3_idx ON base_item_dynamic_field_map USING btree (legacy_field3, legacy_value3);


--
-- Name: m_test_patron_barcode_key; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_test_patron_barcode_key ON actor_card USING btree (barcode);


--
-- Name: m_test_patron_usrname_key; Type: INDEX; Schema: m_test; Owner: evergreen; Tablespace: 
--

CREATE UNIQUE INDEX m_test_patron_usrname_key ON actor_usr USING btree (usrname);


SET search_path = prod_staff_users, pg_catalog;

--
-- Name: card_usr_fkey; Type: FK CONSTRAINT; Schema: prod_staff_users; Owner: evergreen
--

ALTER TABLE ONLY card
    ADD CONSTRAINT card_usr_fkey FOREIGN KEY (usr) REFERENCES usr(id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: usr_address_replaces_fkey; Type: FK CONSTRAINT; Schema: prod_staff_users; Owner: evergreen
--

ALTER TABLE ONLY usr_address
    ADD CONSTRAINT usr_address_replaces_fkey FOREIGN KEY (replaces) REFERENCES usr_address(id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: usr_address_usr_fkey; Type: FK CONSTRAINT; Schema: prod_staff_users; Owner: evergreen
--

ALTER TABLE ONLY usr_address
    ADD CONSTRAINT usr_address_usr_fkey FOREIGN KEY (usr) REFERENCES usr(id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: usr_billing_address_fkey; Type: FK CONSTRAINT; Schema: prod_staff_users; Owner: evergreen
--

ALTER TABLE ONLY usr
    ADD CONSTRAINT usr_billing_address_fkey FOREIGN KEY (billing_address) REFERENCES usr_address(id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: usr_card_fkey; Type: FK CONSTRAINT; Schema: prod_staff_users; Owner: evergreen
--

ALTER TABLE ONLY usr
    ADD CONSTRAINT usr_card_fkey FOREIGN KEY (card) REFERENCES card(id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: usr_mailing_address_fkey; Type: FK CONSTRAINT; Schema: prod_staff_users; Owner: evergreen
--

ALTER TABLE ONLY usr
    ADD CONSTRAINT usr_mailing_address_fkey FOREIGN KEY (mailing_address) REFERENCES usr_address(id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: usr_perm_map_usr_fkey; Type: FK CONSTRAINT; Schema: prod_staff_users; Owner: evergreen
--

ALTER TABLE ONLY usr_perm_map
    ADD CONSTRAINT usr_perm_map_usr_fkey FOREIGN KEY (usr) REFERENCES usr(id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: usr_setting_usr_fkey; Type: FK CONSTRAINT; Schema: prod_staff_users; Owner: evergreen
--

ALTER TABLE ONLY usr_setting
    ADD CONSTRAINT usr_setting_usr_fkey FOREIGN KEY (usr) REFERENCES usr(id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: usr_work_ou_map_usr_fkey; Type: FK CONSTRAINT; Schema: prod_staff_users; Owner: evergreen
--

ALTER TABLE ONLY usr_work_ou_map
    ADD CONSTRAINT usr_work_ou_map_usr_fkey FOREIGN KEY (usr) REFERENCES usr(id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: collectionhq; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA collectionhq FROM PUBLIC;
REVOKE ALL ON SCHEMA collectionhq FROM evergreen;
GRANT ALL ON SCHEMA collectionhq TO evergreen;
GRANT ALL ON SCHEMA collectionhq TO bbonner;


--
-- Name: envisionware; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA envisionware FROM PUBLIC;
REVOKE ALL ON SCHEMA envisionware FROM evergreen;
GRANT ALL ON SCHEMA envisionware TO evergreen;
GRANT USAGE ON SCHEMA envisionware TO bbonner;


--
-- Name: esi; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA esi FROM PUBLIC;
REVOKE ALL ON SCHEMA esi FROM evergreen;
GRANT ALL ON SCHEMA esi TO evergreen;
GRANT USAGE ON SCHEMA esi TO bbonner;


--
-- Name: esi_14812; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA esi_14812 FROM PUBLIC;
REVOKE ALL ON SCHEMA esi_14812 FROM evergreen;
GRANT ALL ON SCHEMA esi_14812 TO evergreen;
GRANT USAGE ON SCHEMA esi_14812 TO bbonner;


--
-- Name: m_kcls; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls FROM evergreen;
GRANT ALL ON SCHEMA m_kcls TO evergreen;
GRANT USAGE ON SCHEMA m_kcls TO bbonner;


--
-- Name: m_kcls2; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls2 FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls2 FROM evergreen;
GRANT ALL ON SCHEMA m_kcls2 TO evergreen;
GRANT USAGE ON SCHEMA m_kcls2 TO bbonner;


--
-- Name: m_kcls3; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls3 FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls3 FROM evergreen;
GRANT ALL ON SCHEMA m_kcls3 TO evergreen;
GRANT USAGE ON SCHEMA m_kcls3 TO bbonner;


--
-- Name: m_kcls_call_fix; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_call_fix FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_call_fix FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_call_fix TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_call_fix TO bbonner;


--
-- Name: m_kcls_circhist; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_circhist FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_circhist FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_circhist TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_circhist TO bbonner;


--
-- Name: m_kcls_gap; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_gap FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_gap FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_gap TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_gap TO bbonner;


--
-- Name: m_kcls_holds; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_holds FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_holds FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_holds TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_holds TO bbonner;


--
-- Name: m_kcls_holdsall; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_holdsall FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_holdsall FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_holdsall TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_holdsall TO bbonner;


--
-- Name: m_kcls_holdsall2; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_holdsall2 FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_holdsall2 FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_holdsall2 TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_holdsall2 TO bbonner;


--
-- Name: m_kcls_holdsall3; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_holdsall3 FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_holdsall3 FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_holdsall3 TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_holdsall3 TO bbonner;


--
-- Name: m_kcls_holdsfix; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_holdsfix FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_holdsfix FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_holdsfix TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_holdsfix TO bbonner;


--
-- Name: m_kcls_items2; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_items2 FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_items2 FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_items2 TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_items2 TO bbonner;


--
-- Name: m_kcls_items3; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_items3 FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_items3 FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_items3 TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_items3 TO bbonner;


--
-- Name: m_kcls_ord; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_ord FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_ord FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_ord TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_ord TO bbonner;


--
-- Name: m_kcls_ord2; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_ord2 FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_ord2 FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_ord2 TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_ord2 TO bbonner;


--
-- Name: m_kcls_ord3; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_ord3 FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_ord3 FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_ord3 TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_ord3 TO bbonner;


--
-- Name: m_kcls_xfr; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_kcls_xfr FROM PUBLIC;
REVOKE ALL ON SCHEMA m_kcls_xfr FROM evergreen;
GRANT ALL ON SCHEMA m_kcls_xfr TO evergreen;
GRANT USAGE ON SCHEMA m_kcls_xfr TO bbonner;


--
-- Name: m_test; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA m_test FROM PUBLIC;
REVOKE ALL ON SCHEMA m_test FROM evergreen;
GRANT ALL ON SCHEMA m_test TO evergreen;
GRANT USAGE ON SCHEMA m_test TO bbonner;


--
-- Name: migration_tools; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA migration_tools FROM PUBLIC;
REVOKE ALL ON SCHEMA migration_tools FROM evergreen;
GRANT ALL ON SCHEMA migration_tools TO evergreen;
GRANT USAGE ON SCHEMA migration_tools TO bbonner;


--
-- Name: prod_staff_users; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA prod_staff_users FROM PUBLIC;
REVOKE ALL ON SCHEMA prod_staff_users FROM evergreen;
GRANT ALL ON SCHEMA prod_staff_users TO evergreen;
GRANT USAGE ON SCHEMA prod_staff_users TO bbonner;


--
-- Name: sip_temp; Type: ACL; Schema: -; Owner: evergreen
--

REVOKE ALL ON SCHEMA sip_temp FROM PUBLIC;
REVOKE ALL ON SCHEMA sip_temp FROM evergreen;
GRANT ALL ON SCHEMA sip_temp TO evergreen;
GRANT USAGE ON SCHEMA sip_temp TO bbonner;


SET search_path = envisionware, pg_catalog;

--
-- Name: users_made_no_access; Type: ACL; Schema: envisionware; Owner: evergreen
--

REVOKE ALL ON TABLE users_made_no_access FROM PUBLIC;
REVOKE ALL ON TABLE users_made_no_access FROM evergreen;
GRANT ALL ON TABLE users_made_no_access TO evergreen;
GRANT ALL ON TABLE users_made_no_access TO bbonner;


SET search_path = esi, pg_catalog;

--
-- Name: backroom_items; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE backroom_items FROM PUBLIC;
REVOKE ALL ON TABLE backroom_items FROM evergreen;
GRANT ALL ON TABLE backroom_items TO evergreen;
GRANT SELECT ON TABLE backroom_items TO bbonner;


--
-- Name: cleanupvolumes2; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE cleanupvolumes2 FROM PUBLIC;
REVOKE ALL ON TABLE cleanupvolumes2 FROM evergreen;
GRANT ALL ON TABLE cleanupvolumes2 TO evergreen;
GRANT ALL ON TABLE cleanupvolumes2 TO bbonner;


--
-- Name: needsoverduephone; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE needsoverduephone FROM PUBLIC;
REVOKE ALL ON TABLE needsoverduephone FROM evergreen;
GRANT ALL ON TABLE needsoverduephone TO evergreen;
GRANT SELECT ON TABLE needsoverduephone TO bbonner;


--
-- Name: phasefx16756_xacts; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE phasefx16756_xacts FROM PUBLIC;
REVOKE ALL ON TABLE phasefx16756_xacts FROM evergreen;
GRANT ALL ON TABLE phasefx16756_xacts TO evergreen;
GRANT SELECT ON TABLE phasefx16756_xacts TO bbonner;


--
-- Name: saved_inactive_patron_cards; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE saved_inactive_patron_cards FROM PUBLIC;
REVOKE ALL ON TABLE saved_inactive_patron_cards FROM evergreen;
GRANT ALL ON TABLE saved_inactive_patron_cards TO evergreen;
GRANT ALL ON TABLE saved_inactive_patron_cards TO bbonner;


--
-- Name: steve092711oldholdnotices; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steve092711oldholdnotices FROM PUBLIC;
REVOKE ALL ON TABLE steve092711oldholdnotices FROM evergreen;
GRANT ALL ON TABLE steve092711oldholdnotices TO evergreen;
GRANT SELECT ON TABLE steve092711oldholdnotices TO bbonner;


--
-- Name: steve17090funddebit; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steve17090funddebit FROM PUBLIC;
REVOKE ALL ON TABLE steve17090funddebit FROM evergreen;
GRANT ALL ON TABLE steve17090funddebit TO evergreen;
GRANT SELECT ON TABLE steve17090funddebit TO bbonner;


--
-- Name: steve17090lineitems; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steve17090lineitems FROM PUBLIC;
REVOKE ALL ON TABLE steve17090lineitems FROM evergreen;
GRANT ALL ON TABLE steve17090lineitems TO evergreen;
GRANT SELECT ON TABLE steve17090lineitems TO bbonner;


--
-- Name: steve17090lineitemsdetails; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steve17090lineitemsdetails FROM PUBLIC;
REVOKE ALL ON TABLE steve17090lineitemsdetails FROM evergreen;
GRANT ALL ON TABLE steve17090lineitemsdetails TO evergreen;
GRANT SELECT ON TABLE steve17090lineitemsdetails TO bbonner;


--
-- Name: steve2371665holds; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steve2371665holds FROM PUBLIC;
REVOKE ALL ON TABLE steve2371665holds FROM evergreen;
GRANT ALL ON TABLE steve2371665holds TO evergreen;
GRANT SELECT ON TABLE steve2371665holds TO bbonner;


--
-- Name: steve2759532holds; Type: ACL; Schema: esi; Owner: postgres
--

REVOKE ALL ON TABLE steve2759532holds FROM PUBLIC;
REVOKE ALL ON TABLE steve2759532holds FROM postgres;
GRANT ALL ON TABLE steve2759532holds TO postgres;
GRANT SELECT ON TABLE steve2759532holds TO bbonner;


--
-- Name: steveaction_collector; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveaction_collector FROM PUBLIC;
REVOKE ALL ON TABLE steveaction_collector FROM evergreen;
GRANT ALL ON TABLE steveaction_collector TO evergreen;
GRANT SELECT ON TABLE steveaction_collector TO bbonner;


--
-- Name: steveaction_def; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveaction_def FROM PUBLIC;
REVOKE ALL ON TABLE steveaction_def FROM evergreen;
GRANT ALL ON TABLE steveaction_def TO evergreen;
GRANT SELECT ON TABLE steveaction_def TO bbonner;


--
-- Name: steveaction_environment; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveaction_environment FROM PUBLIC;
REVOKE ALL ON TABLE steveaction_environment FROM evergreen;
GRANT ALL ON TABLE steveaction_environment TO evergreen;
GRANT SELECT ON TABLE steveaction_environment TO bbonner;


--
-- Name: steveaction_hook; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveaction_hook FROM PUBLIC;
REVOKE ALL ON TABLE steveaction_hook FROM evergreen;
GRANT ALL ON TABLE steveaction_hook TO evergreen;
GRANT SELECT ON TABLE steveaction_hook TO bbonner;


--
-- Name: steveaction_params; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveaction_params FROM PUBLIC;
REVOKE ALL ON TABLE steveaction_params FROM evergreen;
GRANT ALL ON TABLE steveaction_params TO evergreen;
GRANT SELECT ON TABLE steveaction_params TO bbonner;


--
-- Name: steveaction_reactor; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveaction_reactor FROM PUBLIC;
REVOKE ALL ON TABLE steveaction_reactor FROM evergreen;
GRANT ALL ON TABLE steveaction_reactor TO evergreen;
GRANT SELECT ON TABLE steveaction_reactor TO bbonner;


--
-- Name: steveaction_validator; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveaction_validator FROM PUBLIC;
REVOKE ALL ON TABLE steveaction_validator FROM evergreen;
GRANT ALL ON TABLE steveaction_validator TO evergreen;
GRANT SELECT ON TABLE steveaction_validator TO bbonner;


--
-- Name: steveholdprintingorig; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveholdprintingorig FROM PUBLIC;
REVOKE ALL ON TABLE steveholdprintingorig FROM evergreen;
GRANT ALL ON TABLE steveholdprintingorig TO evergreen;
GRANT SELECT ON TABLE steveholdprintingorig TO bbonner;


--
-- Name: steveholdprintingorigtakeone; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveholdprintingorigtakeone FROM PUBLIC;
REVOKE ALL ON TABLE steveholdprintingorigtakeone FROM evergreen;
GRANT ALL ON TABLE steveholdprintingorigtakeone TO evergreen;
GRANT SELECT ON TABLE steveholdprintingorigtakeone TO bbonner;


--
-- Name: steveholdprintingorigtakethree; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveholdprintingorigtakethree FROM PUBLIC;
REVOKE ALL ON TABLE steveholdprintingorigtakethree FROM evergreen;
GRANT ALL ON TABLE steveholdprintingorigtakethree TO evergreen;
GRANT SELECT ON TABLE steveholdprintingorigtakethree TO bbonner;


--
-- Name: steveholdprintingorigtaketwo; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveholdprintingorigtaketwo FROM PUBLIC;
REVOKE ALL ON TABLE steveholdprintingorigtaketwo FROM evergreen;
GRANT ALL ON TABLE steveholdprintingorigtaketwo TO evergreen;
GRANT SELECT ON TABLE steveholdprintingorigtaketwo TO bbonner;


--
-- Name: steveholdprintingorigtesting; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveholdprintingorigtesting FROM PUBLIC;
REVOKE ALL ON TABLE steveholdprintingorigtesting FROM evergreen;
GRANT ALL ON TABLE steveholdprintingorigtesting TO evergreen;
GRANT SELECT ON TABLE steveholdprintingorigtesting TO bbonner;


--
-- Name: steveoverdueprintorig; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveoverdueprintorig FROM PUBLIC;
REVOKE ALL ON TABLE steveoverdueprintorig FROM evergreen;
GRANT ALL ON TABLE steveoverdueprintorig TO evergreen;
GRANT SELECT ON TABLE steveoverdueprintorig TO bbonner;


--
-- Name: steveoverdueprintorigtesting; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveoverdueprintorigtesting FROM PUBLIC;
REVOKE ALL ON TABLE steveoverdueprintorigtesting FROM evergreen;
GRANT ALL ON TABLE steveoverdueprintorigtesting TO evergreen;
GRANT SELECT ON TABLE steveoverdueprintorigtesting TO bbonner;


--
-- Name: stevepenalties14512; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE stevepenalties14512 FROM PUBLIC;
REVOKE ALL ON TABLE stevepenalties14512 FROM evergreen;
GRANT ALL ON TABLE stevepenalties14512 TO evergreen;
GRANT SELECT ON TABLE stevepenalties14512 TO bbonner;


--
-- Name: stevestandingorg14512; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE stevestandingorg14512 FROM PUBLIC;
REVOKE ALL ON TABLE stevestandingorg14512 FROM evergreen;
GRANT ALL ON TABLE stevestandingorg14512 TO evergreen;
GRANT SELECT ON TABLE stevestandingorg14512 TO bbonner;


--
-- Name: stevetestadd; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE stevetestadd FROM PUBLIC;
REVOKE ALL ON TABLE stevetestadd FROM evergreen;
GRANT ALL ON TABLE stevetestadd TO evergreen;
GRANT SELECT ON TABLE stevetestadd TO bbonner;


--
-- Name: stevetestsettings; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE stevetestsettings FROM PUBLIC;
REVOKE ALL ON TABLE stevetestsettings FROM evergreen;
GRANT ALL ON TABLE stevetestsettings TO evergreen;
GRANT SELECT ON TABLE stevetestsettings TO bbonner;


--
-- Name: stevetransitupdate; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE stevetransitupdate FROM PUBLIC;
REVOKE ALL ON TABLE stevetransitupdate FROM evergreen;
GRANT ALL ON TABLE stevetransitupdate TO evergreen;
GRANT SELECT ON TABLE stevetransitupdate TO bbonner;


--
-- Name: stevetransitupdate2; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE stevetransitupdate2 FROM PUBLIC;
REVOKE ALL ON TABLE stevetransitupdate2 FROM evergreen;
GRANT ALL ON TABLE stevetransitupdate2 TO evergreen;
GRANT SELECT ON TABLE stevetransitupdate2 TO bbonner;


--
-- Name: steveusrsettingbackup; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE steveusrsettingbackup FROM PUBLIC;
REVOKE ALL ON TABLE steveusrsettingbackup FROM evergreen;
GRANT ALL ON TABLE steveusrsettingbackup TO evergreen;
GRANT SELECT ON TABLE steveusrsettingbackup TO bbonner;


--
-- Name: templatestoconvert; Type: ACL; Schema: esi; Owner: evergreen
--

REVOKE ALL ON TABLE templatestoconvert FROM PUBLIC;
REVOKE ALL ON TABLE templatestoconvert FROM evergreen;
GRANT ALL ON TABLE templatestoconvert TO evergreen;
GRANT SELECT ON TABLE templatestoconvert TO bbonner;


SET search_path = esi_14812, pg_catalog;

--
-- Name: fw_items; Type: ACL; Schema: esi_14812; Owner: evergreen
--

REVOKE ALL ON TABLE fw_items FROM PUBLIC;
REVOKE ALL ON TABLE fw_items FROM evergreen;
GRANT ALL ON TABLE fw_items TO evergreen;
GRANT SELECT ON TABLE fw_items TO bbonner;


--
-- Name: nw_items_changed; Type: ACL; Schema: esi_14812; Owner: evergreen
--

REVOKE ALL ON TABLE nw_items_changed FROM PUBLIC;
REVOKE ALL ON TABLE nw_items_changed FROM evergreen;
GRANT ALL ON TABLE nw_items_changed TO evergreen;
GRANT SELECT ON TABLE nw_items_changed TO bbonner;


--
-- Name: rn_dvds; Type: ACL; Schema: esi_14812; Owner: evergreen
--

REVOKE ALL ON TABLE rn_dvds FROM PUBLIC;
REVOKE ALL ON TABLE rn_dvds FROM evergreen;
GRANT ALL ON TABLE rn_dvds TO evergreen;
GRANT SELECT ON TABLE rn_dvds TO bbonner;


--
-- Name: rn_missing_items; Type: ACL; Schema: esi_14812; Owner: evergreen
--

REVOKE ALL ON TABLE rn_missing_items FROM PUBLIC;
REVOKE ALL ON TABLE rn_missing_items FROM evergreen;
GRANT ALL ON TABLE rn_missing_items TO evergreen;
GRANT SELECT ON TABLE rn_missing_items TO bbonner;


SET search_path = m_kcls, pg_catalog;

--
-- Name: acq_provider_address_bkp; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE acq_provider_address_bkp FROM PUBLIC;
REVOKE ALL ON TABLE acq_provider_address_bkp FROM evergreen;
GRANT ALL ON TABLE acq_provider_address_bkp TO evergreen;
GRANT SELECT ON TABLE acq_provider_address_bkp TO bbonner;


--
-- Name: acq_provider_address_new; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE acq_provider_address_new FROM PUBLIC;
REVOKE ALL ON TABLE acq_provider_address_new FROM evergreen;
GRANT ALL ON TABLE acq_provider_address_new TO evergreen;
GRANT SELECT ON TABLE acq_provider_address_new TO bbonner;


--
-- Name: action_circulation; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_circulation_legacy; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation_legacy FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation_legacy FROM evergreen;
GRANT ALL ON TABLE action_circulation_legacy TO evergreen;
GRANT SELECT ON TABLE action_circulation_legacy TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: action_hold_request_legacy; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request_legacy FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request_legacy FROM evergreen;
GRANT ALL ON TABLE action_hold_request_legacy TO evergreen;
GRANT SELECT ON TABLE action_hold_request_legacy TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_dupe_barcodes; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE actor_dupe_barcodes FROM PUBLIC;
REVOKE ALL ON TABLE actor_dupe_barcodes FROM evergreen;
GRANT ALL ON TABLE actor_dupe_barcodes TO evergreen;
GRANT SELECT ON TABLE actor_dupe_barcodes TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_legacy; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_legacy FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_legacy FROM evergreen;
GRANT ALL ON TABLE actor_usr_legacy TO evergreen;
GRANT SELECT ON TABLE actor_usr_legacy TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: actor_usr_setting; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_setting FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_setting FROM evergreen;
GRANT ALL ON TABLE actor_usr_setting TO evergreen;
GRANT SELECT ON TABLE actor_usr_setting TO bbonner;


--
-- Name: actor_usr_standing_penalty; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_standing_penalty FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_standing_penalty FROM evergreen;
GRANT ALL ON TABLE actor_usr_standing_penalty TO evergreen;
GRANT SELECT ON TABLE actor_usr_standing_penalty TO bbonner;


--
-- Name: alert_messages; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE alert_messages FROM PUBLIC;
REVOKE ALL ON TABLE alert_messages FROM evergreen;
GRANT ALL ON TABLE alert_messages TO evergreen;
GRANT SELECT ON TABLE alert_messages TO bbonner;


--
-- Name: appropriations; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE appropriations FROM PUBLIC;
REVOKE ALL ON TABLE appropriations FROM evergreen;
GRANT ALL ON TABLE appropriations TO evergreen;
GRANT SELECT ON TABLE appropriations TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_legacy; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_legacy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_legacy FROM evergreen;
GRANT ALL ON TABLE asset_copy_legacy TO evergreen;
GRANT SELECT ON TABLE asset_copy_legacy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: auths_to_del; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE auths_to_del FROM PUBLIC;
REVOKE ALL ON TABLE auths_to_del FROM evergreen;
GRANT ALL ON TABLE auths_to_del TO evergreen;
GRANT SELECT ON TABLE auths_to_del TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: best_avail_copies; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE best_avail_copies FROM PUBLIC;
REVOKE ALL ON TABLE best_avail_copies FROM evergreen;
GRANT ALL ON TABLE best_avail_copies TO evergreen;
GRANT SELECT ON TABLE best_avail_copies TO bbonner;


--
-- Name: bibs_to_fix; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE bibs_to_fix FROM PUBLIC;
REVOKE ALL ON TABLE bibs_to_fix FROM evergreen;
GRANT ALL ON TABLE bibs_to_fix TO evergreen;
GRANT SELECT ON TABLE bibs_to_fix TO bbonner;


--
-- Name: bibs_to_fix_seq_seq; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON SEQUENCE bibs_to_fix_seq_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bibs_to_fix_seq_seq FROM evergreen;
GRANT ALL ON SEQUENCE bibs_to_fix_seq_seq TO evergreen;
GRANT USAGE ON SEQUENCE bibs_to_fix_seq_seq TO bbonner;


--
-- Name: bibs_with_938; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE bibs_with_938 FROM PUBLIC;
REVOKE ALL ON TABLE bibs_with_938 FROM evergreen;
GRANT ALL ON TABLE bibs_with_938 TO evergreen;
GRANT SELECT ON TABLE bibs_with_938 TO bbonner;


--
-- Name: bibs_with_938_id_seq; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON SEQUENCE bibs_with_938_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bibs_with_938_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE bibs_with_938_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE bibs_with_938_id_seq TO bbonner;


--
-- Name: bibs_with_crossed_d; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE bibs_with_crossed_d FROM PUBLIC;
REVOKE ALL ON TABLE bibs_with_crossed_d FROM evergreen;
GRANT ALL ON TABLE bibs_with_crossed_d TO evergreen;
GRANT SELECT ON TABLE bibs_with_crossed_d TO bbonner;


--
-- Name: container_biblio_record_entry_bucket; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE container_biblio_record_entry_bucket FROM PUBLIC;
REVOKE ALL ON TABLE container_biblio_record_entry_bucket FROM evergreen;
GRANT ALL ON TABLE container_biblio_record_entry_bucket TO evergreen;
GRANT SELECT ON TABLE container_biblio_record_entry_bucket TO bbonner;


--
-- Name: bookbag; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE bookbag FROM PUBLIC;
REVOKE ALL ON TABLE bookbag FROM evergreen;
GRANT ALL ON TABLE bookbag TO evergreen;
GRANT SELECT ON TABLE bookbag TO bbonner;


--
-- Name: container_biblio_record_entry_bucket_item; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE container_biblio_record_entry_bucket_item FROM PUBLIC;
REVOKE ALL ON TABLE container_biblio_record_entry_bucket_item FROM evergreen;
GRANT ALL ON TABLE container_biblio_record_entry_bucket_item TO evergreen;
GRANT SELECT ON TABLE container_biblio_record_entry_bucket_item TO bbonner;


--
-- Name: bookbag_entry; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE bookbag_entry FROM PUBLIC;
REVOKE ALL ON TABLE bookbag_entry FROM evergreen;
GRANT ALL ON TABLE bookbag_entry TO evergreen;
GRANT SELECT ON TABLE bookbag_entry TO bbonner;


--
-- Name: circ_rule_map; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE circ_rule_map FROM PUBLIC;
REVOKE ALL ON TABLE circ_rule_map FROM evergreen;
GRANT ALL ON TABLE circ_rule_map TO evergreen;
GRANT SELECT ON TABLE circ_rule_map TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: copy_dupe_barcodes; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE copy_dupe_barcodes FROM PUBLIC;
REVOKE ALL ON TABLE copy_dupe_barcodes FROM evergreen;
GRANT ALL ON TABLE copy_dupe_barcodes TO evergreen;
GRANT SELECT ON TABLE copy_dupe_barcodes TO bbonner;


--
-- Name: copy_dupe_barcodes2; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE copy_dupe_barcodes2 FROM PUBLIC;
REVOKE ALL ON TABLE copy_dupe_barcodes2 FROM evergreen;
GRANT ALL ON TABLE copy_dupe_barcodes2 TO evergreen;
GRANT SELECT ON TABLE copy_dupe_barcodes2 TO bbonner;


--
-- Name: cp_map; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE cp_map FROM PUBLIC;
REVOKE ALL ON TABLE cp_map FROM evergreen;
GRANT ALL ON TABLE cp_map TO evergreen;
GRANT SELECT ON TABLE cp_map TO bbonner;


--
-- Name: dist_formulas; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE dist_formulas FROM PUBLIC;
REVOKE ALL ON TABLE dist_formulas FROM evergreen;
GRANT ALL ON TABLE dist_formulas TO evergreen;
GRANT SELECT ON TABLE dist_formulas TO bbonner;


--
-- Name: dist_formulas2; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE dist_formulas2 FROM PUBLIC;
REVOKE ALL ON TABLE dist_formulas2 FROM evergreen;
GRANT ALL ON TABLE dist_formulas2 TO evergreen;
GRANT SELECT ON TABLE dist_formulas2 TO bbonner;


--
-- Name: dob_1900; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE dob_1900 FROM PUBLIC;
REVOKE ALL ON TABLE dob_1900 FROM evergreen;
GRANT ALL ON TABLE dob_1900 TO evergreen;
GRANT SELECT ON TABLE dob_1900 TO bbonner;


--
-- Name: eres_tcns; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE eres_tcns FROM PUBLIC;
REVOKE ALL ON TABLE eres_tcns FROM evergreen;
GRANT ALL ON TABLE eres_tcns TO evergreen;
GRANT SELECT ON TABLE eres_tcns TO bbonner;


--
-- Name: event_def_restore; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE event_def_restore FROM PUBLIC;
REVOKE ALL ON TABLE event_def_restore FROM evergreen;
GRANT ALL ON TABLE event_def_restore TO evergreen;
GRANT SELECT ON TABLE event_def_restore TO bbonner;


--
-- Name: event_def_restore2; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE event_def_restore2 FROM PUBLIC;
REVOKE ALL ON TABLE event_def_restore2 FROM evergreen;
GRANT ALL ON TABLE event_def_restore2 TO evergreen;
GRANT SELECT ON TABLE event_def_restore2 TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: fund_all; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE fund_all FROM PUBLIC;
REVOKE ALL ON TABLE fund_all FROM evergreen;
GRANT ALL ON TABLE fund_all TO evergreen;
GRANT SELECT ON TABLE fund_all TO bbonner;


--
-- Name: int_notes; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE int_notes FROM PUBLIC;
REVOKE ALL ON TABLE int_notes FROM evergreen;
GRANT ALL ON TABLE int_notes TO evergreen;
GRANT SELECT ON TABLE int_notes TO bbonner;


--
-- Name: item_exceptions; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE item_exceptions FROM PUBLIC;
REVOKE ALL ON TABLE item_exceptions FROM evergreen;
GRANT ALL ON TABLE item_exceptions TO evergreen;
GRANT SELECT ON TABLE item_exceptions TO bbonner;


--
-- Name: item_status_map; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE item_status_map FROM PUBLIC;
REVOKE ALL ON TABLE item_status_map FROM evergreen;
GRANT ALL ON TABLE item_status_map TO evergreen;
GRANT SELECT ON TABLE item_status_map TO bbonner;


--
-- Name: jan21_pos; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE jan21_pos FROM PUBLIC;
REVOKE ALL ON TABLE jan21_pos FROM evergreen;
GRANT ALL ON TABLE jan21_pos TO evergreen;
GRANT SELECT ON TABLE jan21_pos TO bbonner;


--
-- Name: km_move; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE km_move FROM PUBLIC;
REVOKE ALL ON TABLE km_move FROM evergreen;
GRANT ALL ON TABLE km_move TO evergreen;
GRANT SELECT ON TABLE km_move TO bbonner;


--
-- Name: km_move_job_seq; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON SEQUENCE km_move_job_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE km_move_job_seq FROM evergreen;
GRANT ALL ON SEQUENCE km_move_job_seq TO evergreen;
GRANT USAGE ON SEQUENCE km_move_job_seq TO bbonner;


--
-- Name: legacy_circ_count; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE legacy_circ_count FROM PUBLIC;
REVOKE ALL ON TABLE legacy_circ_count FROM evergreen;
GRANT ALL ON TABLE legacy_circ_count TO evergreen;
GRANT SELECT ON TABLE legacy_circ_count TO bbonner;


--
-- Name: locations; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE locations FROM PUBLIC;
REVOKE ALL ON TABLE locations FROM evergreen;
GRANT ALL ON TABLE locations TO evergreen;
GRANT SELECT ON TABLE locations TO bbonner;


--
-- Name: messages; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE messages FROM PUBLIC;
REVOKE ALL ON TABLE messages FROM evergreen;
GRANT ALL ON TABLE messages TO evergreen;
GRANT SELECT ON TABLE messages TO bbonner;


--
-- Name: metabib_field; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE metabib_field FROM PUBLIC;
REVOKE ALL ON TABLE metabib_field FROM evergreen;
GRANT ALL ON TABLE metabib_field TO evergreen;
GRANT SELECT ON TABLE metabib_field TO bbonner;


--
-- Name: metabib_field_index_norm_map; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE metabib_field_index_norm_map FROM PUBLIC;
REVOKE ALL ON TABLE metabib_field_index_norm_map FROM evergreen;
GRANT ALL ON TABLE metabib_field_index_norm_map TO evergreen;
GRANT SELECT ON TABLE metabib_field_index_norm_map TO bbonner;


--
-- Name: metabib_search_alias; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE metabib_search_alias FROM PUBLIC;
REVOKE ALL ON TABLE metabib_search_alias FROM evergreen;
GRANT ALL ON TABLE metabib_search_alias TO evergreen;
GRANT SELECT ON TABLE metabib_search_alias TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: money_grocery_legacy; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery_legacy FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery_legacy FROM evergreen;
GRANT ALL ON TABLE money_grocery_legacy TO evergreen;
GRANT SELECT ON TABLE money_grocery_legacy TO bbonner;


--
-- Name: netlibrary_bib_ids; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE netlibrary_bib_ids FROM PUBLIC;
REVOKE ALL ON TABLE netlibrary_bib_ids FROM evergreen;
GRANT ALL ON TABLE netlibrary_bib_ids TO evergreen;
GRANT SELECT ON TABLE netlibrary_bib_ids TO bbonner;


--
-- Name: old2new; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE old2new FROM PUBLIC;
REVOKE ALL ON TABLE old2new FROM evergreen;
GRANT ALL ON TABLE old2new TO evergreen;
GRANT SELECT ON TABLE old2new TO bbonner;


--
-- Name: orig_notice_setting; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE orig_notice_setting FROM PUBLIC;
REVOKE ALL ON TABLE orig_notice_setting FROM evergreen;
GRANT ALL ON TABLE orig_notice_setting TO evergreen;
GRANT SELECT ON TABLE orig_notice_setting TO bbonner;


--
-- Name: orig_relevance; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE orig_relevance FROM PUBLIC;
REVOKE ALL ON TABLE orig_relevance FROM evergreen;
GRANT ALL ON TABLE orig_relevance TO evergreen;
GRANT SELECT ON TABLE orig_relevance TO bbonner;


--
-- Name: ou_patrons; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE ou_patrons FROM PUBLIC;
REVOKE ALL ON TABLE ou_patrons FROM evergreen;
GRANT ALL ON TABLE ou_patrons TO evergreen;
GRANT SELECT ON TABLE ou_patrons TO bbonner;


--
-- Name: patron_addr; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE patron_addr FROM PUBLIC;
REVOKE ALL ON TABLE patron_addr FROM evergreen;
GRANT ALL ON TABLE patron_addr TO evergreen;
GRANT SELECT ON TABLE patron_addr TO bbonner;


--
-- Name: patron_addr_compressed; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE patron_addr_compressed FROM PUBLIC;
REVOKE ALL ON TABLE patron_addr_compressed FROM evergreen;
GRANT ALL ON TABLE patron_addr_compressed TO evergreen;
GRANT SELECT ON TABLE patron_addr_compressed TO bbonner;


--
-- Name: patron_extras; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE patron_extras FROM PUBLIC;
REVOKE ALL ON TABLE patron_extras FROM evergreen;
GRANT ALL ON TABLE patron_extras TO evergreen;
GRANT SELECT ON TABLE patron_extras TO bbonner;


--
-- Name: patron_note; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE patron_note FROM PUBLIC;
REVOKE ALL ON TABLE patron_note FROM evergreen;
GRANT ALL ON TABLE patron_note TO evergreen;
GRANT SELECT ON TABLE patron_note TO bbonner;


--
-- Name: patrons_with_history; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE patrons_with_history FROM PUBLIC;
REVOKE ALL ON TABLE patrons_with_history FROM evergreen;
GRANT ALL ON TABLE patrons_with_history TO evergreen;
GRANT SELECT ON TABLE patrons_with_history TO bbonner;


--
-- Name: pcode3_map; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE pcode3_map FROM PUBLIC;
REVOKE ALL ON TABLE pcode3_map FROM evergreen;
GRANT ALL ON TABLE pcode3_map TO evergreen;
GRANT SELECT ON TABLE pcode3_map TO bbonner;


--
-- Name: ptype_map; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE ptype_map FROM PUBLIC;
REVOKE ALL ON TABLE ptype_map FROM evergreen;
GRANT ALL ON TABLE ptype_map TO evergreen;
GRANT SELECT ON TABLE ptype_map TO bbonner;


--
-- Name: rejected_circs; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE rejected_circs FROM PUBLIC;
REVOKE ALL ON TABLE rejected_circs FROM evergreen;
GRANT ALL ON TABLE rejected_circs TO evergreen;
GRANT SELECT ON TABLE rejected_circs TO bbonner;


--
-- Name: rejected_holds; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE rejected_holds FROM PUBLIC;
REVOKE ALL ON TABLE rejected_holds FROM evergreen;
GRANT ALL ON TABLE rejected_holds TO evergreen;
GRANT SELECT ON TABLE rejected_holds TO bbonner;


--
-- Name: relevance_adjustment; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE relevance_adjustment FROM PUBLIC;
REVOKE ALL ON TABLE relevance_adjustment FROM evergreen;
GRANT ALL ON TABLE relevance_adjustment TO evergreen;
GRANT SELECT ON TABLE relevance_adjustment TO bbonner;


--
-- Name: sources; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE sources FROM PUBLIC;
REVOKE ALL ON TABLE sources FROM evergreen;
GRANT ALL ON TABLE sources TO evergreen;
GRANT SELECT ON TABLE sources TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


--
-- Name: summer_patrons_to_delete; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE summer_patrons_to_delete FROM PUBLIC;
REVOKE ALL ON TABLE summer_patrons_to_delete FROM evergreen;
GRANT ALL ON TABLE summer_patrons_to_delete TO evergreen;
GRANT SELECT ON TABLE summer_patrons_to_delete TO bbonner;


--
-- Name: usr_not_migrated_per_ptype; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE usr_not_migrated_per_ptype FROM PUBLIC;
REVOKE ALL ON TABLE usr_not_migrated_per_ptype FROM evergreen;
GRANT ALL ON TABLE usr_not_migrated_per_ptype TO evergreen;
GRANT SELECT ON TABLE usr_not_migrated_per_ptype TO bbonner;


--
-- Name: vols_to_delete; Type: ACL; Schema: m_kcls; Owner: evergreen
--

REVOKE ALL ON TABLE vols_to_delete FROM PUBLIC;
REVOKE ALL ON TABLE vols_to_delete FROM evergreen;
GRANT ALL ON TABLE vols_to_delete TO evergreen;
GRANT SELECT ON TABLE vols_to_delete TO bbonner;


SET search_path = m_kcls2, pg_catalog;

--
-- Name: acq_fund; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE acq_fund FROM PUBLIC;
REVOKE ALL ON TABLE acq_fund FROM evergreen;
GRANT ALL ON TABLE acq_fund TO evergreen;
GRANT SELECT ON TABLE acq_fund TO bbonner;


--
-- Name: acq_fund_legacy; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE acq_fund_legacy FROM PUBLIC;
REVOKE ALL ON TABLE acq_fund_legacy FROM evergreen;
GRANT ALL ON TABLE acq_fund_legacy TO evergreen;
GRANT SELECT ON TABLE acq_fund_legacy TO bbonner;


--
-- Name: acq_provider; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE acq_provider FROM PUBLIC;
REVOKE ALL ON TABLE acq_provider FROM evergreen;
GRANT ALL ON TABLE acq_provider TO evergreen;
GRANT SELECT ON TABLE acq_provider TO bbonner;


--
-- Name: acq_provider_address; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE acq_provider_address FROM PUBLIC;
REVOKE ALL ON TABLE acq_provider_address FROM evergreen;
GRANT ALL ON TABLE acq_provider_address TO evergreen;
GRANT SELECT ON TABLE acq_provider_address TO bbonner;


--
-- Name: acq_provider_address_legacy; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE acq_provider_address_legacy FROM PUBLIC;
REVOKE ALL ON TABLE acq_provider_address_legacy FROM evergreen;
GRANT ALL ON TABLE acq_provider_address_legacy TO evergreen;
GRANT SELECT ON TABLE acq_provider_address_legacy TO bbonner;


--
-- Name: acq_provider_contact; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE acq_provider_contact FROM PUBLIC;
REVOKE ALL ON TABLE acq_provider_contact FROM evergreen;
GRANT ALL ON TABLE acq_provider_contact TO evergreen;
GRANT SELECT ON TABLE acq_provider_contact TO bbonner;


--
-- Name: acq_provider_contact_address; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE acq_provider_contact_address FROM PUBLIC;
REVOKE ALL ON TABLE acq_provider_contact_address FROM evergreen;
GRANT ALL ON TABLE acq_provider_contact_address TO evergreen;
GRANT SELECT ON TABLE acq_provider_contact_address TO bbonner;


--
-- Name: acq_provider_contact_legacy; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE acq_provider_contact_legacy FROM PUBLIC;
REVOKE ALL ON TABLE acq_provider_contact_legacy FROM evergreen;
GRANT ALL ON TABLE acq_provider_contact_legacy TO evergreen;
GRANT SELECT ON TABLE acq_provider_contact_legacy TO bbonner;


--
-- Name: acq_provider_legacy; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE acq_provider_legacy FROM PUBLIC;
REVOKE ALL ON TABLE acq_provider_legacy FROM evergreen;
GRANT ALL ON TABLE acq_provider_legacy TO evergreen;
GRANT SELECT ON TABLE acq_provider_legacy TO bbonner;


--
-- Name: acq_provider_note; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE acq_provider_note FROM PUBLIC;
REVOKE ALL ON TABLE acq_provider_note FROM evergreen;
GRANT ALL ON TABLE acq_provider_note TO evergreen;
GRANT SELECT ON TABLE acq_provider_note TO bbonner;


--
-- Name: action_circulation; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_circulation_legacy; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation_legacy FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation_legacy FROM evergreen;
GRANT ALL ON TABLE action_circulation_legacy TO evergreen;
GRANT SELECT ON TABLE action_circulation_legacy TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: action_hold_request_legacy; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request_legacy FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request_legacy FROM evergreen;
GRANT ALL ON TABLE action_hold_request_legacy TO evergreen;
GRANT SELECT ON TABLE action_hold_request_legacy TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_dupe_barcodes; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_dupe_barcodes FROM PUBLIC;
REVOKE ALL ON TABLE actor_dupe_barcodes FROM evergreen;
GRANT ALL ON TABLE actor_dupe_barcodes TO evergreen;
GRANT SELECT ON TABLE actor_dupe_barcodes TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_legacy; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_legacy FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_legacy FROM evergreen;
GRANT ALL ON TABLE actor_usr_legacy TO evergreen;
GRANT SELECT ON TABLE actor_usr_legacy TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: actor_usr_setting; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_setting FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_setting FROM evergreen;
GRANT ALL ON TABLE actor_usr_setting TO evergreen;
GRANT SELECT ON TABLE actor_usr_setting TO bbonner;


--
-- Name: alert_messages; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE alert_messages FROM PUBLIC;
REVOKE ALL ON TABLE alert_messages FROM evergreen;
GRANT ALL ON TABLE alert_messages TO evergreen;
GRANT SELECT ON TABLE alert_messages TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_legacy; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_legacy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_legacy FROM evergreen;
GRANT ALL ON TABLE asset_copy_legacy TO evergreen;
GRANT SELECT ON TABLE asset_copy_legacy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_location_backup; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location_backup FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location_backup FROM evergreen;
GRANT ALL ON TABLE asset_copy_location_backup TO evergreen;
GRANT SELECT ON TABLE asset_copy_location_backup TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: container_biblio_record_entry_bucket; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE container_biblio_record_entry_bucket FROM PUBLIC;
REVOKE ALL ON TABLE container_biblio_record_entry_bucket FROM evergreen;
GRANT ALL ON TABLE container_biblio_record_entry_bucket TO evergreen;
GRANT SELECT ON TABLE container_biblio_record_entry_bucket TO bbonner;


--
-- Name: bookbag; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE bookbag FROM PUBLIC;
REVOKE ALL ON TABLE bookbag FROM evergreen;
GRANT ALL ON TABLE bookbag TO evergreen;
GRANT SELECT ON TABLE bookbag TO bbonner;


--
-- Name: container_biblio_record_entry_bucket_item; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE container_biblio_record_entry_bucket_item FROM PUBLIC;
REVOKE ALL ON TABLE container_biblio_record_entry_bucket_item FROM evergreen;
GRANT ALL ON TABLE container_biblio_record_entry_bucket_item TO evergreen;
GRANT SELECT ON TABLE container_biblio_record_entry_bucket_item TO bbonner;


--
-- Name: bookbag_entry; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE bookbag_entry FROM PUBLIC;
REVOKE ALL ON TABLE bookbag_entry FROM evergreen;
GRANT ALL ON TABLE bookbag_entry TO evergreen;
GRANT SELECT ON TABLE bookbag_entry TO bbonner;


--
-- Name: circ_rule_map; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE circ_rule_map FROM PUBLIC;
REVOKE ALL ON TABLE circ_rule_map FROM evergreen;
GRANT ALL ON TABLE circ_rule_map TO evergreen;
GRANT SELECT ON TABLE circ_rule_map TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: copy_dupe_barcodes; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE copy_dupe_barcodes FROM PUBLIC;
REVOKE ALL ON TABLE copy_dupe_barcodes FROM evergreen;
GRANT ALL ON TABLE copy_dupe_barcodes TO evergreen;
GRANT SELECT ON TABLE copy_dupe_barcodes TO bbonner;


--
-- Name: copy_name_map; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE copy_name_map FROM PUBLIC;
REVOKE ALL ON TABLE copy_name_map FROM evergreen;
GRANT ALL ON TABLE copy_name_map TO evergreen;
GRANT SELECT ON TABLE copy_name_map TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: int_notes; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE int_notes FROM PUBLIC;
REVOKE ALL ON TABLE int_notes FROM evergreen;
GRANT ALL ON TABLE int_notes TO evergreen;
GRANT SELECT ON TABLE int_notes TO bbonner;


--
-- Name: item_exceptions; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE item_exceptions FROM PUBLIC;
REVOKE ALL ON TABLE item_exceptions FROM evergreen;
GRANT ALL ON TABLE item_exceptions TO evergreen;
GRANT SELECT ON TABLE item_exceptions TO bbonner;


--
-- Name: item_status_map; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE item_status_map FROM PUBLIC;
REVOKE ALL ON TABLE item_status_map FROM evergreen;
GRANT ALL ON TABLE item_status_map TO evergreen;
GRANT SELECT ON TABLE item_status_map TO bbonner;


--
-- Name: messages; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE messages FROM PUBLIC;
REVOKE ALL ON TABLE messages FROM evergreen;
GRANT ALL ON TABLE messages TO evergreen;
GRANT SELECT ON TABLE messages TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: money_grocery_legacy; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery_legacy FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery_legacy FROM evergreen;
GRANT ALL ON TABLE money_grocery_legacy TO evergreen;
GRANT SELECT ON TABLE money_grocery_legacy TO bbonner;


--
-- Name: old2new; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE old2new FROM PUBLIC;
REVOKE ALL ON TABLE old2new FROM evergreen;
GRANT ALL ON TABLE old2new TO evergreen;
GRANT SELECT ON TABLE old2new TO bbonner;


--
-- Name: ou_map; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE ou_map FROM PUBLIC;
REVOKE ALL ON TABLE ou_map FROM evergreen;
GRANT ALL ON TABLE ou_map TO evergreen;
GRANT SELECT ON TABLE ou_map TO bbonner;


--
-- Name: patron_addr; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE patron_addr FROM PUBLIC;
REVOKE ALL ON TABLE patron_addr FROM evergreen;
GRANT ALL ON TABLE patron_addr TO evergreen;
GRANT SELECT ON TABLE patron_addr TO bbonner;


--
-- Name: patron_addr_compressed; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE patron_addr_compressed FROM PUBLIC;
REVOKE ALL ON TABLE patron_addr_compressed FROM evergreen;
GRANT ALL ON TABLE patron_addr_compressed TO evergreen;
GRANT SELECT ON TABLE patron_addr_compressed TO bbonner;


--
-- Name: patron_extras; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE patron_extras FROM PUBLIC;
REVOKE ALL ON TABLE patron_extras FROM evergreen;
GRANT ALL ON TABLE patron_extras TO evergreen;
GRANT SELECT ON TABLE patron_extras TO bbonner;


--
-- Name: patron_note; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE patron_note FROM PUBLIC;
REVOKE ALL ON TABLE patron_note FROM evergreen;
GRANT ALL ON TABLE patron_note TO evergreen;
GRANT SELECT ON TABLE patron_note TO bbonner;


--
-- Name: ptype_map; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE ptype_map FROM PUBLIC;
REVOKE ALL ON TABLE ptype_map FROM evergreen;
GRANT ALL ON TABLE ptype_map TO evergreen;
GRANT SELECT ON TABLE ptype_map TO bbonner;


--
-- Name: rejected_circs; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE rejected_circs FROM PUBLIC;
REVOKE ALL ON TABLE rejected_circs FROM evergreen;
GRANT ALL ON TABLE rejected_circs TO evergreen;
GRANT SELECT ON TABLE rejected_circs TO bbonner;


--
-- Name: rejected_holds; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE rejected_holds FROM PUBLIC;
REVOKE ALL ON TABLE rejected_holds FROM evergreen;
GRANT ALL ON TABLE rejected_holds TO evergreen;
GRANT SELECT ON TABLE rejected_holds TO bbonner;


--
-- Name: rename_loc_map; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE rename_loc_map FROM PUBLIC;
REVOKE ALL ON TABLE rename_loc_map FROM evergreen;
GRANT ALL ON TABLE rename_loc_map TO evergreen;
GRANT SELECT ON TABLE rename_loc_map TO bbonner;


--
-- Name: root; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE root FROM PUBLIC;
REVOKE ALL ON TABLE root FROM evergreen;
GRANT ALL ON TABLE root TO evergreen;
GRANT SELECT ON TABLE root TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


--
-- Name: transend; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE transend FROM PUBLIC;
REVOKE ALL ON TABLE transend FROM evergreen;
GRANT ALL ON TABLE transend TO evergreen;
GRANT SELECT ON TABLE transend TO bbonner;


--
-- Name: usr_not_migrated_per_ptype; Type: ACL; Schema: m_kcls2; Owner: evergreen
--

REVOKE ALL ON TABLE usr_not_migrated_per_ptype FROM PUBLIC;
REVOKE ALL ON TABLE usr_not_migrated_per_ptype FROM evergreen;
GRANT ALL ON TABLE usr_not_migrated_per_ptype TO evergreen;
GRANT SELECT ON TABLE usr_not_migrated_per_ptype TO bbonner;


SET search_path = m_kcls3, pg_catalog;

--
-- Name: acq_fund; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON TABLE acq_fund FROM PUBLIC;
REVOKE ALL ON TABLE acq_fund FROM evergreen;
GRANT ALL ON TABLE acq_fund TO evergreen;
GRANT SELECT ON TABLE acq_fund TO bbonner;


--
-- Name: acq_fund_2; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON TABLE acq_fund_2 FROM PUBLIC;
REVOKE ALL ON TABLE acq_fund_2 FROM evergreen;
GRANT ALL ON TABLE acq_fund_2 TO evergreen;
GRANT SELECT ON TABLE acq_fund_2 TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls3; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = m_kcls_call_fix, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: cn_with_one_item; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE cn_with_one_item FROM PUBLIC;
REVOKE ALL ON TABLE cn_with_one_item FROM evergreen;
GRANT ALL ON TABLE cn_with_one_item TO evergreen;
GRANT SELECT ON TABLE cn_with_one_item TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: item_calls; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE item_calls FROM PUBLIC;
REVOKE ALL ON TABLE item_calls FROM evergreen;
GRANT ALL ON TABLE item_calls TO evergreen;
GRANT SELECT ON TABLE item_calls TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_call_fix; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = m_kcls_circhist, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: circhist; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE circhist FROM PUBLIC;
REVOKE ALL ON TABLE circhist FROM evergreen;
GRANT ALL ON TABLE circhist TO evergreen;
GRANT SELECT ON TABLE circhist TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_circhist; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = m_kcls_gap, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: alert_messages; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE alert_messages FROM PUBLIC;
REVOKE ALL ON TABLE alert_messages FROM evergreen;
GRANT ALL ON TABLE alert_messages TO evergreen;
GRANT SELECT ON TABLE alert_messages TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_legacy; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_legacy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_legacy FROM evergreen;
GRANT ALL ON TABLE asset_copy_legacy TO evergreen;
GRANT SELECT ON TABLE asset_copy_legacy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: copy_dupe_barcodes; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE copy_dupe_barcodes FROM PUBLIC;
REVOKE ALL ON TABLE copy_dupe_barcodes FROM evergreen;
GRANT ALL ON TABLE copy_dupe_barcodes TO evergreen;
GRANT SELECT ON TABLE copy_dupe_barcodes TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: int_notes; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE int_notes FROM PUBLIC;
REVOKE ALL ON TABLE int_notes FROM evergreen;
GRANT ALL ON TABLE int_notes TO evergreen;
GRANT SELECT ON TABLE int_notes TO bbonner;


--
-- Name: item_exceptions; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE item_exceptions FROM PUBLIC;
REVOKE ALL ON TABLE item_exceptions FROM evergreen;
GRANT ALL ON TABLE item_exceptions TO evergreen;
GRANT SELECT ON TABLE item_exceptions TO bbonner;


--
-- Name: messages; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE messages FROM PUBLIC;
REVOKE ALL ON TABLE messages FROM evergreen;
GRANT ALL ON TABLE messages TO evergreen;
GRANT SELECT ON TABLE messages TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_gap; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = m_kcls_holds, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: action_hold_request_legacy; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request_legacy FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request_legacy FROM evergreen;
GRANT ALL ON TABLE action_hold_request_legacy TO evergreen;
GRANT SELECT ON TABLE action_hold_request_legacy TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: rejected_holds; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE rejected_holds FROM PUBLIC;
REVOKE ALL ON TABLE rejected_holds FROM evergreen;
GRANT ALL ON TABLE rejected_holds TO evergreen;
GRANT SELECT ON TABLE rejected_holds TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_holds; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = m_kcls_holdsall, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: action_hold_request_legacy; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request_legacy FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request_legacy FROM evergreen;
GRANT ALL ON TABLE action_hold_request_legacy TO evergreen;
GRANT SELECT ON TABLE action_hold_request_legacy TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_holdsall; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = m_kcls_holdsall2, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: action_hold_request_legacy; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request_legacy FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request_legacy FROM evergreen;
GRANT ALL ON TABLE action_hold_request_legacy TO evergreen;
GRANT SELECT ON TABLE action_hold_request_legacy TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_holdsall2; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = m_kcls_holdsall3, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: action_hold_request_legacy; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request_legacy FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request_legacy FROM evergreen;
GRANT ALL ON TABLE action_hold_request_legacy TO evergreen;
GRANT SELECT ON TABLE action_hold_request_legacy TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_holdsall3; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = m_kcls_holdsfix, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: action_hold_request_legacy; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request_legacy FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request_legacy FROM evergreen;
GRANT ALL ON TABLE action_hold_request_legacy TO evergreen;
GRANT SELECT ON TABLE action_hold_request_legacy TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: all_prod_holds; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE all_prod_holds FROM PUBLIC;
REVOKE ALL ON TABLE all_prod_holds FROM evergreen;
GRANT ALL ON TABLE all_prod_holds TO evergreen;
GRANT SELECT ON TABLE all_prod_holds TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: holds_to_delete; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE holds_to_delete FROM PUBLIC;
REVOKE ALL ON TABLE holds_to_delete FROM evergreen;
GRANT ALL ON TABLE holds_to_delete TO evergreen;
GRANT SELECT ON TABLE holds_to_delete TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: rejected_holds; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE rejected_holds FROM PUBLIC;
REVOKE ALL ON TABLE rejected_holds FROM evergreen;
GRANT ALL ON TABLE rejected_holds TO evergreen;
GRANT SELECT ON TABLE rejected_holds TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


--
-- Name: to_keep; Type: ACL; Schema: m_kcls_holdsfix; Owner: evergreen
--

REVOKE ALL ON TABLE to_keep FROM PUBLIC;
REVOKE ALL ON TABLE to_keep FROM evergreen;
GRANT ALL ON TABLE to_keep TO evergreen;
GRANT SELECT ON TABLE to_keep TO bbonner;


SET search_path = m_kcls_items2, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_legacy; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_legacy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_legacy FROM evergreen;
GRANT ALL ON TABLE asset_copy_legacy TO evergreen;
GRANT SELECT ON TABLE asset_copy_legacy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: copy_dupe_barcodes; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE copy_dupe_barcodes FROM PUBLIC;
REVOKE ALL ON TABLE copy_dupe_barcodes FROM evergreen;
GRANT ALL ON TABLE copy_dupe_barcodes TO evergreen;
GRANT SELECT ON TABLE copy_dupe_barcodes TO bbonner;


--
-- Name: copy_dupe_barcodes2; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE copy_dupe_barcodes2 FROM PUBLIC;
REVOKE ALL ON TABLE copy_dupe_barcodes2 FROM evergreen;
GRANT ALL ON TABLE copy_dupe_barcodes2 TO evergreen;
GRANT SELECT ON TABLE copy_dupe_barcodes2 TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: item_exceptions; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE item_exceptions FROM PUBLIC;
REVOKE ALL ON TABLE item_exceptions FROM evergreen;
GRANT ALL ON TABLE item_exceptions TO evergreen;
GRANT SELECT ON TABLE item_exceptions TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


--
-- Name: volumes; Type: ACL; Schema: m_kcls_items2; Owner: evergreen
--

REVOKE ALL ON TABLE volumes FROM PUBLIC;
REVOKE ALL ON TABLE volumes FROM evergreen;
GRANT ALL ON TABLE volumes TO evergreen;
GRANT SELECT ON TABLE volumes TO bbonner;


SET search_path = m_kcls_items3, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_legacy; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_legacy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_legacy FROM evergreen;
GRANT ALL ON TABLE asset_copy_legacy TO evergreen;
GRANT SELECT ON TABLE asset_copy_legacy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: calls; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE calls FROM PUBLIC;
REVOKE ALL ON TABLE calls FROM evergreen;
GRANT ALL ON TABLE calls TO evergreen;
GRANT SELECT ON TABLE calls TO bbonner;


--
-- Name: cn_to_del; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE cn_to_del FROM PUBLIC;
REVOKE ALL ON TABLE cn_to_del FROM evergreen;
GRANT ALL ON TABLE cn_to_del TO evergreen;
GRANT SELECT ON TABLE cn_to_del TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: copy_dupe_barcodes; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE copy_dupe_barcodes FROM PUBLIC;
REVOKE ALL ON TABLE copy_dupe_barcodes FROM evergreen;
GRANT ALL ON TABLE copy_dupe_barcodes TO evergreen;
GRANT SELECT ON TABLE copy_dupe_barcodes TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: item_exceptions; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE item_exceptions FROM PUBLIC;
REVOKE ALL ON TABLE item_exceptions FROM evergreen;
GRANT ALL ON TABLE item_exceptions TO evergreen;
GRANT SELECT ON TABLE item_exceptions TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_items3; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = m_kcls_ord, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: item_exceptions; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE item_exceptions FROM PUBLIC;
REVOKE ALL ON TABLE item_exceptions FROM evergreen;
GRANT ALL ON TABLE item_exceptions TO evergreen;
GRANT SELECT ON TABLE item_exceptions TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: on_order_items; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE on_order_items FROM PUBLIC;
REVOKE ALL ON TABLE on_order_items FROM evergreen;
GRANT ALL ON TABLE on_order_items TO evergreen;
GRANT SELECT ON TABLE on_order_items TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_ord; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = m_kcls_ord2, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: on_order_items; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE on_order_items FROM PUBLIC;
REVOKE ALL ON TABLE on_order_items FROM evergreen;
GRANT ALL ON TABLE on_order_items TO evergreen;
GRANT SELECT ON TABLE on_order_items TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_ord2; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = m_kcls_ord3, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: on_order_items; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE on_order_items FROM PUBLIC;
REVOKE ALL ON TABLE on_order_items FROM evergreen;
GRANT ALL ON TABLE on_order_items TO evergreen;
GRANT SELECT ON TABLE on_order_items TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_kcls_ord3; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = m_kcls_xfr, pg_catalog;

--
-- Name: billing_type; Type: ACL; Schema: m_kcls_xfr; Owner: evergreen
--

REVOKE ALL ON TABLE billing_type FROM PUBLIC;
REVOKE ALL ON TABLE billing_type FROM evergreen;
GRANT ALL ON TABLE billing_type TO evergreen;
GRANT SELECT ON TABLE billing_type TO bbonner;


--
-- Name: circ_modifier; Type: ACL; Schema: m_kcls_xfr; Owner: evergreen
--

REVOKE ALL ON TABLE circ_modifier FROM PUBLIC;
REVOKE ALL ON TABLE circ_modifier FROM evergreen;
GRANT ALL ON TABLE circ_modifier TO evergreen;
GRANT SELECT ON TABLE circ_modifier TO bbonner;


--
-- Name: grp_change; Type: ACL; Schema: m_kcls_xfr; Owner: evergreen
--

REVOKE ALL ON TABLE grp_change FROM PUBLIC;
REVOKE ALL ON TABLE grp_change FROM evergreen;
GRANT ALL ON TABLE grp_change TO evergreen;
GRANT SELECT ON TABLE grp_change TO bbonner;


--
-- Name: grp_tree; Type: ACL; Schema: m_kcls_xfr; Owner: evergreen
--

REVOKE ALL ON TABLE grp_tree FROM PUBLIC;
REVOKE ALL ON TABLE grp_tree FROM evergreen;
GRANT ALL ON TABLE grp_tree TO evergreen;
GRANT SELECT ON TABLE grp_tree TO bbonner;


--
-- Name: org_unit; Type: ACL; Schema: m_kcls_xfr; Owner: evergreen
--

REVOKE ALL ON TABLE org_unit FROM PUBLIC;
REVOKE ALL ON TABLE org_unit FROM evergreen;
GRANT ALL ON TABLE org_unit TO evergreen;
GRANT SELECT ON TABLE org_unit TO bbonner;


--
-- Name: org_unit_type; Type: ACL; Schema: m_kcls_xfr; Owner: evergreen
--

REVOKE ALL ON TABLE org_unit_type FROM PUBLIC;
REVOKE ALL ON TABLE org_unit_type FROM evergreen;
GRANT ALL ON TABLE org_unit_type TO evergreen;
GRANT SELECT ON TABLE org_unit_type TO bbonner;


SET search_path = m_test, pg_catalog;

--
-- Name: action_circulation; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE action_circulation FROM PUBLIC;
REVOKE ALL ON TABLE action_circulation FROM evergreen;
GRANT ALL ON TABLE action_circulation TO evergreen;
GRANT SELECT ON TABLE action_circulation TO bbonner;


--
-- Name: action_hold_notification; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_notification FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_notification FROM evergreen;
GRANT ALL ON TABLE action_hold_notification TO evergreen;
GRANT SELECT ON TABLE action_hold_notification TO bbonner;


--
-- Name: action_hold_request; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE action_hold_request FROM PUBLIC;
REVOKE ALL ON TABLE action_hold_request FROM evergreen;
GRANT ALL ON TABLE action_hold_request TO evergreen;
GRANT SELECT ON TABLE action_hold_request TO bbonner;


--
-- Name: actor_card; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE actor_card FROM PUBLIC;
REVOKE ALL ON TABLE actor_card FROM evergreen;
GRANT ALL ON TABLE actor_card TO evergreen;
GRANT SELECT ON TABLE actor_card TO bbonner;


--
-- Name: actor_stat_cat; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat TO bbonner;


--
-- Name: actor_stat_cat_entry; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry TO bbonner;


--
-- Name: actor_stat_cat_entry_usr_map; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM PUBLIC;
REVOKE ALL ON TABLE actor_stat_cat_entry_usr_map FROM evergreen;
GRANT ALL ON TABLE actor_stat_cat_entry_usr_map TO evergreen;
GRANT SELECT ON TABLE actor_stat_cat_entry_usr_map TO bbonner;


--
-- Name: actor_usr; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr FROM evergreen;
GRANT ALL ON TABLE actor_usr TO evergreen;
GRANT SELECT ON TABLE actor_usr TO bbonner;


--
-- Name: actor_usr_address; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_address FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_address FROM evergreen;
GRANT ALL ON TABLE actor_usr_address TO evergreen;
GRANT SELECT ON TABLE actor_usr_address TO bbonner;


--
-- Name: actor_usr_note; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE actor_usr_note FROM PUBLIC;
REVOKE ALL ON TABLE actor_usr_note FROM evergreen;
GRANT ALL ON TABLE actor_usr_note TO evergreen;
GRANT SELECT ON TABLE actor_usr_note TO bbonner;


--
-- Name: asset_call_number; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE asset_call_number FROM PUBLIC;
REVOKE ALL ON TABLE asset_call_number FROM evergreen;
GRANT ALL ON TABLE asset_call_number TO evergreen;
GRANT SELECT ON TABLE asset_call_number TO bbonner;


--
-- Name: asset_copy; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy FROM evergreen;
GRANT ALL ON TABLE asset_copy TO evergreen;
GRANT SELECT ON TABLE asset_copy TO bbonner;


--
-- Name: asset_copy_location; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_location FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_location FROM evergreen;
GRANT ALL ON TABLE asset_copy_location TO evergreen;
GRANT SELECT ON TABLE asset_copy_location TO bbonner;


--
-- Name: asset_copy_note; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE asset_copy_note FROM PUBLIC;
REVOKE ALL ON TABLE asset_copy_note FROM evergreen;
GRANT ALL ON TABLE asset_copy_note TO evergreen;
GRANT SELECT ON TABLE asset_copy_note TO bbonner;


--
-- Name: asset_stat_cat; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat TO bbonner;


--
-- Name: asset_stat_cat_entry; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry TO bbonner;


--
-- Name: asset_stat_cat_entry_copy_map; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM PUBLIC;
REVOKE ALL ON TABLE asset_stat_cat_entry_copy_map FROM evergreen;
GRANT ALL ON TABLE asset_stat_cat_entry_copy_map TO evergreen;
GRANT SELECT ON TABLE asset_stat_cat_entry_copy_map TO bbonner;


--
-- Name: base_circ_field_map; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE base_circ_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_circ_field_map FROM evergreen;
GRANT ALL ON TABLE base_circ_field_map TO evergreen;
GRANT SELECT ON TABLE base_circ_field_map TO bbonner;


--
-- Name: base_circ_field_map_id_seq; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_circ_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_circ_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_circ_field_map_id_seq TO bbonner;


--
-- Name: base_copy_location_map; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE base_copy_location_map FROM PUBLIC;
REVOKE ALL ON TABLE base_copy_location_map FROM evergreen;
GRANT ALL ON TABLE base_copy_location_map TO evergreen;
GRANT SELECT ON TABLE base_copy_location_map TO bbonner;


--
-- Name: base_copy_location_map_id_seq; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_copy_location_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_copy_location_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_copy_location_map_id_seq TO bbonner;


--
-- Name: base_item_dynamic_field_map; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE base_item_dynamic_field_map FROM PUBLIC;
REVOKE ALL ON TABLE base_item_dynamic_field_map FROM evergreen;
GRANT ALL ON TABLE base_item_dynamic_field_map TO evergreen;
GRANT SELECT ON TABLE base_item_dynamic_field_map TO bbonner;


--
-- Name: base_item_dynamic_field_map_id_seq; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_item_dynamic_field_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_item_dynamic_field_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_item_dynamic_field_map_id_seq TO bbonner;


--
-- Name: base_profile_map; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE base_profile_map FROM PUBLIC;
REVOKE ALL ON TABLE base_profile_map FROM evergreen;
GRANT ALL ON TABLE base_profile_map TO evergreen;
GRANT SELECT ON TABLE base_profile_map TO bbonner;


--
-- Name: base_profile_map_id_seq; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE base_profile_map_id_seq FROM evergreen;
GRANT ALL ON SEQUENCE base_profile_map_id_seq TO evergreen;
GRANT USAGE ON SEQUENCE base_profile_map_id_seq TO bbonner;


--
-- Name: circhist; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE circhist FROM PUBLIC;
REVOKE ALL ON TABLE circhist FROM evergreen;
GRANT ALL ON TABLE circhist TO evergreen;
GRANT SELECT ON TABLE circhist TO bbonner;


--
-- Name: config; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE config FROM PUBLIC;
REVOKE ALL ON TABLE config FROM evergreen;
GRANT ALL ON TABLE config TO evergreen;
GRANT SELECT ON TABLE config TO bbonner;


--
-- Name: fields_requiring_mapping; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE fields_requiring_mapping FROM PUBLIC;
REVOKE ALL ON TABLE fields_requiring_mapping FROM evergreen;
GRANT ALL ON TABLE fields_requiring_mapping TO evergreen;
GRANT SELECT ON TABLE fields_requiring_mapping TO bbonner;


--
-- Name: money_billing; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE money_billing FROM PUBLIC;
REVOKE ALL ON TABLE money_billing FROM evergreen;
GRANT ALL ON TABLE money_billing TO evergreen;
GRANT SELECT ON TABLE money_billing TO bbonner;


--
-- Name: money_cash_payment; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE money_cash_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_cash_payment FROM evergreen;
GRANT ALL ON TABLE money_cash_payment TO evergreen;
GRANT SELECT ON TABLE money_cash_payment TO bbonner;


--
-- Name: money_forgive_payment; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE money_forgive_payment FROM PUBLIC;
REVOKE ALL ON TABLE money_forgive_payment FROM evergreen;
GRANT ALL ON TABLE money_forgive_payment TO evergreen;
GRANT SELECT ON TABLE money_forgive_payment TO bbonner;


--
-- Name: money_grocery; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE money_grocery FROM PUBLIC;
REVOKE ALL ON TABLE money_grocery FROM evergreen;
GRANT ALL ON TABLE money_grocery TO evergreen;
GRANT SELECT ON TABLE money_grocery TO bbonner;


--
-- Name: sql_current; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE sql_current FROM PUBLIC;
REVOKE ALL ON TABLE sql_current FROM evergreen;
GRANT ALL ON TABLE sql_current TO evergreen;
GRANT SELECT ON TABLE sql_current TO bbonner;


--
-- Name: sql_log; Type: ACL; Schema: m_test; Owner: evergreen
--

REVOKE ALL ON TABLE sql_log FROM PUBLIC;
REVOKE ALL ON TABLE sql_log FROM evergreen;
GRANT ALL ON TABLE sql_log TO evergreen;
GRANT SELECT ON TABLE sql_log TO bbonner;


SET search_path = migration_tools, pg_catalog;

--
-- Name: db_object_stash; Type: ACL; Schema: migration_tools; Owner: evergreen
--

REVOKE ALL ON TABLE db_object_stash FROM PUBLIC;
REVOKE ALL ON TABLE db_object_stash FROM evergreen;
GRANT ALL ON TABLE db_object_stash TO evergreen;
GRANT SELECT ON TABLE db_object_stash TO bbonner;


SET search_path = prod_staff_users, pg_catalog;

--
-- Name: card; Type: ACL; Schema: prod_staff_users; Owner: evergreen
--

REVOKE ALL ON TABLE card FROM PUBLIC;
REVOKE ALL ON TABLE card FROM evergreen;
GRANT ALL ON TABLE card TO evergreen;
GRANT SELECT ON TABLE card TO bbonner;


--
-- Name: save_source; Type: ACL; Schema: prod_staff_users; Owner: evergreen
--

REVOKE ALL ON TABLE save_source FROM PUBLIC;
REVOKE ALL ON TABLE save_source FROM evergreen;
GRANT ALL ON TABLE save_source TO evergreen;
GRANT SELECT ON TABLE save_source TO bbonner;


--
-- Name: save_these; Type: ACL; Schema: prod_staff_users; Owner: evergreen
--

REVOKE ALL ON TABLE save_these FROM PUBLIC;
REVOKE ALL ON TABLE save_these FROM evergreen;
GRANT ALL ON TABLE save_these TO evergreen;
GRANT SELECT ON TABLE save_these TO bbonner;


--
-- Name: usr; Type: ACL; Schema: prod_staff_users; Owner: evergreen
--

REVOKE ALL ON TABLE usr FROM PUBLIC;
REVOKE ALL ON TABLE usr FROM evergreen;
GRANT ALL ON TABLE usr TO evergreen;
GRANT SELECT ON TABLE usr TO bbonner;


--
-- Name: usr_address; Type: ACL; Schema: prod_staff_users; Owner: evergreen
--

REVOKE ALL ON TABLE usr_address FROM PUBLIC;
REVOKE ALL ON TABLE usr_address FROM evergreen;
GRANT ALL ON TABLE usr_address TO evergreen;
GRANT SELECT ON TABLE usr_address TO bbonner;


--
-- Name: usr_perm_map; Type: ACL; Schema: prod_staff_users; Owner: evergreen
--

REVOKE ALL ON TABLE usr_perm_map FROM PUBLIC;
REVOKE ALL ON TABLE usr_perm_map FROM evergreen;
GRANT ALL ON TABLE usr_perm_map TO evergreen;
GRANT SELECT ON TABLE usr_perm_map TO bbonner;


--
-- Name: usr_setting; Type: ACL; Schema: prod_staff_users; Owner: evergreen
--

REVOKE ALL ON TABLE usr_setting FROM PUBLIC;
REVOKE ALL ON TABLE usr_setting FROM evergreen;
GRANT ALL ON TABLE usr_setting TO evergreen;
GRANT SELECT ON TABLE usr_setting TO bbonner;


--
-- Name: usr_work_ou_map; Type: ACL; Schema: prod_staff_users; Owner: evergreen
--

REVOKE ALL ON TABLE usr_work_ou_map FROM PUBLIC;
REVOKE ALL ON TABLE usr_work_ou_map FROM evergreen;
GRANT ALL ON TABLE usr_work_ou_map TO evergreen;
GRANT SELECT ON TABLE usr_work_ou_map TO bbonner;


SET search_path = sip_temp, pg_catalog;

--
-- Name: user; Type: ACL; Schema: sip_temp; Owner: evergreen
--

REVOKE ALL ON TABLE "user" FROM PUBLIC;
REVOKE ALL ON TABLE "user" FROM evergreen;
GRANT ALL ON TABLE "user" TO evergreen;
GRANT SELECT ON TABLE "user" TO bbonner;


--
-- PostgreSQL database dump complete
--

COMMIT;
